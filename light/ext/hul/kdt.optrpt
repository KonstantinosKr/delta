Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.


    Report from: Interprocedural optimizations [ipo]

  WHOLE PROGRAM (SAFE) [EITHER METHOD]: false
  WHOLE PROGRAM (SEEN) [TABLE METHOD]: false
  WHOLE PROGRAM (READ) [OBJECT READER METHOD]: false

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: disabled
  -inline-max-per-compile: disabled

In the inlining report below:
   "sz" refers to the "size" of the routine. The smaller a routine's size,
      the more likely it is to be inlined.
   "isz" refers to the "inlined size" of the routine. This is the amount
      the calling routine will grow if the called routine is inlined into it.
      The compiler generally limits the amount a routine can grow by having
      routines inlined into it.

Begin optimization report for: delta::hull::compare0(double **, double **)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (delta::hull::compare0(double **, double **)) [1/17=5.9%] delta/hull/kdt.cpp(35,1)

===========================================================================

Begin optimization report for: delta::hull::compare1(double **, double **)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (delta::hull::compare1(double **, double **)) [2/17=11.8%] delta/hull/kdt.cpp(42,1)

===========================================================================

Begin optimization report for: delta::hull::compare2(double **, double **)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (delta::hull::compare2(double **, double **)) [3/17=17.6%] delta/hull/kdt.cpp(49,1)

===========================================================================

Begin optimization report for: delta::hull::overlap(void *, delta::hull::BOX *, delta::hull::BOX *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (delta::hull::overlap(void *, delta::hull::BOX *, delta::hull::BOX *)) [4/17=23.5%] delta/hull/kdt.cpp(61,1)
  -> EXTERN: (62,3) delta::hull::SET_Insert(delta::hull::MEM *, delta::hull::SET **, void *, delta::hull::SET_Compare)
  -> EXTERN: (63,3) delta::hull::SET_Insert(delta::hull::MEM *, delta::hull::SET **, void *, delta::hull::SET_Compare)

===========================================================================

Begin optimization report for: delta::hull::separate(int, double **, double)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (delta::hull::separate(int, double **, double)) delta/hull/kdt.cpp(68,1)

===========================================================================

Begin optimization report for: delta::hull::KDT_Create(int, double *, double)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (delta::hull::KDT_Create(int, double *, double)) [6/17=35.3%] delta/hull/kdt.cpp(236,1)
  -> EXTERN: (241,18) malloc(size_t)
  -> INLINE: (243,7) delta::hull::separate(int, double **, double) (isz = 174) (sz = 186)
    -> EXTERN: (78,15) malloc(size_t)
    -> EXTERN: (79,16) malloc(size_t)
    -> EXTERN: (97,3) delta::hull::hybrid(delta::hull::BOX **, int, void *, delta::hull::BOX_Overlap_Create)
    -> EXTERN: (106,19) delta::hull::SET_First(delta::hull::SET *)
    -> EXTERN: (106,59) delta::hull::SET_Next(delta::hull::SET *)
    -> EXTERN: (116,5) delta::hull::SET_Free(delta::hull::MEM *, delta::hull::SET **)
    -> EXTERN: (119,3) free(void *)
    -> EXTERN: (120,3) free(void *)
  -> INLINE: (244,8) delta::hull::create(delta::hull::KDT *, int, double **) (isz = 55) (sz = 67)
    -> EXTERN: (196,15) delta::hull::MEM_CALLOC(size_t)
    -> (205,7) delta::hull::split(int, double **, double *, int *) (isz = 244) (sz = 258)
       [[ Inlining would exceed -inline-max-size value (258>253) <1>]]
    -> (209,13) delta::hull::create(delta::hull::KDT *, int, double **) (isz = 55) (sz = 67)
       [[ Callee not marked with inlining pragma  <2>]]
    -> (210,13) delta::hull::create(delta::hull::KDT *, int, double **) (isz = 55) (sz = 67)
       [[ Callee not marked with inlining pragma  <2>]]
    -> (214,13) delta::hull::create(delta::hull::KDT *, int, double **) (isz = 55) (sz = 67)
       [[ Callee not marked with inlining pragma  <2>]]
    -> (215,13) delta::hull::create(delta::hull::KDT *, int, double **) (isz = 55) (sz = 67)
       [[ Callee not marked with inlining pragma  <2>]]
  -> EXTERN: (245,3) free(void *)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at delta/hull/kdt.cpp(242,3)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at delta/hull/kdt.cpp(242,3)
   remark #15389: vectorization support: reference q has unaligned access   [ delta/hull/kdt.cpp(242,28) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 0.867
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 6 
   remark #15477: vector loop cost: 1.870 
   remark #15478: estimated potential speedup: 3.040 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at delta/hull/kdt.cpp(242,3)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at delta/hull/kdt.cpp(81,3) inlined into delta/hull/kdt.cpp(243,7)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between _pb line 83 and _pb line 94
   remark #15346: vector dependence: assumed FLOW dependence between _g line 94 and _g line 83
LOOP END

LOOP BEGIN at delta/hull/kdt.cpp(99,3) inlined into delta/hull/kdt.cpp(243,7)
   remark #15382: vectorization support: call to function delta::hull::SET_First(delta::hull::SET *) cannot be vectorized   [ delta/hull/kdt.cpp(106,19) ]
   remark #15382: vectorization support: call to function delta::hull::SET_Next(delta::hull::SET *) cannot be vectorized   [ delta/hull/kdt.cpp(106,59) ]
   remark #15382: vectorization support: call to function delta::hull::SET_Free(delta::hull::MEM *, delta::hull::SET **) cannot be vectorized   [ delta/hull/kdt.cpp(116,5) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between _adj line 104 and _adj line 112
   remark #15346: vector dependence: assumed OUTPUT dependence between q_771 line 112 and q_771 line 104

   LOOP BEGIN at delta/hull/kdt.cpp(106,7) inlined into delta/hull/kdt.cpp(243,7)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: delta::hull::create(delta::hull::KDT *, int, double **)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (delta::hull::create(delta::hull::KDT *, int, double **)) [7/17=41.2%] delta/hull/kdt.cpp(192,1)
  -> EXTERN: (196,15) delta::hull::MEM_CALLOC(size_t)
  -> (205,7) delta::hull::split(int, double **, double *, int *) (isz = 244) (sz = 258)
     [[ Inlining would exceed -inline-max-size value (258>230) <1>]]
  -> (209,13) delta::hull::create(delta::hull::KDT *, int, double **) (isz = 55) (sz = 67)
     [[ Callee not marked with inlining pragma  <2>]]
  -> (210,13) delta::hull::create(delta::hull::KDT *, int, double **) (isz = 55) (sz = 67)
     [[ Callee not marked with inlining pragma  <2>]]
  -> (214,13) delta::hull::create(delta::hull::KDT *, int, double **) (isz = 55) (sz = 67)
     [[ Callee not marked with inlining pragma  <2>]]
  -> (215,13) delta::hull::create(delta::hull::KDT *, int, double **) (isz = 55) (sz = 67)
     [[ Callee not marked with inlining pragma  <2>]]

===========================================================================

Begin optimization report for: delta::hull::split(int, double **, double *, int *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (delta::hull::split(int, double **, double *, int *)) [8/17=47.1%] delta/hull/kdt.cpp(127,1)
  -> EXTERN: (155,3) qsort(void *, size_t, size_t, int (*)(const void *, const void *))


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at delta/hull/kdt.cpp(132,3)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at delta/hull/kdt.cpp(132,3)
   remark #15389: vectorization support: reference x has unaligned access   [ delta/hull/kdt.cpp(134,5) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15415: vectorization support: gather was generated for the variable norm_alias_2F64:  indirect access, 64bit indexed   [ delta/hull/kdt.cpp(134,9) ]
   remark #15415: vectorization support: gather was generated for the variable norm_alias_2F64:  indirect access, 64bit indexed   [ delta/hull/kdt.cpp(135,9) ]
   remark #15415: vectorization support: gather was generated for the variable norm_alias_2F64:  indirect access, 64bit indexed   [ delta/hull/kdt.cpp(136,9) ]
   remark #15415: vectorization support: gather was generated for the variable norm_alias_2F64:  indirect access, 64bit indexed   [ delta/hull/kdt.cpp(138,9) ]
   remark #15415: vectorization support: gather was generated for the variable norm_alias_2F64:  indirect access, 64bit indexed   [ delta/hull/kdt.cpp(139,9) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.977
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15458: masked indexed (or gather) loads: 5 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 50 
   remark #15477: vector loop cost: 32.250 
   remark #15478: estimated potential speedup: 1.510 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at delta/hull/kdt.cpp(132,3)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at delta/hull/kdt.cpp(150,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between i line 151 and i line 151
   remark #15346: vector dependence: assumed ANTI dependence between i line 151 and i line 151
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at delta/hull/kdt.cpp(152,3)
   remark #15522: loop was not vectorized: loop control flow is too complex. Try using canonical loop form

   LOOP BEGIN at delta/hull/kdt.cpp(157,3)
      remark #15520: loop was not vectorized: loop with multiple exits cannot be vectorized unless it meets search loop idiom criteria   [ delta/hull/kdt.cpp(163,2) ]
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: delta::hull::KDT_Drop(delta::hull::KDT *, double *, void *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (delta::hull::KDT_Drop(delta::hull::KDT *, double *, void *)) [9/17=52.9%] delta/hull/kdt.cpp(252,1)
  -> EXTERN: (256,25) realloc(void *, size_t)
  -> (259,48) delta::hull::KDT_Drop(delta::hull::KDT *, double *, void *) (isz = 59) (sz = 68)
     [[ Callee not marked with inlining pragma  <2>]]
  -> (260,45) delta::hull::KDT_Drop(delta::hull::KDT *, double *, void *) (isz = 59) (sz = 68)
     [[ Callee not marked with inlining pragma  <2>]]
  -> (263,5) delta::hull::KDT_Drop(delta::hull::KDT *, double *, void *) (isz = 59) (sz = 68)
     [[ Callee not marked with inlining pragma  <2>]]
  -> (264,5) delta::hull::KDT_Drop(delta::hull::KDT *, double *, void *) (isz = 59) (sz = 68)
     [[ Callee not marked with inlining pragma  <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at delta/hull/kdt.cpp(252,1)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form
LOOP END
===========================================================================

Begin optimization report for: delta::hull::KDT_Pick(delta::hull::KDT *, double *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (delta::hull::KDT_Pick(delta::hull::KDT *, double *)) [10/17=58.8%] delta/hull/kdt.cpp(270,1)
  -> (272,47) delta::hull::KDT_Pick(delta::hull::KDT *, double *) (isz = 21) (sz = 32)
     [[ Callee not marked with inlining pragma  <2>]]
  -> (273,15) delta::hull::KDT_Pick(delta::hull::KDT *, double *) (isz = 21) (sz = 32)
     [[ Callee not marked with inlining pragma  <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at delta/hull/kdt.cpp(270,1)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form
LOOP END
===========================================================================

Begin optimization report for: delta::hull::KDT_Pick_Extents(delta::hull::KDT *, double *, delta::hull::SET **)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (delta::hull::KDT_Pick_Extents(delta::hull::KDT *, double *, delta::hull::SET **)) [11/17=64.7%] delta/hull/kdt.cpp(278,1)
  -> EXTERN: (281,5) delta::hull::SET_Insert(delta::hull::MEM *, delta::hull::SET **, void *, delta::hull::SET_Compare)
  -> (283,48) delta::hull::KDT_Pick_Extents(delta::hull::KDT *, double *, delta::hull::SET **) (isz = 44) (sz = 53)
     [[ Callee not marked with inlining pragma  <2>]]
  -> (284,45) delta::hull::KDT_Pick_Extents(delta::hull::KDT *, double *, delta::hull::SET **) (isz = 44) (sz = 53)
     [[ Callee not marked with inlining pragma  <2>]]
  -> (287,5) delta::hull::KDT_Pick_Extents(delta::hull::KDT *, double *, delta::hull::SET **) (isz = 44) (sz = 53)
     [[ Callee not marked with inlining pragma  <2>]]
  -> (288,5) delta::hull::KDT_Pick_Extents(delta::hull::KDT *, double *, delta::hull::SET **) (isz = 44) (sz = 53)
     [[ Callee not marked with inlining pragma  <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at delta/hull/kdt.cpp(278,1)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form
LOOP END
===========================================================================

Begin optimization report for: delta::hull::KDT_Nearest(delta::hull::KDT *, double *, double)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (delta::hull::KDT_Nearest(delta::hull::KDT *, double *, double)) [12/17=70.6%] delta/hull/kdt.cpp(294,1)
  -> (311,11) delta::hull::KDT_Nearest(delta::hull::KDT *, double *, double) (isz = 161) (sz = 172)
     [[ Callee not marked with inlining pragma  <2>]]
  -> (320,11) delta::hull::KDT_Nearest(delta::hull::KDT *, double *, double) (isz = 161) (sz = 172)
     [[ Callee not marked with inlining pragma  <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at delta/hull/kdt.cpp(301,3)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form
LOOP END
===========================================================================

Begin optimization report for: delta::hull::KDT_Size(delta::hull::KDT *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (delta::hull::KDT_Size(delta::hull::KDT *)) [13/17=76.5%] delta/hull/kdt.cpp(339,1)
  -> INLINE: (341,3) delta::hull::index_nodes(delta::hull::KDT *, int *) (isz = 15) (sz = 22)
    -> (228,5) delta::hull::index_nodes(delta::hull::KDT *, int *) (isz = 15) (sz = 22)
       [[ Callee not marked with inlining pragma  <2>]]
    -> (229,5) delta::hull::index_nodes(delta::hull::KDT *, int *) (isz = 15) (sz = 22)
       [[ Callee not marked with inlining pragma  <2>]]

===========================================================================

Begin optimization report for: delta::hull::index_nodes(delta::hull::KDT *, int *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (delta::hull::index_nodes(delta::hull::KDT *, int *)) [14/17=82.4%] delta/hull/kdt.cpp(223,1)
  -> (228,5) delta::hull::index_nodes(delta::hull::KDT *, int *) (isz = 15) (sz = 22)
     [[ Callee not marked with inlining pragma  <2>]]
  -> (229,5) delta::hull::index_nodes(delta::hull::KDT *, int *) (isz = 15) (sz = 22)
     [[ Callee not marked with inlining pragma  <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at delta/hull/kdt.cpp(224,3)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form
LOOP END
===========================================================================

Begin optimization report for: delta::hull::KDT_First(delta::hull::KDT *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (delta::hull::KDT_First(delta::hull::KDT *)) [15/17=88.2%] delta/hull/kdt.cpp(347,1)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at delta/hull/kdt.cpp(349,3)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form
   remark #25478: While Loop Unrolled by 2  
LOOP END
===========================================================================

Begin optimization report for: delta::hull::KDT_Next(delta::hull::KDT *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (delta::hull::KDT_Next(delta::hull::KDT *)) [16/17=94.1%] delta/hull/kdt.cpp(355,1)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at delta/hull/kdt.cpp(376,5)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form
   remark #25478: While Loop Unrolled by 2  
LOOP END

LOOP BEGIN at delta/hull/kdt.cpp(367,5)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form
LOOP END
===========================================================================

Begin optimization report for: delta::hull::KDT_Destroy(delta::hull::KDT *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (delta::hull::KDT_Destroy(delta::hull::KDT *)) [17/17=100.0%] delta/hull/kdt.cpp(383,1)
  -> (385,3) delta::hull::KDT_Destroy(delta::hull::KDT *) (isz = 11) (sz = 17)
     [[ Callee not marked with inlining pragma  <2>]]
  -> (386,3) delta::hull::KDT_Destroy(delta::hull::KDT *) (isz = 11) (sz = 17)
     [[ Callee not marked with inlining pragma  <2>]]
  -> EXTERN: (387,3) free(void *)
  -> EXTERN: (388,3) free(void *)

===========================================================================

    Report from: Interprocedural optimizations [ipo]

INLINING FOOTNOTES:

<1> The function is larger than the inliner would normally inline.  Use the
    option -inline-max-size to increase the size of any function that would
    normally be inlined, add "inline __attribute__((always_inline))" to the
    declaration of the called function, or add "#pragma forceinline" before
    the call site.

<2> The compiler's heuristics indicate that the function is not profitable to 
    inline.  Override this decision by adding "inline 
    __attribute__((always_inline))" to the declaration of the called function, 
    or add "#pragma forceinline" before the call site.

