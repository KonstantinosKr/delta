Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.


Begin optimization report for: main(int, char **)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ttd.cpp(34,3) inlined into ttd.cpp(76,3)
   remark #15388: vectorization support: reference a has aligned access   [ ttd.cpp(36,5) ]
   remark #15388: vectorization support: reference a has aligned access   [ ttd.cpp(37,5) ]
   remark #15388: vectorization support: reference a has aligned access   [ ttd.cpp(38,5) ]
   remark #15388: vectorization support: reference b has aligned access   [ ttd.cpp(40,5) ]
   remark #15388: vectorization support: reference b has aligned access   [ ttd.cpp(41,5) ]
   remark #15388: vectorization support: reference b has aligned access   [ ttd.cpp(42,5) ]
   remark #15388: vectorization support: reference c has aligned access   [ ttd.cpp(44,5) ]
   remark #15388: vectorization support: reference c has aligned access   [ ttd.cpp(45,5) ]
   remark #15388: vectorization support: reference c has aligned access   [ ttd.cpp(46,5) ]
   remark #15388: vectorization support: reference d has aligned access   [ ttd.cpp(48,5) ]
   remark #15388: vectorization support: reference d has aligned access   [ ttd.cpp(49,5) ]
   remark #15388: vectorization support: reference d has aligned access   [ ttd.cpp(50,5) ]
   remark #15388: vectorization support: reference e has aligned access   [ ttd.cpp(52,5) ]
   remark #15388: vectorization support: reference e has aligned access   [ ttd.cpp(53,5) ]
   remark #15388: vectorization support: reference e has aligned access   [ ttd.cpp(54,5) ]
   remark #15388: vectorization support: reference f has aligned access   [ ttd.cpp(56,5) ]
   remark #15388: vectorization support: reference f has aligned access   [ ttd.cpp(57,5) ]
   remark #15388: vectorization support: reference f has aligned access   [ ttd.cpp(58,5) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.013
   remark #15301: SIMD LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 18 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 1910 
   remark #15477: vector loop cost: 360.000 
   remark #15478: estimated potential speedup: 5.300 
   remark #15482: vectorized math library calls: 18 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at ttd.cpp(92,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ttd.cpp(106,5)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at ttd.cpp(106,5)
      remark #15388: vectorization support: reference d has aligned access   [ ttd.cpp(109,7) ]
      remark #15388: vectorization support: reference d has aligned access   [ ttd.cpp(110,7) ]
      remark #15388: vectorization support: reference d has aligned access   [ ttd.cpp(111,7) ]
      remark #15388: vectorization support: reference e has aligned access   [ ttd.cpp(113,7) ]
      remark #15388: vectorization support: reference e has aligned access   [ ttd.cpp(114,7) ]
      remark #15388: vectorization support: reference e has aligned access   [ ttd.cpp(115,7) ]
      remark #15388: vectorization support: reference f has aligned access   [ ttd.cpp(117,7) ]
      remark #15388: vectorization support: reference f has aligned access   [ ttd.cpp(118,7) ]
      remark #15388: vectorization support: reference f has aligned access   [ ttd.cpp(119,7) ]
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 0.051
      remark #15301: SIMD LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 9 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 181 
      remark #15477: vector loop cost: 198.000 
      remark #15478: estimated potential speedup: 0.910 
      remark #15485: serialized function calls: 1
      remark #15488: --- end vector loop cost summary ---
      remark #15489: --- begin vector function matching report ---
      remark #15490: Function call: penalty(double *, double *, double *, double *, double *, double *, double &, double &, double &, double &, double &, double &) with simdlen=4, actual parameter types: (uniform,uniform,uniform,uniform,uniform,uniform,uniform,uniform,uniform,uniform,uniform,uniform)   [ ttd.cpp(121,7) ]
      remark #15545: SIMD annotation was not seen, consider adding 'declare simd' directives at function declaration 
      remark #15493: --- end vector function matching report ---
   LOOP END

   LOOP BEGIN at ttd.cpp(106,5)
   <Remainder loop for vectorization>
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: penalty(double *, double *, double *, double *, double *, double *, double &, double &, double &, double &, double &, double &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ttd.cpp(233,3)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at ttd.cpp(311,5)
      remark #15388: vectorization support: reference x has aligned access
      remark #15388: vectorization support: reference x has aligned access
      remark #15388: vectorization support: reference dx has aligned access
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15427: loop was completely unrolled
      remark #15399: vectorization support: unroll factor set to 2
      remark #15448: unmasked aligned unit stride loads: 2 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 6 
      remark #15477: vector loop cost: 2.500 
      remark #15478: estimated potential speedup: 2.400 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at ttd.cpp(311,5)
   LOOP END

   LOOP BEGIN at ttd.cpp(311,5)
   LOOP END

   LOOP BEGIN at ttd.cpp(311,5)
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: rndtriangles(unsigned int, double, double (*)[10000], double (*)[10000], double (*)[10000], double (*)[10000], double (*)[10000], double (*)[10000])

    Report from: Vector optimizations [vec]


LOOP BEGIN at ttd.cpp(34,3)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at ttd.cpp(34,3)
   remark #15389: vectorization support: reference a has unaligned access   [ ttd.cpp(36,5) ]
   remark #15389: vectorization support: reference a has unaligned access   [ ttd.cpp(37,5) ]
   remark #15389: vectorization support: reference a has unaligned access   [ ttd.cpp(38,5) ]
   remark #15389: vectorization support: reference b has unaligned access   [ ttd.cpp(40,5) ]
   remark #15389: vectorization support: reference b has unaligned access   [ ttd.cpp(41,5) ]
   remark #15389: vectorization support: reference b has unaligned access   [ ttd.cpp(42,5) ]
   remark #15389: vectorization support: reference c has unaligned access   [ ttd.cpp(44,5) ]
   remark #15389: vectorization support: reference c has unaligned access   [ ttd.cpp(45,5) ]
   remark #15389: vectorization support: reference c has unaligned access   [ ttd.cpp(46,5) ]
   remark #15389: vectorization support: reference d has unaligned access   [ ttd.cpp(48,5) ]
   remark #15389: vectorization support: reference d has unaligned access   [ ttd.cpp(49,5) ]
   remark #15389: vectorization support: reference d has unaligned access   [ ttd.cpp(50,5) ]
   remark #15389: vectorization support: reference e has unaligned access   [ ttd.cpp(52,5) ]
   remark #15389: vectorization support: reference e has unaligned access   [ ttd.cpp(53,5) ]
   remark #15389: vectorization support: reference e has unaligned access   [ ttd.cpp(54,5) ]
   remark #15388: vectorization support: reference f has aligned access   [ ttd.cpp(56,5) ]
   remark #15388: vectorization support: reference f has aligned access   [ ttd.cpp(57,5) ]
   remark #15388: vectorization support: reference f has aligned access   [ ttd.cpp(58,5) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.068
   remark #15301: SIMD LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 3 
   remark #15451: unmasked unaligned unit stride stores: 15 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 1919 
   remark #15477: vector loop cost: 367.500 
   remark #15478: estimated potential speedup: 5.210 
   remark #15482: vectorized math library calls: 18 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at ttd.cpp(34,3)
<Remainder loop for vectorization>
LOOP END
===========================================================================
