/**

 @mainpage "An efficient, triangle-based discrete element implementation @ Peano"


 <h1>Prepare environment</h1>

 If you haven't done so, you have to download/checkout Peano to some place in
 your system. See www.peano-framework.org for details. Afterwards, please
 change into your git directory applications/peano and do the following steps:

 \code
 ln -s your-peano-path/peano peano
 ln -s your-peano-path/tarch tarch
 ln -s ../../src/delta delta
 \endcode

 Afterward, make should do the job.

 <h1>Regenerate all the generated/glue code</h1>

 Please change into the directory holding peano, tarch, dem, and so forth. Type in

 \code
 java -jar ~/workspace/peano/pdt/pdt.jar --create-project dem dem
 java -jar pdt/pdt.jar --generate-gluecode dem/project.peano-specification dem pdt/usrtemplates
 \endcode

 You do need Peano's pdt (Peano Development Toolkit) to run this operation though.


 <h1>Compiler settings (if you want to write your own makefile)</h1>

 - Compile with -DDim3 at least. -DAsserts is recommended for non-production runs.
 - Set the compile flag -DiREAL=double
 - Set search directory to src, i.e. adopt -I...
 - Change C++ standard to C++11 (in GNU it is -std=c++0x)
 - If you use Eclipse rather than the makefile, you might want to exclude insituvis from your build (see Resource Configuration dialogue)

General
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/opt/intel/tbb/lib/
export TBB_INC=-I/opt/intel/tbb/include/
export TBB_SHLIB="-L/opt/intel/tbb/lib/ -ltbb"
export DYLD_LIBRARY_PATH=$DYLD_LIBRARY_PATH:/opt/intel/compilers_and_libraries/linux/lib/intel64/
export PATH=/opt/intel/bin/:$PATH

Hamilton
module load intel/xe_2015.2
module load intelmpi/intel/2017.2
setenv CC Intel
module load gcc/4.9.1
setenv TBB_INC "-I/opt/intel/tbb/include/"
setenv TBB_SHLIB "-L/ddn/apps/Cluster-Apps/intel/xe_2017.2/tbb/lib/intel64/gcc4.7/ -ltbb"

phi1 - sandy
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/opt/intel/tbb/lib/intel64/gcc4.4/
export TBB_SHLIB="-L/opt/intel/tbb/lib/intel64/gcc4.4/ -ltbb"
export TBB_INC=-I/opt/intel/tbb/include/
export DYLD_LIBRARY_PATH=$DYLD_LIBRARY_PATH:/opt/intel/compilers_and_libraries/linux/lib/intel64/

phi1 - icpc xeon phi KNC
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/opt/intel/composer_xe_2015/lib/mic/:/opt/intel/tbb/lib/mic/
export SINK_LD_LIBRARY_PATH=/opt/intel/composer_xe_2015/lib/mic/:/opt/intel/tbb/lib/mic
export PATH=$PATH:/opt/intel/bin:/opt/intel/impi/5.1.1.109/bin64
export TBB_INC=-I/opt/intel/tbb/include/
export TBB_SHLIB="-L/opt/intel/tbb/lib/mic -ltbb"

phi 1 - g++ xeonphi KNC
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/opt/intel/composer_xe_2015/lib/mic/:/opt/intel/tbb/lib/mic/
export PATH=$PATH:/opt/intel/bin:/opt/intel/impi/5.1.1.109/bin64
export TBB_INC=-I/opt/intel/tbb/include/
export TBB_SHLIB="-L/opt/intel/tbb/lib/intel64/gcc4.4/ -ltbb"

/opt/intel/mic/bin/micnativeloadex ./dem-3d-release-vec -a "0.5 0.5 0.5 random-velocities 50 regular-grid 0.001 never 0 bf"
nohup /opt/intel/vtune_amplifier_xe_2016/bin64/amplxe-cl -r xperiment -collect hotspots -no-auto-finalize -- ./dem-3d-release-novec > lol.log &

Mac - ivy bridge
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/opt/intel/tbb/lib/
export TBB_INC=-I/opt/intel/tbb/include/
export TBB_SHLIB="-L/opt/intel/tbb/lib/ -ltbb"
export DYLD_LIBRARY_PATH=$DYLD_LIBRARY_PATH:/opt/intel/compilers_and_libraries_2017.1.126/mac/tbb/lib/

Desktop - Durham
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/opt/intel/tbb/lib/intel64/gcc4.7/
export TBB_INC=-I/opt/intel/tbb/include/
export TBB_SHLIB="-L/opt/intel/tbb/lib/intel64/gcc4.7/ -ltbb"
export DYLD_LIBRARY_PATH=$DYLD_LIBRARY_PATH:/opt/intel/compilers_and_libraries/linux/lib/intel64/
export PATH=/opt/intel/bin/:$PATH
*/
