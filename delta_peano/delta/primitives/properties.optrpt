Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C++ Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 17.0.0.098 Build 20160721

Compiler options: -I. --std=c++11 -DDim3 -DiREAL=double -DbyteAlignment=32 -DTrackGridStatistics -fast -qopt-report=5 -fstrict-aliasing -restrict -fno-rtti -no-ipo -ip -xHost -c -o delta/primitives/properties.o

    Report from: Interprocedural optimizations [ipo]

  WHOLE PROGRAM (SAFE) [EITHER METHOD]: false
  WHOLE PROGRAM (SEEN) [TABLE METHOD]: false
  WHOLE PROGRAM (READ) [OBJECT READER METHOD]: false

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: disabled
  -inline-max-per-compile: disabled

In the inlining report below:
   "sz" refers to the "size" of the routine. The smaller a routine's size,
      the more likely it is to be inlined.
   "isz" refers to the "inlined size" of the routine. This is the amount
      the calling routine will grow if the called routine is inlined into it.
      The compiler generally limits the amount a routine can grow by having
      routines inlined into it.

Begin optimization report for: std::vector<double, std::allocator<double>>::size(const std::vector<double, std::allocator<double>> *) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (std::vector<double, std::allocator<double>>::size(const std::vector<double, std::allocator<double>> *) const) /usr/include/c++/6/bits/stl_vector.h(656,7)

===========================================================================

Begin optimization report for: std::vector<double, std::allocator<double>>::operator[](std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (std::vector<double, std::allocator<double>>::operator[](std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)) /usr/include/c++/6/bits/stl_vector.h(781,7)

===========================================================================

Begin optimization report for: std::vector<double, std::allocator<double>>::operator[](const std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (std::vector<double, std::allocator<double>>::operator[](const std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type) const) /usr/include/c++/6/bits/stl_vector.h(796,7)

===========================================================================

Begin optimization report for: std::min<double>(const double &, const double &)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (std::min<double>(const double &, const double &)) /usr/include/c++/6/bits/stl_algobase.h(196,5)

===========================================================================

Begin optimization report for: delta::primitives::centerOfMass(const std::vector<double, std::allocator<double>> &, const std::vector<double, std::allocator<double>> &, double &, double &, double &)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (delta::primitives::centerOfMass(const std::vector<double, std::allocator<double>> &, const std::vector<double, std::allocator<double>> &, double &, double &, double &)) [5/7=71.4%] delta/primitives/properties.cpp(10,3)
  -> INLINE (MANUAL): (15,32) std::vector<double, std::allocator<double>>::size(const std::vector<double, std::allocator<double>> *) const (isz = 5) (sz = 12)
  -> INLINE (MANUAL): (18,34) std::vector<double, std::allocator<double>>::operator[](const std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type) const (isz = 1) (sz = 10)
  -> INLINE (MANUAL): (19,34) std::vector<double, std::allocator<double>>::operator[](const std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type) const (isz = 1) (sz = 10)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at delta/primitives/properties.cpp(16,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between *centreOfMassX (18:5) and *centreOfMassY (19:5)
   remark #15346: vector dependence: assumed OUTPUT dependence between *centreOfMassY (19:5) and *centreOfMassX (18:5)
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at delta/primitives/properties.cpp(16,3)
<Remainder>
LOOP END

    Report from: Code generation optimizations [cg]

delta/primitives/properties.cpp(10,3):remark #34051: REGISTER ALLOCATION : [_ZN5delta10primitives12centerOfMassERKSt6vectorIdSaIdEES5_RdS6_S6_] delta/primitives/properties.cpp:10

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   13[ rax rdx rcx rsi rdi r8-r10 zmm0-zmm4]
        
    Routine temporaries
        Total         :      52
            Global    :      16
            Local     :      36
        Regenerable   :       2
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: delta::primitives::centerOfMass(std::vector<double, std::allocator<double>> &, std::vector<double, std::allocator<double>> &, std::vector<double, std::allocator<double>> &, double &, double &, double &, double &, double &, double &)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (delta::primitives::centerOfMass(std::vector<double, std::allocator<double>> &, std::vector<double, std::allocator<double>> &, std::vector<double, std::allocator<double>> &, double &, double &, double &, double &, double &, double &)) [6/7=85.7%] delta/primitives/properties.cpp(35,3)
  -> INLINE (MANUAL): (41,32) std::vector<double, std::allocator<double>>::size(const std::vector<double, std::allocator<double>> *) const (isz = 5) (sz = 12)
  -> INLINE (MANUAL): (45,34) std::vector<double, std::allocator<double>>::operator[](std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type) (isz = 1) (sz = 10)
  -> INLINE (MANUAL): (46,34) std::vector<double, std::allocator<double>>::operator[](std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type) (isz = 1) (sz = 10)
  -> INLINE (MANUAL): (47,34) std::vector<double, std::allocator<double>>::operator[](std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type) (isz = 1) (sz = 10)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at delta/primitives/properties.cpp(43,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between *centreOfMassX (45:5) and *centreOfMassZ (47:5)
   remark #15346: vector dependence: assumed OUTPUT dependence between *centreOfMassZ (47:5) and *centreOfMassX (45:5)
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at delta/primitives/properties.cpp(43,3)
<Remainder>
LOOP END

    Report from: Code generation optimizations [cg]

delta/primitives/properties.cpp(35,3):remark #34051: REGISTER ALLOCATION : [_ZN5delta10primitives12centerOfMassERSt6vectorIdSaIdEES4_S4_RdS5_S5_S5_S5_S5_] delta/primitives/properties.cpp:35

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   16[ rax rdx rcx rbp rsi rdi r8-r11 zmm0-zmm5]
        
    Routine temporaries
        Total         :      69
            Global    :      18
            Local     :      51
        Regenerable   :       5
        Spilled       :       1
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: delta::primitives::computeHMin(const std::vector<double, std::allocator<double>> &, const std::vector<double, std::allocator<double>> &, const std::vector<double, std::allocator<double>> &)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (delta::primitives::computeHMin(const std::vector<double, std::allocator<double>> &, const std::vector<double, std::allocator<double>> &, const std::vector<double, std::allocator<double>> &)) [7/7=100.0%] delta/primitives/properties.cpp(64,1)
  -> INLINE (MANUAL): (67,33) std::vector<double, std::allocator<double>>::size(const std::vector<double, std::allocator<double>> *) const (isz = 5) (sz = 12)
  -> INLINE (MANUAL): (67,33) std::vector<double, std::allocator<double>>::size(const std::vector<double, std::allocator<double>> *) const (isz = 5) (sz = 12)
  -> INLINE (MANUAL): (70,21) std::vector<double, std::allocator<double>>::operator[](const std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type) const (isz = 1) (sz = 10)
  -> INLINE (MANUAL): (71,21) std::vector<double, std::allocator<double>>::operator[](const std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type) const (isz = 1) (sz = 10)
  -> INLINE (MANUAL): (72,21) std::vector<double, std::allocator<double>>::operator[](const std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type) const (isz = 1) (sz = 10)
  -> INLINE (MANUAL): (74,21) std::vector<double, std::allocator<double>>::operator[](const std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type) const (isz = 1) (sz = 10)
  -> INLINE (MANUAL): (75,21) std::vector<double, std::allocator<double>>::operator[](const std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type) const (isz = 1) (sz = 10)
  -> INLINE (MANUAL): (76,21) std::vector<double, std::allocator<double>>::operator[](const std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type) const (isz = 1) (sz = 10)
  -> INLINE (MANUAL): (78,21) std::vector<double, std::allocator<double>>::operator[](const std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type) const (isz = 1) (sz = 10)
  -> INLINE (MANUAL): (79,21) std::vector<double, std::allocator<double>>::operator[](const std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type) const (isz = 1) (sz = 10)
  -> INLINE (MANUAL): (80,21) std::vector<double, std::allocator<double>>::operator[](const std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type) const (isz = 1) (sz = 10)
  -> INLINE (MANUAL): (86,6) std::min<double>(const double &, const double &) (isz = 2) (sz = 12)
  -> INLINE (MANUAL): (86,15) std::min<double>(const double &, const double &) (isz = 2) (sz = 12)
  -> INLINE (MANUAL): (88,9) std::min<double>(const double &, const double &) (isz = 2) (sz = 12)
  -> INLINE (MANUAL): (88,18) std::min<double>(const double &, const double &) (isz = 2) (sz = 12)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at delta/primitives/properties.cpp(67,33)
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <xCoordinates->_M_start[i]>, stride is 3   [ delta/primitives/properties.cpp(70,21) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <yCoordinates->_M_start[i]>, stride is 3   [ delta/primitives/properties.cpp(71,21) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <zCoordinates->_M_start[i]>, stride is 3   [ delta/primitives/properties.cpp(72,21) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <xCoordinates->_M_start[i+1]>, stride is 3   [ delta/primitives/properties.cpp(74,21) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <yCoordinates->_M_start[i+1]>, stride is 3   [ delta/primitives/properties.cpp(75,21) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <zCoordinates->_M_start[i+1]>, stride is 3   [ delta/primitives/properties.cpp(76,21) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <xCoordinates->_M_start[i+2]>, stride is 3   [ delta/primitives/properties.cpp(78,21) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <yCoordinates->_M_start[i+2]>, stride is 3   [ delta/primitives/properties.cpp(79,21) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <zCoordinates->_M_start[i+2]>, stride is 3   [ delta/primitives/properties.cpp(80,21) ]
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.247
   remark #15300: LOOP WAS VECTORIZED
   remark #15452: unmasked strided loads: 9 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 255 
   remark #15477: vector cost: 111.500 
   remark #15478: estimated potential speedup: 2.280 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at delta/primitives/properties.cpp(67,33)
<Remainder loop for vectorization>
LOOP END

    Report from: Code generation optimizations [cg]

delta/primitives/properties.cpp(70,21):remark #34069: optimization of adjacent sparse (strided) loads seems unprofitable. Details: stride { 24 }, types { F64-V128, F64-V128 }, number of elements { 2 }, select mask { 0x000000003 }.
delta/primitives/properties.cpp(71,21):remark #34069: optimization of adjacent sparse (strided) loads seems unprofitable. Details: stride { 24 }, types { F64-V128, F64-V128 }, number of elements { 2 }, select mask { 0x000000003 }.
delta/primitives/properties.cpp(72,21):remark #34069: optimization of adjacent sparse (strided) loads seems unprofitable. Details: stride { 24 }, types { F64-V128, F64-V128 }, number of elements { 2 }, select mask { 0x000000003 }.
delta/primitives/properties.cpp(64,1):remark #34051: REGISTER ALLOCATION : [_ZN5delta10primitives11computeHMinERKSt6vectorIdSaIdEES5_S5_] delta/primitives/properties.cpp:64

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   26[ rax rdx rcx rsi rdi r8-r11 r13 zmm0-zmm15]
        
    Routine temporaries
        Total         :     130
            Global    :      24
            Local     :     106
        Regenerable   :       4
        Spilled       :       1
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================
