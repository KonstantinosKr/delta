Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.


    Report from: Interprocedural optimizations [ipo]

  WHOLE PROGRAM (SAFE) [EITHER METHOD]: false
  WHOLE PROGRAM (SEEN) [TABLE METHOD]: false
  WHOLE PROGRAM (READ) [OBJECT READER METHOD]: false

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: disabled
  -inline-max-per-compile: disabled

In the inlining report below:
   "sz" refers to the "size" of the routine. The smaller a routine's size,
      the more likely it is to be inlined.
   "isz" refers to the "inlined size" of the routine. This is the amount
      the calling routine will grow if the called routine is inlined into it.
      The compiler generally limits the amount a routine can grow by having
      routines inlined into it.

Begin optimization report for: delta::hull::MEM_CALLOC(size_t)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (delta::hull::MEM_CALLOC(size_t)) [1/6=16.7%] delta/hull/mem.cpp(37,1)
  -> EXTERN: (40,17) malloc(size_t)
  -> EXTERN: (42,3) memset(void *, int, size_t)


    Report from: Code generation optimizations [cg]

delta/hull/mem.cpp(42,3):remark #34014: optimization advice for _memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
delta/hull/mem.cpp(42,3):remark #34026: call to _memset implemented as a call to optimized library version
===========================================================================

Begin optimization report for: delta::hull::MEM_Alloc(delta::hull::MEM *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (delta::hull::MEM_Alloc(delta::hull::MEM *)) [2/6=33.3%] delta/hull/mem.cpp(60,1)
  -> EXTERN: (78,5) memset(void *, int, size_t)
  -> EXTERN: (85,13) malloc(size_t)
  -> EXTERN: (87,5) memset(void *, int, size_t)


    Report from: Code generation optimizations [cg]

delta/hull/mem.cpp(78,5):remark #34014: optimization advice for _memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
delta/hull/mem.cpp(78,5):remark #34026: call to _memset implemented as a call to optimized library version
delta/hull/mem.cpp(87,5):remark #34014: optimization advice for _memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
delta/hull/mem.cpp(87,5):remark #34026: call to _memset implemented as a call to optimized library version
===========================================================================

Begin optimization report for: delta::hull::MEM_Free(delta::hull::MEM *, void *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (delta::hull::MEM_Free(delta::hull::MEM *, void *)) [3/6=50.0%] delta/hull/mem.cpp(104,1)

===========================================================================

Begin optimization report for: delta::hull::MEM_Size(delta::hull::MEM *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (delta::hull::MEM_Size(delta::hull::MEM *)) [4/6=66.7%] delta/hull/mem.cpp(122,1)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at delta/hull/mem.cpp(132,3)
   remark #15523: loop was not vectorized: loop control variable size was found, but loop iteration count cannot be computed before executing the loop
   remark #25478: While Loop Unrolled by 2  
LOOP END
===========================================================================

Begin optimization report for: delta::hull::MEM_Release(delta::hull::MEM *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (delta::hull::MEM_Release(delta::hull::MEM *)) [5/6=83.3%] delta/hull/mem.cpp(143,1)
  -> EXTERN: (156,5) free(void *)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at delta/hull/mem.cpp(153,3)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form
LOOP END

LOOP BEGIN at delta/hull/mem.cpp(161,3)
   remark #15389: vectorization support: reference pool has unaligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15427: loop was completely unrolled
   remark #15309: vectorization support: normalized vectorization overhead 0.600
   remark #15301: MATERIALIZED LOOP WAS VECTORIZED
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 3 
   remark #15477: vector loop cost: 1.250 
   remark #15478: estimated potential speedup: 1.500 
   remark #15488: --- end vector loop cost summary ---
LOOP END
===========================================================================

Begin optimization report for: delta::hull::MEM_Init(delta::hull::MEM *, size_t, size_t)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (delta::hull::MEM_Init(delta::hull::MEM *, size_t, size_t)) [6/6=100.0%] delta/hull/mem.cpp(48,1)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at delta/hull/mem.cpp(53,3)
   remark #15389: vectorization support: reference pool has unaligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15427: loop was completely unrolled
   remark #15309: vectorization support: normalized vectorization overhead 0.600
   remark #15301: MATERIALIZED LOOP WAS VECTORIZED
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 3 
   remark #15477: vector loop cost: 1.250 
   remark #15478: estimated potential speedup: 1.500 
   remark #15488: --- end vector loop cost summary ---
LOOP END
===========================================================================
