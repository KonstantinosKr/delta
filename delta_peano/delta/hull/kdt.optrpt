Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C++ Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 17.0.0.098 Build 20160721

Compiler options: -I. --std=c++11 -DDim3 -DiREAL=double -DbyteAlignment=32 -DTrackGridStatistics -fast -qopt-report=5 -fstrict-aliasing -restrict -fno-rtti -no-ipo -ip -xHost -c -o delta/hull/kdt.o

    Report from: Interprocedural optimizations [ipo]

  WHOLE PROGRAM (SAFE) [EITHER METHOD]: false
  WHOLE PROGRAM (SEEN) [TABLE METHOD]: false
  WHOLE PROGRAM (READ) [OBJECT READER METHOD]: false

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: disabled
  -inline-max-per-compile: disabled

In the inlining report below:
   "sz" refers to the "size" of the routine. The smaller a routine's size,
      the more likely it is to be inlined.
   "isz" refers to the "inlined size" of the routine. This is the amount
      the calling routine will grow if the called routine is inlined into it.
      The compiler generally limits the amount a routine can grow by having
      routines inlined into it.

Begin optimization report for: delta::hull::compare0(double **, double **)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (delta::hull::compare0(double **, double **)) [1/17=5.9%] delta/hull/kdt.cpp(35,1)


    Report from: Code generation optimizations [cg]

delta/hull/kdt.cpp(35,1):remark #34051: REGISTER ALLOCATION : [_ZN40_INTERNAL_18_delta_hull_kdt_cpp_de7541245delta4hull8compare0EPPdS3_] delta/hull/kdt.cpp:35

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    6[ rax rdx rsi rdi zmm0-zmm1]
        
    Routine temporaries
        Total         :      20
            Global    :       8
            Local     :      12
        Regenerable   :       1
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: delta::hull::compare1(double **, double **)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (delta::hull::compare1(double **, double **)) [2/17=11.8%] delta/hull/kdt.cpp(42,1)


    Report from: Code generation optimizations [cg]

delta/hull/kdt.cpp(42,1):remark #34051: REGISTER ALLOCATION : [_ZN40_INTERNAL_18_delta_hull_kdt_cpp_de7541245delta4hull8compare1EPPdS3_] delta/hull/kdt.cpp:42

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    6[ rax rdx rsi rdi zmm0-zmm1]
        
    Routine temporaries
        Total         :      20
            Global    :       8
            Local     :      12
        Regenerable   :       1
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: delta::hull::compare2(double **, double **)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (delta::hull::compare2(double **, double **)) [3/17=17.6%] delta/hull/kdt.cpp(49,1)


    Report from: Code generation optimizations [cg]

delta/hull/kdt.cpp(49,1):remark #34051: REGISTER ALLOCATION : [_ZN40_INTERNAL_18_delta_hull_kdt_cpp_de7541245delta4hull8compare2EPPdS3_] delta/hull/kdt.cpp:49

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    6[ rax rdx rsi rdi zmm0-zmm1]
        
    Routine temporaries
        Total         :      20
            Global    :       8
            Local     :      12
        Regenerable   :       1
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: delta::hull::overlap(void *, delta::hull::BOX *, delta::hull::BOX *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (delta::hull::overlap(void *, delta::hull::BOX *, delta::hull::BOX *)) [4/17=23.5%] delta/hull/kdt.cpp(61,1)
  -> EXTERN: (62,3) delta::hull::SET_Insert(delta::hull::MEM *, delta::hull::SET **, void *, delta::hull::SET_Compare)
  -> EXTERN: (63,3) delta::hull::SET_Insert(delta::hull::MEM *, delta::hull::SET **, void *, delta::hull::SET_Compare)


    Report from: Code generation optimizations [cg]

delta/hull/kdt.cpp(61,1):remark #34051: REGISTER ALLOCATION : [_ZN40_INTERNAL_18_delta_hull_kdt_cpp_de7541245delta4hull7overlapEPvPNS1_3boxES4_] delta/hull/kdt.cpp:61

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    6[ rdx rcx rsi rdi r13-r14]
        
    Routine temporaries
        Total         :      21
            Global    :       8
            Local     :      13
        Regenerable   :       4
        Spilled       :       2
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: delta::hull::separate(int, double **, double)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (delta::hull::separate(int, double **, double)) delta/hull/kdt.cpp(68,1)

===========================================================================

Begin optimization report for: delta::hull::KDT_Create(int, double *, double)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (delta::hull::KDT_Create(int, double *, double)) [6/17=35.3%] delta/hull/kdt.cpp(236,1)
  -> EXTERN: (241,18) malloc(size_t)
  -> INLINE: (243,7) delta::hull::separate(int, double **, double) (isz = 173) (sz = 185)
    -> EXTERN: (78,15) malloc(size_t)
    -> EXTERN: (79,16) malloc(size_t)
    -> EXTERN: (97,3) delta::hull::hybrid(delta::hull::BOX **, int, void *, delta::hull::BOX_Overlap_Create)
    -> EXTERN: (106,19) delta::hull::SET_First(delta::hull::SET *)
    -> EXTERN: (106,59) delta::hull::SET_Next(delta::hull::SET *)
    -> EXTERN: (116,5) delta::hull::SET_Free(delta::hull::MEM *, delta::hull::SET **)
    -> EXTERN: (119,3) free(void *)
    -> EXTERN: (120,3) free(void *)
  -> INLINE: (244,8) delta::hull::create(delta::hull::KDT *, int, double **) (isz = 55) (sz = 67)
    -> EXTERN: (196,15) delta::hull::MEM_CALLOC(size_t)
    -> (205,7) delta::hull::split(int, double **, double *, int *) (isz = 240) (sz = 254)
       [[ Inlining would exceed -inline-max-size value (254>253) <1>]]
    -> (209,13) delta::hull::create(delta::hull::KDT *, int, double **) (isz = 55) (sz = 67)
       [[ Callee not marked with inlining pragma  <2>]]
    -> (210,13) delta::hull::create(delta::hull::KDT *, int, double **) (isz = 55) (sz = 67)
       [[ Callee not marked with inlining pragma  <2>]]
    -> (214,13) delta::hull::create(delta::hull::KDT *, int, double **) (isz = 55) (sz = 67)
       [[ Callee not marked with inlining pragma  <2>]]
    -> (215,13) delta::hull::create(delta::hull::KDT *, int, double **) (isz = 55) (sz = 67)
       [[ Callee not marked with inlining pragma  <2>]]
  -> EXTERN: (245,3) free(void *)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at delta/hull/kdt.cpp(242,3)
<Peeled loop for vectorization>
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at delta/hull/kdt.cpp(242,3)
   remark #15388: vectorization support: reference q[i] has aligned access   [ delta/hull/kdt.cpp(242,28) ]
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.406
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 5 
   remark #15477: vector cost: 4.000 
   remark #15478: estimated potential speedup: 1.230 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at delta/hull/kdt.cpp(242,3)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at delta/hull/kdt.cpp(81,3) inlined into delta/hull/kdt.cpp(243,7)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between g->extents (83:17) and pb[i] (94:5)
   remark #15346: vector dependence: assumed FLOW dependence between pb[i] (94:5) and g->extents (83:17)
LOOP END

LOOP BEGIN at delta/hull/kdt.cpp(99,3) inlined into delta/hull/kdt.cpp(243,7)
   remark #15382: vectorization support: call to function delta::hull::SET_First(delta::hull::SET *) cannot be vectorized   [ delta/hull/kdt.cpp(106,19) ]
   remark #15382: vectorization support: call to function delta::hull::SET_Next(delta::hull::SET *) cannot be vectorized   [ delta/hull/kdt.cpp(106,59) ]
   remark #15382: vectorization support: call to function delta::hull::SET_Free(delta::hull::MEM *, delta::hull::SET **) cannot be vectorized   [ delta/hull/kdt.cpp(116,5) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between q[m] (104:7) and g->body (116:5)
   remark #15346: vector dependence: assumed OUTPUT dependence between g->body (116:5) and q[m] (104:7)

   LOOP BEGIN at delta/hull/kdt.cpp(106,7) inlined into delta/hull/kdt.cpp(243,7)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

delta/hull/kdt.cpp(236,1):remark #34051: REGISTER ALLOCATION : [_ZN5delta4hull10KDT_CreateEiPdd] delta/hull/kdt.cpp:236

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   20[ rax rdx rcx rbx rbp rsi rdi r8-r9 r12-r15 zmm0-zmm6]
        
    Routine temporaries
        Total         :     159
            Global    :      56
            Local     :     103
        Regenerable   :      14
        Spilled       :      12
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      48 bytes*
            Reads     :       8 [3.13e+00 ~ 0.8%]
            Writes    :       7 [2.75e+00 ~ 0.7%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: delta::hull::create(delta::hull::KDT *, int, double **)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (delta::hull::create(delta::hull::KDT *, int, double **)) [7/17=41.2%] delta/hull/kdt.cpp(192,1)
  -> EXTERN: (196,15) delta::hull::MEM_CALLOC(size_t)
  -> (205,7) delta::hull::split(int, double **, double *, int *) (isz = 240) (sz = 254)
     [[ Inlining would exceed -inline-max-size value (254>230) <1>]]
  -> (209,13) delta::hull::create(delta::hull::KDT *, int, double **) (isz = 55) (sz = 67)
     [[ Callee not marked with inlining pragma  <2>]]
  -> (210,13) delta::hull::create(delta::hull::KDT *, int, double **) (isz = 55) (sz = 67)
     [[ Callee not marked with inlining pragma  <2>]]
  -> (214,13) delta::hull::create(delta::hull::KDT *, int, double **) (isz = 55) (sz = 67)
     [[ Callee not marked with inlining pragma  <2>]]
  -> (215,13) delta::hull::create(delta::hull::KDT *, int, double **) (isz = 55) (sz = 67)
     [[ Callee not marked with inlining pragma  <2>]]


    Report from: Code generation optimizations [cg]

delta/hull/kdt.cpp(192,1):remark #34051: REGISTER ALLOCATION : [_ZN40_INTERNAL_18_delta_hull_kdt_cpp_de7541245delta4hull6createEPNS1_3kdtEiPPd] delta/hull/kdt.cpp:192

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    9[ rax rdx rcx rsi rdi r12-r15]
        
    Routine temporaries
        Total         :      48
            Global    :      21
            Local     :      27
        Regenerable   :       5
        Spilled       :       4
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: delta::hull::split(int, double **, double *, int *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (delta::hull::split(int, double **, double *, int *)) [8/17=47.1%] delta/hull/kdt.cpp(127,1)
  -> EXTERN: (155,3) qsort(void *, size_t, size_t, __compar_fn_t)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at delta/hull/kdt.cpp(132,3)
<Peeled loop for vectorization>
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at delta/hull/kdt.cpp(132,3)
   remark #15388: vectorization support: reference *x has aligned access   [ delta/hull/kdt.cpp(134,9) ]
   remark #15328: vectorization support: indirect load was emulated for the variable <*norm_alias_2F64>, 64-bit indexed, part of address is read from memory   [ delta/hull/kdt.cpp(134,9) ]
   remark #15328: vectorization support: indirect load was emulated for the variable <*(norm_alias_2F64+8)>, 64-bit indexed, part of address is read from memory   [ delta/hull/kdt.cpp(135,9) ]
   remark #15328: vectorization support: indirect load was emulated for the variable <*(norm_alias_2F64+16)>, 64-bit indexed, part of address is read from memory   [ delta/hull/kdt.cpp(136,9) ]
   remark #15328: vectorization support: indirect load was emulated for the variable <*(norm_alias_2F64+8)>, 64-bit indexed, part of address is read from memory   [ delta/hull/kdt.cpp(138,9) ]
   remark #15328: vectorization support: indirect load was emulated for the variable <*(norm_alias_2F64+16)>, 64-bit indexed, part of address is read from memory   [ delta/hull/kdt.cpp(139,9) ]
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 1.826
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15462: unmasked indexed (or gather) loads: 5 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 57 
   remark #15477: vector cost: 34.500 
   remark #15478: estimated potential speedup: 1.620 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at delta/hull/kdt.cpp(132,3)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at delta/hull/kdt.cpp(150,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between i (151:21) and i (151:18)
   remark #15346: vector dependence: assumed ANTI dependence between i (151:18) and i (151:21)
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at delta/hull/kdt.cpp(152,3)
   remark #15522: loop was not vectorized: loop control flow is too complex. Try using canonical loop form from OpenMP specification

   LOOP BEGIN at delta/hull/kdt.cpp(157,3)
      remark #15520: loop was not vectorized: loop with multiple exits cannot be vectorized unless it meets search loop idiom criteria   [ delta/hull/kdt.cpp(163,2) ]
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

delta/hull/kdt.cpp(134,9):remark #34072: optimization of adjacent sparse (indexed) loads seems unprofitable. Details: types { F64-V128, F64-V128 }, number of elements { 2 }, select mask { 0x000000003 }.
delta/hull/kdt.cpp(127,1):remark #34051: REGISTER ALLOCATION : [_ZN40_INTERNAL_18_delta_hull_kdt_cpp_de7541245delta4hull5splitEiPPdS2_Pi] delta/hull/kdt.cpp:127

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   31[ rax rdx rcx rbx rbp rsi rdi r8-r15 zmm0-zmm15]
        
    Routine temporaries
        Total         :     117
            Global    :      42
            Local     :      75
        Regenerable   :       5
        Spilled       :       7
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       1 [6.67e-01 ~ 0.1%]
            Writes    :       4 [2.02e+00 ~ 0.3%]
        Spills        :       8 bytes*
            Reads     :       6 [1.28e+00 ~ 0.2%]
            Writes    :       1 [1.00e+00 ~ 0.1%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: delta::hull::KDT_Drop(delta::hull::KDT *, double *, void *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (delta::hull::KDT_Drop(delta::hull::KDT *, double *, void *)) [9/17=52.9%] delta/hull/kdt.cpp(252,1)
  -> EXTERN: (256,25) realloc(void *, size_t)
  -> (259,48) delta::hull::KDT_Drop(delta::hull::KDT *, double *, void *) (isz = 59) (sz = 68)
     [[ Callee not marked with inlining pragma  <2>]]
  -> (260,45) delta::hull::KDT_Drop(delta::hull::KDT *, double *, void *) (isz = 59) (sz = 68)
     [[ Callee not marked with inlining pragma  <2>]]
  -> (263,5) delta::hull::KDT_Drop(delta::hull::KDT *, double *, void *) (isz = 59) (sz = 68)
     [[ Callee not marked with inlining pragma  <2>]]
  -> (264,5) delta::hull::KDT_Drop(delta::hull::KDT *, double *, void *) (isz = 59) (sz = 68)
     [[ Callee not marked with inlining pragma  <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at delta/hull/kdt.cpp(252,1)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

    Report from: Code generation optimizations [cg]

delta/hull/kdt.cpp(252,1):remark #34051: REGISTER ALLOCATION : [_ZN5delta4hull8KDT_DropEPNS0_3kdtEPdPv] delta/hull/kdt.cpp:252

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   10[ rax rdx rcx rsi rdi r12-r14 zmm0-zmm1]
        
    Routine temporaries
        Total         :      29
            Global    :      13
            Local     :      16
        Regenerable   :       0
        Spilled       :       3
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: delta::hull::KDT_Pick(delta::hull::KDT *, double *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (delta::hull::KDT_Pick(delta::hull::KDT *, double *)) [10/17=58.8%] delta/hull/kdt.cpp(270,1)
  -> (272,47) delta::hull::KDT_Pick(delta::hull::KDT *, double *) (isz = 21) (sz = 32)
     [[ Callee not marked with inlining pragma  <2>]]
  -> (273,15) delta::hull::KDT_Pick(delta::hull::KDT *, double *) (isz = 21) (sz = 32)
     [[ Callee not marked with inlining pragma  <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at delta/hull/kdt.cpp(270,1)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

    Report from: Code generation optimizations [cg]

delta/hull/kdt.cpp(270,1):remark #34051: REGISTER ALLOCATION : [_ZN5delta4hull8KDT_PickEPNS0_3kdtEPd] delta/hull/kdt.cpp:270

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    6[ rax rdx rcx rsi rdi zmm0]
        
    Routine temporaries
        Total         :      15
            Global    :       9
            Local     :       6
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: delta::hull::KDT_Pick_Extents(delta::hull::KDT *, double *, delta::hull::SET **)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (delta::hull::KDT_Pick_Extents(delta::hull::KDT *, double *, delta::hull::SET **)) [11/17=64.7%] delta/hull/kdt.cpp(278,1)
  -> EXTERN: (281,5) delta::hull::SET_Insert(delta::hull::MEM *, delta::hull::SET **, void *, delta::hull::SET_Compare)
  -> (283,48) delta::hull::KDT_Pick_Extents(delta::hull::KDT *, double *, delta::hull::SET **) (isz = 44) (sz = 53)
     [[ Callee not marked with inlining pragma  <2>]]
  -> (284,45) delta::hull::KDT_Pick_Extents(delta::hull::KDT *, double *, delta::hull::SET **) (isz = 44) (sz = 53)
     [[ Callee not marked with inlining pragma  <2>]]
  -> (287,5) delta::hull::KDT_Pick_Extents(delta::hull::KDT *, double *, delta::hull::SET **) (isz = 44) (sz = 53)
     [[ Callee not marked with inlining pragma  <2>]]
  -> (288,5) delta::hull::KDT_Pick_Extents(delta::hull::KDT *, double *, delta::hull::SET **) (isz = 44) (sz = 53)
     [[ Callee not marked with inlining pragma  <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at delta/hull/kdt.cpp(278,1)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

    Report from: Code generation optimizations [cg]

delta/hull/kdt.cpp(278,1):remark #34051: REGISTER ALLOCATION : [_ZN5delta4hull16KDT_Pick_ExtentsEPNS0_3kdtEPdPPNS0_3setE] delta/hull/kdt.cpp:278

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   10[ rax rdx rcx rsi rdi r12-r14 zmm0-zmm1]
        
    Routine temporaries
        Total         :      23
            Global    :      11
            Local     :      12
        Regenerable   :       2
        Spilled       :       3
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: delta::hull::KDT_Nearest(delta::hull::KDT *, double *, double)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (delta::hull::KDT_Nearest(delta::hull::KDT *, double *, double)) [12/17=70.6%] delta/hull/kdt.cpp(294,1)
  -> (311,11) delta::hull::KDT_Nearest(delta::hull::KDT *, double *, double) (isz = 160) (sz = 171)
     [[ Callee not marked with inlining pragma  <2>]]
  -> (320,11) delta::hull::KDT_Nearest(delta::hull::KDT *, double *, double) (isz = 160) (sz = 171)
     [[ Callee not marked with inlining pragma  <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at delta/hull/kdt.cpp(301,3)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

    Report from: Code generation optimizations [cg]

delta/hull/kdt.cpp(294,1):remark #34051: REGISTER ALLOCATION : [_ZN5delta4hull11KDT_NearestEPNS0_3kdtEPdd] delta/hull/kdt.cpp:294

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   18[ rax rdx rbx rsi rdi r14-r15 zmm0-zmm10]
        
    Routine temporaries
        Total         :      61
            Global    :      21
            Local     :      40
        Regenerable   :       0
        Spilled       :       8
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      40 bytes*
            Reads     :       9 [3.36e+00 ~ 2.2%]
            Writes    :       9 [3.36e+00 ~ 2.2%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: delta::hull::KDT_Size(delta::hull::KDT *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (delta::hull::KDT_Size(delta::hull::KDT *)) [13/17=76.5%] delta/hull/kdt.cpp(339,1)
  -> INLINE: (341,3) delta::hull::index_nodes(delta::hull::KDT *, int *) (isz = 15) (sz = 22)
    -> (228,5) delta::hull::index_nodes(delta::hull::KDT *, int *) (isz = 15) (sz = 22)
       [[ Callee not marked with inlining pragma  <2>]]
    -> (229,5) delta::hull::index_nodes(delta::hull::KDT *, int *) (isz = 15) (sz = 22)
       [[ Callee not marked with inlining pragma  <2>]]


    Report from: Code generation optimizations [cg]

delta/hull/kdt.cpp(339,1):remark #34051: REGISTER ALLOCATION : [_ZN5delta4hull8KDT_SizeEPNS0_3kdtE] delta/hull/kdt.cpp:339

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    4[ rax rbp rsi rdi]
        
    Routine temporaries
        Total         :      17
            Global    :       9
            Local     :       8
        Regenerable   :       3
        Spilled       :       1
        
    Routine stack
        Variables     :       4 bytes*
            Reads     :       1 [9.75e-01 ~ 3.6%]
            Writes    :       1 [9.75e-01 ~ 3.6%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: delta::hull::index_nodes(delta::hull::KDT *, int *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (delta::hull::index_nodes(delta::hull::KDT *, int *)) [14/17=82.4%] delta/hull/kdt.cpp(223,1)
  -> (228,5) delta::hull::index_nodes(delta::hull::KDT *, int *) (isz = 15) (sz = 22)
     [[ Callee not marked with inlining pragma  <2>]]
  -> (229,5) delta::hull::index_nodes(delta::hull::KDT *, int *) (isz = 15) (sz = 22)
     [[ Callee not marked with inlining pragma  <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at delta/hull/kdt.cpp(224,3)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

    Report from: Code generation optimizations [cg]

delta/hull/kdt.cpp(223,1):remark #34051: REGISTER ALLOCATION : [_ZN40_INTERNAL_18_delta_hull_kdt_cpp_de7541245delta4hull11index_nodesEPNS1_3kdtEPi] delta/hull/kdt.cpp:223

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    5[ rax rsi rdi r12-r13]
        
    Routine temporaries
        Total         :      15
            Global    :       8
            Local     :       7
        Regenerable   :       0
        Spilled       :       2
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      16 bytes*
            Reads     :       2 [0.00e+00 ~ 0.0%]
            Writes    :       2 [7.70e+01 ~ 8.2%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: delta::hull::KDT_First(delta::hull::KDT *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (delta::hull::KDT_First(delta::hull::KDT *)) [15/17=88.2%] delta/hull/kdt.cpp(347,1)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at delta/hull/kdt.cpp(349,3)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   remark #25478: While Loop Unrolled by 2  
LOOP END

    Report from: Code generation optimizations [cg]

delta/hull/kdt.cpp(347,1):remark #34051: REGISTER ALLOCATION : [_ZN5delta4hull9KDT_FirstEPNS0_3kdtE] delta/hull/kdt.cpp:347

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    3[ rax rdx rdi]
        
    Routine temporaries
        Total         :      12
            Global    :       9
            Local     :       3
        Regenerable   :       1
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: delta::hull::KDT_Next(delta::hull::KDT *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (delta::hull::KDT_Next(delta::hull::KDT *)) [16/17=94.1%] delta/hull/kdt.cpp(355,1)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at delta/hull/kdt.cpp(376,5)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   remark #25478: While Loop Unrolled by 2  
LOOP END

LOOP BEGIN at delta/hull/kdt.cpp(367,5)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

    Report from: Code generation optimizations [cg]

delta/hull/kdt.cpp(355,1):remark #34051: REGISTER ALLOCATION : [_ZN5delta4hull8KDT_NextEPNS0_3kdtE] delta/hull/kdt.cpp:355

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    3[ rax rdx rdi]
        
    Routine temporaries
        Total         :      20
            Global    :      13
            Local     :       7
        Regenerable   :       3
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: delta::hull::KDT_Destroy(delta::hull::KDT *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (delta::hull::KDT_Destroy(delta::hull::KDT *)) [17/17=100.0%] delta/hull/kdt.cpp(383,1)
  -> (385,3) delta::hull::KDT_Destroy(delta::hull::KDT *) (isz = 11) (sz = 17)
     [[ Callee not marked with inlining pragma  <2>]]
  -> (386,3) delta::hull::KDT_Destroy(delta::hull::KDT *) (isz = 11) (sz = 17)
     [[ Callee not marked with inlining pragma  <2>]]
  -> EXTERN: (387,3) free(void *)
  -> EXTERN: (388,3) free(void *)


    Report from: Code generation optimizations [cg]

delta/hull/kdt.cpp(383,1):remark #34051: REGISTER ALLOCATION : [_ZN5delta4hull11KDT_DestroyEPNS0_3kdtE] delta/hull/kdt.cpp:383

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    2[ rdi r13]
        
    Routine temporaries
        Total         :      15
            Global    :       7
            Local     :       8
        Regenerable   :       0
        Spilled       :       1
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

    Report from: Interprocedural optimizations [ipo]

INLINING FOOTNOTES:

<1> The function is larger than the inliner would normally inline.  Use the
    option -inline-max-size to increase the size of any function that would
    normally be inlined, add "inline __attribute__((always_inline))" to the
    declaration of the called function, or add "#pragma forceinline" before
    the call site.

<2> The compiler's heuristics indicate that the function is not profitable to 
    inline.  Override this decision by adding "inline 
    __attribute__((always_inline))" to the declaration of the called function, 
    or add "#pragma forceinline" before the call site.

