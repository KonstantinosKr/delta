Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C++ Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 17.0.0.098 Build 20160721

Compiler options: -I. --std=c++11 -DDim3 -DiREAL=double -DbyteAlignment=32 -DTrackGridStatistics -fast -qopt-report=5 -fstrict-aliasing -restrict -fno-rtti -no-ipo -ip -xHost -c -o dem/records/Particle.o

    Report from: Interprocedural optimizations [ipo]

  WHOLE PROGRAM (SAFE) [EITHER METHOD]: false
  WHOLE PROGRAM (SEEN) [TABLE METHOD]: false
  WHOLE PROGRAM (READ) [OBJECT READER METHOD]: false

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: disabled
  -inline-max-per-compile: disabled

In the inlining report below:
   "sz" refers to the "size" of the routine. The smaller a routine's size,
      the more likely it is to be inlined.
   "isz" refers to the "inlined size" of the routine. This is the amount
      the calling routine will grow if the called routine is inlined into it.
      The compiler generally limits the amount a routine can grow by having
      routines inlined into it.

Begin optimization report for: __gthread_active_p()

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (__gthread_active_p()) /usr/include/x86_64-linux-gnu/c++/6/bits/gthr-default.h(248,1)

===========================================================================

Begin optimization report for: std::char_traits<char>::assign(std::char_traits<char>::char_type &, const std::char_traits<char>::char_type &)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (std::char_traits<char>::assign(std::char_traits<char>::char_type &, const std::char_traits<char>::char_type &)) /usr/include/c++/6/bits/char_traits.h(243,7)

===========================================================================

Begin optimization report for: std::char_traits<char>::copy(std::char_traits<char>::char_type *, const std::char_traits<char>::char_type *, std::size_t)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (std::char_traits<char>::copy(std::char_traits<char>::char_type *, const std::char_traits<char>::char_type *, std::size_t)) /usr/include/c++/6/bits/char_traits.h(287,7)

===========================================================================

Begin optimization report for: std::basic_string<char, std::char_traits<char>, std::allocator<char>>::basic_string<char *>(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *, char *, char *, const std::allocator<char> &)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (std::basic_string<char, std::char_traits<char>, std::allocator<char>>::basic_string<char *>(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *, char *, char *, const std::allocator<char> &)) /usr/include/c++/6/bits/basic_string.tcc(670,5)

===========================================================================

Begin optimization report for: std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_S_construct<char *>(char *, char *, const std::allocator<char> &)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_S_construct<char *>(char *, char *, const std::allocator<char> &)) /usr/include/c++/6/bits/basic_string.h(4294,2)

===========================================================================

Begin optimization report for: std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_S_construct_aux<char *>(char *, char *, const std::allocator<char> &, std::__false_type)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_S_construct_aux<char *>(char *, char *, const std::allocator<char> &, std::__false_type)) /usr/include/c++/6/bits/basic_string.h(4273,2)

===========================================================================

Begin optimization report for: std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_S_construct<char *>(char *, char *, const std::allocator<char> &, std::forward_iterator_tag)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_S_construct<char *>(char *, char *, const std::allocator<char> &, std::forward_iterator_tag)) /usr/include/c++/6/bits/basic_string.tcc(566,7)

===========================================================================

Begin optimization report for: __gnu_cxx::new_allocator<char>::new_allocator(__gnu_cxx::new_allocator<char> *)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (__gnu_cxx::new_allocator<char>::new_allocator(__gnu_cxx::new_allocator<char> *)) /usr/include/c++/6/ext/new_allocator.h(79,45)

===========================================================================

Begin optimization report for: __gnu_cxx::new_allocator<char>::new_allocator(__gnu_cxx::new_allocator<char> *, const __gnu_cxx::new_allocator<char> &)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (__gnu_cxx::new_allocator<char>::new_allocator(__gnu_cxx::new_allocator<char> *, const __gnu_cxx::new_allocator<char> &)) /usr/include/c++/6/ext/new_allocator.h(81,65)

===========================================================================

Begin optimization report for: tarch::la::Vector<6, int>::Vector(tarch::la::Vector<6, int> *)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (tarch::la::Vector<6, int>::Vector(tarch::la::Vector<6, int> *)) ./tarch/la/Vector.cpph(6,13)

===========================================================================

Begin optimization report for: tarch::la::Vector<6, int>::Vector(tarch::la::Vector<6, int> *, const tarch::la::Vector<6, int> &)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (tarch::la::Vector<6, int>::Vector(tarch::la::Vector<6, int> *, const tarch::la::Vector<6, int> &)) ./tarch/la/Vector.cpph(63,13)

===========================================================================

Begin optimization report for: tarch::la::Vector<6, int>::operator[](const tarch::la::Vector<6, int> *, int) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (tarch::la::Vector<6, int>::operator[](const tarch::la::Vector<6, int> *, int) const) ./tarch/la/Vector.h(98,7)

===========================================================================

Begin optimization report for: tarch::la::Vector<9, double>::Vector(tarch::la::Vector<9, double> *)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (tarch::la::Vector<9, double>::Vector(tarch::la::Vector<9, double> *)) ./tarch/la/Vector.cpph(6,13)

===========================================================================

Begin optimization report for: tarch::la::Vector<9, double>::Vector(tarch::la::Vector<9, double> *, const tarch::la::Vector<9, double> &)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (tarch::la::Vector<9, double>::Vector(tarch::la::Vector<9, double> *, const tarch::la::Vector<9, double> &)) ./tarch/la/Vector.cpph(63,13)

===========================================================================

Begin optimization report for: tarch::la::Vector<9, double>::operator[](const tarch::la::Vector<9, double> *, int) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (tarch::la::Vector<9, double>::operator[](const tarch::la::Vector<9, double> *, int) const) ./tarch/la/Vector.h(98,7)

===========================================================================

Begin optimization report for: tarch::la::Vector<3, double>::Vector(tarch::la::Vector<3, double> *)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (tarch::la::Vector<3, double>::Vector(tarch::la::Vector<3, double> *)) ./tarch/la/Vector.cpph(6,13)

===========================================================================

Begin optimization report for: tarch::la::Vector<3, double>::Vector(tarch::la::Vector<3, double> *, const tarch::la::Vector<3, double> &)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (tarch::la::Vector<3, double>::Vector(tarch::la::Vector<3, double> *, const tarch::la::Vector<3, double> &)) ./tarch/la/Vector.cpph(63,13)

===========================================================================

Begin optimization report for: tarch::la::Vector<3, double>::operator[](const tarch::la::Vector<3, double> *, int) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (tarch::la::Vector<3, double>::operator[](const tarch::la::Vector<3, double> *, int) const) ./tarch/la/Vector.h(98,7)

===========================================================================

Begin optimization report for: dem::records::Particle::Particle(dem::records::Particle *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (dem::records::Particle::Particle(dem::records::Particle *)) [59/166=35.5%] dem/records/Particle.cpp(3087,36)
  -> INLINE: (3087,25) dem::records::Particle::PersistentRecords::PersistentRecords(dem::records::Particle::PersistentRecords *) (isz = 88) (sz = 93)
    -> INLINE (MANUAL): (3060,44) tarch::la::Vector<6, int>::Vector(tarch::la::Vector<6, int> *) (isz = 5) (sz = 10)
      -> EXTERN: ./tarch/la/Vector.cpph:(6,13) memset()
    -> INLINE (MANUAL): (3060,44) tarch::la::Vector<9, double>::Vector(tarch::la::Vector<9, double> *) (isz = 5) (sz = 10)
      -> EXTERN: ./tarch/la/Vector.cpph:(6,13) memset()
    -> INLINE (MANUAL): (3060,44) tarch::la::Vector<9, double>::Vector(tarch::la::Vector<9, double> *) (isz = 5) (sz = 10)
      -> EXTERN: ./tarch/la/Vector.cpph:(6,13) memset()
    -> INLINE (MANUAL): (3060,44) tarch::la::Vector<9, double>::Vector(tarch::la::Vector<9, double> *) (isz = 5) (sz = 10)
      -> EXTERN: ./tarch/la/Vector.cpph:(6,13) memset()
    -> INLINE (MANUAL): (3060,44) tarch::la::Vector<3, double>::Vector(tarch::la::Vector<3, double> *) (isz = 5) (sz = 10)
      -> EXTERN: ./tarch/la/Vector.cpph:(6,13) memset()
    -> INLINE (MANUAL): (3060,44) tarch::la::Vector<3, double>::Vector(tarch::la::Vector<3, double> *) (isz = 5) (sz = 10)
      -> EXTERN: ./tarch/la/Vector.cpph:(6,13) memset()
    -> INLINE (MANUAL): (3060,44) tarch::la::Vector<3, double>::Vector(tarch::la::Vector<3, double> *) (isz = 5) (sz = 10)
      -> EXTERN: ./tarch/la/Vector.cpph:(6,13) memset()
    -> INLINE (MANUAL): (3060,44) tarch::la::Vector<3, double>::Vector(tarch::la::Vector<3, double> *) (isz = 5) (sz = 10)
      -> EXTERN: ./tarch/la/Vector.cpph:(6,13) memset()
    -> INLINE (MANUAL): (3060,44) tarch::la::Vector<3, double>::Vector(tarch::la::Vector<3, double> *) (isz = 5) (sz = 10)
      -> EXTERN: ./tarch/la/Vector.cpph:(6,13) memset()
    -> INLINE (MANUAL): (3060,44) tarch::la::Vector<3, double>::Vector(tarch::la::Vector<3, double> *) (isz = 5) (sz = 10)
      -> EXTERN: ./tarch/la/Vector.cpph:(6,13) memset()


    Report from: Code generation optimizations [cg]

./tarch/la/Vector.cpph(6,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(6,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(6,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(6,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(6,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(6,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(6,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(6,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(6,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(6,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(6,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(6,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(6,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(6,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(6,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(6,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(6,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(6,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(6,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(6,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
dem/records/Particle.cpp(3087,36):remark #34051: REGISTER ALLOCATION : [_ZN3dem7records8ParticleC1Ev] dem/records/Particle.cpp:3087

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    2[ rdi zmm0]
        
    Routine temporaries
        Total         :       9
            Global    :       8
            Local     :       1
        Regenerable   :       1
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: dem::records::Particle::Particle(dem::records::Particle *const)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (dem::records::Particle::Particle(dem::records::Particle *const)) [60/166=36.1%] dem/records/Particle.cpp(3087,25)
  -> INLINE: (3087,25) dem::records::Particle::Particle(dem::records::Particle *) (isz = 90) (sz = 95)
    -> INLINE: (3087,25) dem::records::Particle::PersistentRecords::PersistentRecords(dem::records::Particle::PersistentRecords *) (isz = 88) (sz = 93)
      -> INLINE (MANUAL): (3060,44) tarch::la::Vector<6, int>::Vector(tarch::la::Vector<6, int> *) (isz = 5) (sz = 10)
        -> EXTERN: ./tarch/la/Vector.cpph:(6,13) memset()
      -> INLINE (MANUAL): (3060,44) tarch::la::Vector<9, double>::Vector(tarch::la::Vector<9, double> *) (isz = 5) (sz = 10)
        -> EXTERN: ./tarch/la/Vector.cpph:(6,13) memset()
      -> INLINE (MANUAL): (3060,44) tarch::la::Vector<9, double>::Vector(tarch::la::Vector<9, double> *) (isz = 5) (sz = 10)
        -> EXTERN: ./tarch/la/Vector.cpph:(6,13) memset()
      -> INLINE (MANUAL): (3060,44) tarch::la::Vector<9, double>::Vector(tarch::la::Vector<9, double> *) (isz = 5) (sz = 10)
        -> EXTERN: ./tarch/la/Vector.cpph:(6,13) memset()
      -> INLINE (MANUAL): (3060,44) tarch::la::Vector<3, double>::Vector(tarch::la::Vector<3, double> *) (isz = 5) (sz = 10)
        -> EXTERN: ./tarch/la/Vector.cpph:(6,13) memset()
      -> INLINE (MANUAL): (3060,44) tarch::la::Vector<3, double>::Vector(tarch::la::Vector<3, double> *) (isz = 5) (sz = 10)
        -> EXTERN: ./tarch/la/Vector.cpph:(6,13) memset()
      -> INLINE (MANUAL): (3060,44) tarch::la::Vector<3, double>::Vector(tarch::la::Vector<3, double> *) (isz = 5) (sz = 10)
        -> EXTERN: ./tarch/la/Vector.cpph:(6,13) memset()
      -> INLINE (MANUAL): (3060,44) tarch::la::Vector<3, double>::Vector(tarch::la::Vector<3, double> *) (isz = 5) (sz = 10)
        -> EXTERN: ./tarch/la/Vector.cpph:(6,13) memset()
      -> INLINE (MANUAL): (3060,44) tarch::la::Vector<3, double>::Vector(tarch::la::Vector<3, double> *) (isz = 5) (sz = 10)
        -> EXTERN: ./tarch/la/Vector.cpph:(6,13) memset()
      -> INLINE (MANUAL): (3060,44) tarch::la::Vector<3, double>::Vector(tarch::la::Vector<3, double> *) (isz = 5) (sz = 10)
        -> EXTERN: ./tarch/la/Vector.cpph:(6,13) memset()


    Report from: Code generation optimizations [cg]

./tarch/la/Vector.cpph(6,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(6,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(6,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(6,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(6,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(6,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(6,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(6,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(6,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(6,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(6,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(6,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(6,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(6,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(6,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(6,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(6,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(6,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(6,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(6,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
dem/records/Particle.cpp(3087,25):remark #34051: REGISTER ALLOCATION : [_ZN3dem7records8ParticleC2Ev] dem/records/Particle.cpp:3087

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    2[ rdi zmm0]
        
    Routine temporaries
        Total         :       9
            Global    :       8
            Local     :       1
        Regenerable   :       1
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: dem::records::Particle::Particle(dem::records::Particle *, const dem::records::Particle::PersistentRecords &)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (dem::records::Particle::Particle(dem::records::Particle *, const dem::records::Particle::PersistentRecords &)) [61/166=36.7%] dem/records/Particle.cpp(3093,588)
  -> INLINE: (3093,559) dem::records::Particle::PersistentRecords::PersistentRecords(dem::records::Particle::PersistentRecords *, const tarch::la::Vector<6, int> &, const tarch::la::Vector<9, double> &, const tarch::la::Vector<9, double> &, const tarch::la::Vector<9, double> &, const tarch::la::Vector<3, double> &, const tarch::la::Vector<3, double> &, const tarch::la::Vector<3, double> &, const tarch::la::Vector<3, double> &, const tarch::la::Vector<3, double> &, const tarch::la::Vector<3, double> &, const double &, const double &, const double &, const double &, const double &, const int &, const int &, const int &) (isz = 224) (sz = 265)
    -> INLINE (MANUAL): (3066,11) tarch::la::Vector<6, int>::Vector(tarch::la::Vector<6, int> *, const tarch::la::Vector<6, int> &) (isz = 17) (sz = 24)
      -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()
    -> INLINE (MANUAL): (3067,14) tarch::la::Vector<9, double>::Vector(tarch::la::Vector<9, double> *, const tarch::la::Vector<9, double> &) (isz = 17) (sz = 24)
      -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()
    -> INLINE (MANUAL): (3068,10) tarch::la::Vector<9, double>::Vector(tarch::la::Vector<9, double> *, const tarch::la::Vector<9, double> &) (isz = 17) (sz = 24)
      -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()
    -> INLINE (MANUAL): (3069,10) tarch::la::Vector<9, double>::Vector(tarch::la::Vector<9, double> *, const tarch::la::Vector<9, double> &) (isz = 17) (sz = 24)
      -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()
    -> INLINE (MANUAL): (3070,9) tarch::la::Vector<3, double>::Vector(tarch::la::Vector<3, double> *, const tarch::la::Vector<3, double> &) (isz = 17) (sz = 24)
      -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()
    -> INLINE (MANUAL): (3071,15) tarch::la::Vector<3, double>::Vector(tarch::la::Vector<3, double> *, const tarch::la::Vector<3, double> &) (isz = 17) (sz = 24)
      -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()
    -> INLINE (MANUAL): (3072,21) tarch::la::Vector<3, double>::Vector(tarch::la::Vector<3, double> *, const tarch::la::Vector<3, double> &) (isz = 17) (sz = 24)
      -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()
    -> INLINE (MANUAL): (3073,26) tarch::la::Vector<3, double>::Vector(tarch::la::Vector<3, double> *, const tarch::la::Vector<3, double> &) (isz = 17) (sz = 24)
      -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()
    -> INLINE (MANUAL): (3074,11) tarch::la::Vector<3, double>::Vector(tarch::la::Vector<3, double> *, const tarch::la::Vector<3, double> &) (isz = 17) (sz = 24)
      -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()
    -> INLINE (MANUAL): (3075,10) tarch::la::Vector<3, double>::Vector(tarch::la::Vector<3, double> *, const tarch::la::Vector<3, double> &) (isz = 17) (sz = 24)
      -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3093,559)
   remark #15389: vectorization support: reference this->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15389: vectorization support: reference vertices->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 1.000
   remark #15300: LOOP WAS VECTORIZED
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.200 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3093,559)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 2  
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3093,559)
<Peeled loop for vectorization>
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3093,559)
   remark #15388: vectorization support: reference this->_values[i] has aligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15389: vectorization support: reference orientation->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 3.333
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.200 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=4
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3093,559)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3093,559)
<Peeled loop for vectorization>
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3093,559)
   remark #15388: vectorization support: reference this->_values[i] has aligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15389: vectorization support: reference inertia->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 3.333
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.200 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=4
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3093,559)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3093,559)
<Peeled loop for vectorization>
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3093,559)
   remark #15388: vectorization support: reference this->_values[i] has aligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15389: vectorization support: reference inverse->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 3.333
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.200 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=4
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3093,559)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3093,559)
   remark #15389: vectorization support: reference this->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15389: vectorization support: reference centre->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 1.000
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.750 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3093,559)
   remark #15389: vectorization support: reference this->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15389: vectorization support: reference centreOfMass->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 1.000
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.750 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3093,559)
   remark #15389: vectorization support: reference this->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15389: vectorization support: reference referencialAngular->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 1.000
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.750 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3093,559)
   remark #15389: vectorization support: reference this->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15389: vectorization support: reference referentialCentreOfMass->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 1.000
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.750 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3093,559)
   remark #15389: vectorization support: reference this->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15389: vectorization support: reference velocity->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 1.000
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.750 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3093,559)
   remark #15389: vectorization support: reference this->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15389: vectorization support: reference angular->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 1.000
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.750 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

    Report from: Code generation optimizations [cg]

./tarch/la/Vector.cpph(63,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(63,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(63,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(63,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(63,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(63,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(63,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(63,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(63,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(63,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
dem/records/Particle.cpp(3093,588):remark #34051: REGISTER ALLOCATION : [_ZN3dem7records8ParticleC1ERKNS1_17PersistentRecordsE] dem/records/Particle.cpp:3093

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   11[ rax rdx rcx rsi rdi r8-r11 zmm0-zmm1]
        
    Routine temporaries
        Total         :      82
            Global    :      21
            Local     :      61
        Regenerable   :       1
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: dem::records::Particle::Particle(dem::records::Particle *const, const dem::records::Particle::PersistentRecords &)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (dem::records::Particle::Particle(dem::records::Particle *const, const dem::records::Particle::PersistentRecords &)) [62/166=37.3%] dem/records/Particle.cpp(3092,25)
  -> INLINE: (3092,25) dem::records::Particle::Particle(dem::records::Particle *, const dem::records::Particle::PersistentRecords &) (isz = 279) (sz = 286)
    -> INLINE: (3093,559) dem::records::Particle::PersistentRecords::PersistentRecords(dem::records::Particle::PersistentRecords *, const tarch::la::Vector<6, int> &, const tarch::la::Vector<9, double> &, const tarch::la::Vector<9, double> &, const tarch::la::Vector<9, double> &, const tarch::la::Vector<3, double> &, const tarch::la::Vector<3, double> &, const tarch::la::Vector<3, double> &, const tarch::la::Vector<3, double> &, const tarch::la::Vector<3, double> &, const tarch::la::Vector<3, double> &, const double &, const double &, const double &, const double &, const double &, const int &, const int &, const int &) (isz = 224) (sz = 265)
      -> INLINE (MANUAL): (3066,11) tarch::la::Vector<6, int>::Vector(tarch::la::Vector<6, int> *, const tarch::la::Vector<6, int> &) (isz = 17) (sz = 24)
        -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()
      -> INLINE (MANUAL): (3067,14) tarch::la::Vector<9, double>::Vector(tarch::la::Vector<9, double> *, const tarch::la::Vector<9, double> &) (isz = 17) (sz = 24)
        -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()
      -> INLINE (MANUAL): (3068,10) tarch::la::Vector<9, double>::Vector(tarch::la::Vector<9, double> *, const tarch::la::Vector<9, double> &) (isz = 17) (sz = 24)
        -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()
      -> INLINE (MANUAL): (3069,10) tarch::la::Vector<9, double>::Vector(tarch::la::Vector<9, double> *, const tarch::la::Vector<9, double> &) (isz = 17) (sz = 24)
        -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()
      -> INLINE (MANUAL): (3070,9) tarch::la::Vector<3, double>::Vector(tarch::la::Vector<3, double> *, const tarch::la::Vector<3, double> &) (isz = 17) (sz = 24)
        -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()
      -> INLINE (MANUAL): (3071,15) tarch::la::Vector<3, double>::Vector(tarch::la::Vector<3, double> *, const tarch::la::Vector<3, double> &) (isz = 17) (sz = 24)
        -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()
      -> INLINE (MANUAL): (3072,21) tarch::la::Vector<3, double>::Vector(tarch::la::Vector<3, double> *, const tarch::la::Vector<3, double> &) (isz = 17) (sz = 24)
        -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()
      -> INLINE (MANUAL): (3073,26) tarch::la::Vector<3, double>::Vector(tarch::la::Vector<3, double> *, const tarch::la::Vector<3, double> &) (isz = 17) (sz = 24)
        -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()
      -> INLINE (MANUAL): (3074,11) tarch::la::Vector<3, double>::Vector(tarch::la::Vector<3, double> *, const tarch::la::Vector<3, double> &) (isz = 17) (sz = 24)
        -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()
      -> INLINE (MANUAL): (3075,10) tarch::la::Vector<3, double>::Vector(tarch::la::Vector<3, double> *, const tarch::la::Vector<3, double> &) (isz = 17) (sz = 24)
        -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3092,25)
   remark #15389: vectorization support: reference this->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15389: vectorization support: reference vertices->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 1.000
   remark #15300: LOOP WAS VECTORIZED
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.200 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3092,25)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 2  
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3092,25)
<Peeled loop for vectorization>
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3092,25)
   remark #15388: vectorization support: reference this->_values[i] has aligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15389: vectorization support: reference orientation->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 3.333
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.200 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=4
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3092,25)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3092,25)
<Peeled loop for vectorization>
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3092,25)
   remark #15388: vectorization support: reference this->_values[i] has aligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15389: vectorization support: reference inertia->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 3.333
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.200 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=4
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3092,25)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3092,25)
<Peeled loop for vectorization>
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3092,25)
   remark #15388: vectorization support: reference this->_values[i] has aligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15389: vectorization support: reference inverse->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 3.333
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.200 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=4
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3092,25)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3092,25)
   remark #15389: vectorization support: reference this->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15389: vectorization support: reference centre->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 1.000
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.750 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3092,25)
   remark #15389: vectorization support: reference this->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15389: vectorization support: reference centreOfMass->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 1.000
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.750 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3092,25)
   remark #15389: vectorization support: reference this->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15389: vectorization support: reference referencialAngular->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 1.000
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.750 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3092,25)
   remark #15389: vectorization support: reference this->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15389: vectorization support: reference referentialCentreOfMass->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 1.000
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.750 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3092,25)
   remark #15389: vectorization support: reference this->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15389: vectorization support: reference velocity->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 1.000
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.750 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3092,25)
   remark #15389: vectorization support: reference this->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15389: vectorization support: reference angular->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 1.000
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.750 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

    Report from: Code generation optimizations [cg]

./tarch/la/Vector.cpph(63,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(63,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(63,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(63,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(63,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(63,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(63,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(63,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(63,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(63,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
dem/records/Particle.cpp(3092,25):remark #34051: REGISTER ALLOCATION : [_ZN3dem7records8ParticleC2ERKNS1_17PersistentRecordsE] dem/records/Particle.cpp:3092

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   11[ rax rdx rcx rsi rdi r8-r11 zmm0-zmm1]
        
    Routine temporaries
        Total         :      82
            Global    :      21
            Local     :      61
        Regenerable   :       1
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: dem::records::Particle::Particle(dem::records::Particle *, const tarch::la::Vector<6, int> &, const tarch::la::Vector<9, double> &, const tarch::la::Vector<9, double> &, const tarch::la::Vector<9, double> &, const tarch::la::Vector<3, double> &, const tarch::la::Vector<3, double> &, const tarch::la::Vector<3, double> &, const tarch::la::Vector<3, double> &, const tarch::la::Vector<3, double> &, const tarch::la::Vector<3, double> &, const double &, const double &, const double &, const double &, const double &, const int &, const int &, const int &)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (dem::records::Particle::Particle(dem::records::Particle *, const tarch::la::Vector<6, int> &, const tarch::la::Vector<9, double> &, const tarch::la::Vector<9, double> &, const tarch::la::Vector<9, double> &, const tarch::la::Vector<3, double> &, const tarch::la::Vector<3, double> &, const tarch::la::Vector<3, double> &, const tarch::la::Vector<3, double> &, const tarch::la::Vector<3, double> &, const tarch::la::Vector<3, double> &, const double &, const double &, const double &, const double &, const double &, const int &, const int &, const int &)) [63/166=38.0%] dem/records/Particle.cpp(3099,246)
  -> INLINE: (3099,236) dem::records::Particle::PersistentRecords::PersistentRecords(dem::records::Particle::PersistentRecords *, const tarch::la::Vector<6, int> &, const tarch::la::Vector<9, double> &, const tarch::la::Vector<9, double> &, const tarch::la::Vector<9, double> &, const tarch::la::Vector<3, double> &, const tarch::la::Vector<3, double> &, const tarch::la::Vector<3, double> &, const tarch::la::Vector<3, double> &, const tarch::la::Vector<3, double> &, const tarch::la::Vector<3, double> &, const double &, const double &, const double &, const double &, const double &, const int &, const int &, const int &) (isz = 224) (sz = 265)
    -> INLINE (MANUAL): (3066,11) tarch::la::Vector<6, int>::Vector(tarch::la::Vector<6, int> *, const tarch::la::Vector<6, int> &) (isz = 17) (sz = 24)
      -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()
    -> INLINE (MANUAL): (3067,14) tarch::la::Vector<9, double>::Vector(tarch::la::Vector<9, double> *, const tarch::la::Vector<9, double> &) (isz = 17) (sz = 24)
      -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()
    -> INLINE (MANUAL): (3068,10) tarch::la::Vector<9, double>::Vector(tarch::la::Vector<9, double> *, const tarch::la::Vector<9, double> &) (isz = 17) (sz = 24)
      -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()
    -> INLINE (MANUAL): (3069,10) tarch::la::Vector<9, double>::Vector(tarch::la::Vector<9, double> *, const tarch::la::Vector<9, double> &) (isz = 17) (sz = 24)
      -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()
    -> INLINE (MANUAL): (3070,9) tarch::la::Vector<3, double>::Vector(tarch::la::Vector<3, double> *, const tarch::la::Vector<3, double> &) (isz = 17) (sz = 24)
      -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()
    -> INLINE (MANUAL): (3071,15) tarch::la::Vector<3, double>::Vector(tarch::la::Vector<3, double> *, const tarch::la::Vector<3, double> &) (isz = 17) (sz = 24)
      -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()
    -> INLINE (MANUAL): (3072,21) tarch::la::Vector<3, double>::Vector(tarch::la::Vector<3, double> *, const tarch::la::Vector<3, double> &) (isz = 17) (sz = 24)
      -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()
    -> INLINE (MANUAL): (3073,26) tarch::la::Vector<3, double>::Vector(tarch::la::Vector<3, double> *, const tarch::la::Vector<3, double> &) (isz = 17) (sz = 24)
      -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()
    -> INLINE (MANUAL): (3074,11) tarch::la::Vector<3, double>::Vector(tarch::la::Vector<3, double> *, const tarch::la::Vector<3, double> &) (isz = 17) (sz = 24)
      -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()
    -> INLINE (MANUAL): (3075,10) tarch::la::Vector<3, double>::Vector(tarch::la::Vector<3, double> *, const tarch::la::Vector<3, double> &) (isz = 17) (sz = 24)
      -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3099,236)
   remark #15389: vectorization support: reference this->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15389: vectorization support: reference vertices->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 1.000
   remark #15300: LOOP WAS VECTORIZED
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.200 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3099,236)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 2  
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3099,236)
<Peeled loop for vectorization>
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3099,236)
   remark #15388: vectorization support: reference this->_values[i] has aligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15389: vectorization support: reference orientation->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 3.333
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.200 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=4
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3099,236)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3099,236)
<Peeled loop for vectorization>
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3099,236)
   remark #15388: vectorization support: reference this->_values[i] has aligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15389: vectorization support: reference inertia->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 3.333
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.200 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=4
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3099,236)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3099,236)
<Peeled loop for vectorization>
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3099,236)
   remark #15388: vectorization support: reference this->_values[i] has aligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15389: vectorization support: reference inverse->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 3.333
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.200 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=4
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3099,236)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3099,236)
   remark #15389: vectorization support: reference this->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15389: vectorization support: reference centre->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 1.000
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.750 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3099,236)
   remark #15389: vectorization support: reference this->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15389: vectorization support: reference centreOfMass->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 1.000
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.750 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3099,236)
   remark #15389: vectorization support: reference this->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15389: vectorization support: reference referencialAngular->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 1.000
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.750 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3099,236)
   remark #15389: vectorization support: reference this->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15389: vectorization support: reference referentialCentreOfMass->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 1.000
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.750 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3099,236)
   remark #15389: vectorization support: reference this->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15389: vectorization support: reference velocity->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 1.000
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.750 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3099,236)
   remark #15389: vectorization support: reference this->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15389: vectorization support: reference angular->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 1.000
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.750 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

    Report from: Code generation optimizations [cg]

./tarch/la/Vector.cpph(63,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(63,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(63,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(63,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(63,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(63,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(63,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(63,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(63,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(63,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
dem/records/Particle.cpp(3099,246):remark #34051: REGISTER ALLOCATION : [_ZN3dem7records8ParticleC1ERKN5tarch2la6VectorILi6EiEERKNS4_ILi9EdEESA_SA_RKNS4_ILi3EdEESD_SD_SD_SD_SD_RKdSF_SF_SF_SF_RKiSH_SH_] dem/records/Particle.cpp:3099

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   11[ rax rdx rcx rsi rdi r8-r11 zmm0-zmm1]
        
    Routine temporaries
        Total         :     103
            Global    :      25
            Local     :      78
        Regenerable   :       1
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: dem::records::Particle::Particle(dem::records::Particle *const, const tarch::la::Vector<6, int> &, const tarch::la::Vector<9, double> &, const tarch::la::Vector<9, double> &, const tarch::la::Vector<9, double> &, const tarch::la::Vector<3, double> &, const tarch::la::Vector<3, double> &, const tarch::la::Vector<3, double> &, const tarch::la::Vector<3, double> &, const tarch::la::Vector<3, double> &, const tarch::la::Vector<3, double> &, const double &, const double &, const double &, const double &, const double &, const int &, const int &, const int &)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (dem::records::Particle::Particle(dem::records::Particle *const, const tarch::la::Vector<6, int> &, const tarch::la::Vector<9, double> &, const tarch::la::Vector<9, double> &, const tarch::la::Vector<9, double> &, const tarch::la::Vector<3, double> &, const tarch::la::Vector<3, double> &, const tarch::la::Vector<3, double> &, const tarch::la::Vector<3, double> &, const tarch::la::Vector<3, double> &, const tarch::la::Vector<3, double> &, const double &, const double &, const double &, const double &, const double &, const int &, const int &, const int &)) [64/166=38.6%] dem/records/Particle.cpp(3098,25)
  -> INLINE: (3098,25) dem::records::Particle::Particle(dem::records::Particle *, const tarch::la::Vector<6, int> &, const tarch::la::Vector<9, double> &, const tarch::la::Vector<9, double> &, const tarch::la::Vector<9, double> &, const tarch::la::Vector<3, double> &, const tarch::la::Vector<3, double> &, const tarch::la::Vector<3, double> &, const tarch::la::Vector<3, double> &, const tarch::la::Vector<3, double> &, const tarch::la::Vector<3, double> &, const double &, const double &, const double &, const double &, const double &, const int &, const int &, const int &) (isz = 226) (sz = 267)
    -> INLINE: (3099,236) dem::records::Particle::PersistentRecords::PersistentRecords(dem::records::Particle::PersistentRecords *, const tarch::la::Vector<6, int> &, const tarch::la::Vector<9, double> &, const tarch::la::Vector<9, double> &, const tarch::la::Vector<9, double> &, const tarch::la::Vector<3, double> &, const tarch::la::Vector<3, double> &, const tarch::la::Vector<3, double> &, const tarch::la::Vector<3, double> &, const tarch::la::Vector<3, double> &, const tarch::la::Vector<3, double> &, const double &, const double &, const double &, const double &, const double &, const int &, const int &, const int &) (isz = 224) (sz = 265)
      -> INLINE (MANUAL): (3066,11) tarch::la::Vector<6, int>::Vector(tarch::la::Vector<6, int> *, const tarch::la::Vector<6, int> &) (isz = 17) (sz = 24)
        -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()
      -> INLINE (MANUAL): (3067,14) tarch::la::Vector<9, double>::Vector(tarch::la::Vector<9, double> *, const tarch::la::Vector<9, double> &) (isz = 17) (sz = 24)
        -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()
      -> INLINE (MANUAL): (3068,10) tarch::la::Vector<9, double>::Vector(tarch::la::Vector<9, double> *, const tarch::la::Vector<9, double> &) (isz = 17) (sz = 24)
        -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()
      -> INLINE (MANUAL): (3069,10) tarch::la::Vector<9, double>::Vector(tarch::la::Vector<9, double> *, const tarch::la::Vector<9, double> &) (isz = 17) (sz = 24)
        -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()
      -> INLINE (MANUAL): (3070,9) tarch::la::Vector<3, double>::Vector(tarch::la::Vector<3, double> *, const tarch::la::Vector<3, double> &) (isz = 17) (sz = 24)
        -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()
      -> INLINE (MANUAL): (3071,15) tarch::la::Vector<3, double>::Vector(tarch::la::Vector<3, double> *, const tarch::la::Vector<3, double> &) (isz = 17) (sz = 24)
        -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()
      -> INLINE (MANUAL): (3072,21) tarch::la::Vector<3, double>::Vector(tarch::la::Vector<3, double> *, const tarch::la::Vector<3, double> &) (isz = 17) (sz = 24)
        -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()
      -> INLINE (MANUAL): (3073,26) tarch::la::Vector<3, double>::Vector(tarch::la::Vector<3, double> *, const tarch::la::Vector<3, double> &) (isz = 17) (sz = 24)
        -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()
      -> INLINE (MANUAL): (3074,11) tarch::la::Vector<3, double>::Vector(tarch::la::Vector<3, double> *, const tarch::la::Vector<3, double> &) (isz = 17) (sz = 24)
        -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()
      -> INLINE (MANUAL): (3075,10) tarch::la::Vector<3, double>::Vector(tarch::la::Vector<3, double> *, const tarch::la::Vector<3, double> &) (isz = 17) (sz = 24)
        -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3098,25)
   remark #15389: vectorization support: reference this->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15389: vectorization support: reference __p2->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 1.000
   remark #15300: LOOP WAS VECTORIZED
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.200 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3098,25)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 2  
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3098,25)
<Peeled loop for vectorization>
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3098,25)
   remark #15388: vectorization support: reference this->_values[i] has aligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15389: vectorization support: reference __p3->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 3.333
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.200 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=4
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3098,25)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3098,25)
<Peeled loop for vectorization>
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3098,25)
   remark #15388: vectorization support: reference this->_values[i] has aligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15389: vectorization support: reference __p4->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 3.333
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.200 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=4
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3098,25)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3098,25)
<Peeled loop for vectorization>
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3098,25)
   remark #15388: vectorization support: reference this->_values[i] has aligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15389: vectorization support: reference __p5->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 3.333
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.200 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=4
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3098,25)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3098,25)
   remark #15389: vectorization support: reference this->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15389: vectorization support: reference __p6->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 1.000
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.750 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3098,25)
   remark #15389: vectorization support: reference this->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15389: vectorization support: reference __p7->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 1.000
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.750 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3098,25)
   remark #15389: vectorization support: reference this->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15389: vectorization support: reference __p8->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 1.000
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.750 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3098,25)
   remark #15389: vectorization support: reference this->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15389: vectorization support: reference __p9->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 1.000
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.750 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3098,25)
   remark #15389: vectorization support: reference this->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15389: vectorization support: reference __p10->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 1.000
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.750 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3098,25)
   remark #15389: vectorization support: reference this->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15389: vectorization support: reference __p11->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 1.000
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.750 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

    Report from: Code generation optimizations [cg]

./tarch/la/Vector.cpph(63,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(63,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(63,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(63,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(63,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(63,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(63,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(63,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(63,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(63,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
dem/records/Particle.cpp(3098,25):remark #34051: REGISTER ALLOCATION : [_ZN3dem7records8ParticleC2ERKN5tarch2la6VectorILi6EiEERKNS4_ILi9EdEESA_SA_RKNS4_ILi3EdEESD_SD_SD_SD_SD_RKdSF_SF_SF_SF_RKiSH_SH_] dem/records/Particle.cpp:3098

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   11[ rax rdx rcx rsi rdi r8-r11 zmm0-zmm1]
        
    Routine temporaries
        Total         :     103
            Global    :      25
            Local     :      78
        Regenerable   :       1
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: dem::records::Particle::~Particle(dem::records::Particle *const)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (dem::records::Particle::~Particle(dem::records::Particle *const)) [65/166=39.2%] dem/records/Particle.cpp(3104,25)
  -> DELETED: (3104,25) dem::records::Particle::~Particle(dem::records::Particle *) (isz = 0) (sz = 3)


    Report from: Code generation optimizations [cg]

dem/records/Particle.cpp(3104,25):remark #34051: REGISTER ALLOCATION : [_ZN3dem7records8ParticleD2Ev] dem/records/Particle.cpp:3104

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    1[ rdi]
        
    Routine temporaries
        Total         :       7
            Global    :       0
            Local     :       7
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: dem::records::Particle::~Particle(dem::records::Particle *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (dem::records::Particle::~Particle(dem::records::Particle *)) [66/166=39.8%] dem/records/Particle.cpp(3104,37)


    Report from: Code generation optimizations [cg]

dem/records/Particle.cpp(3104,37):remark #34051: REGISTER ALLOCATION : [_ZN3dem7records8ParticleD1Ev] dem/records/Particle.cpp:3104

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    1[ rdi]
        
    Routine temporaries
        Total         :       7
            Global    :       0
            Local     :       7
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: dem::records::Particle::getVertices(tarch::la::Vector<6, int> *, const dem::records::Particle *) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (dem::records::Particle::getVertices(tarch::la::Vector<6, int> *, const dem::records::Particle *) const) ./dem/records/Particle.h(12289,2)

===========================================================================

Begin optimization report for: dem::records::Particle::getVertices(const dem::records::Particle *, int) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (dem::records::Particle::getVertices(const dem::records::Particle *, int) const) ./dem/records/Particle.h(12328,2)

===========================================================================

Begin optimization report for: dem::records::Particle::getOrientation(tarch::la::Vector<9, double> *, const dem::records::Particle *) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (dem::records::Particle::getOrientation(tarch::la::Vector<9, double> *, const dem::records::Particle *) const) ./dem/records/Particle.h(12373,2)

===========================================================================

Begin optimization report for: dem::records::Particle::getOrientation(const dem::records::Particle *, int) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (dem::records::Particle::getOrientation(const dem::records::Particle *, int) const) ./dem/records/Particle.h(12412,2)

===========================================================================

Begin optimization report for: dem::records::Particle::getInertia(tarch::la::Vector<9, double> *, const dem::records::Particle *) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (dem::records::Particle::getInertia(tarch::la::Vector<9, double> *, const dem::records::Particle *) const) ./dem/records/Particle.h(12457,2)

===========================================================================

Begin optimization report for: dem::records::Particle::getInertia(const dem::records::Particle *, int) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (dem::records::Particle::getInertia(const dem::records::Particle *, int) const) ./dem/records/Particle.h(12496,2)

===========================================================================

Begin optimization report for: dem::records::Particle::getInverse(tarch::la::Vector<9, double> *, const dem::records::Particle *) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (dem::records::Particle::getInverse(tarch::la::Vector<9, double> *, const dem::records::Particle *) const) ./dem/records/Particle.h(12541,2)

===========================================================================

Begin optimization report for: dem::records::Particle::getInverse(const dem::records::Particle *, int) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (dem::records::Particle::getInverse(const dem::records::Particle *, int) const) ./dem/records/Particle.h(12580,2)

===========================================================================

Begin optimization report for: dem::records::Particle::getCentre(tarch::la::Vector<3, double> *, const dem::records::Particle *) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (dem::records::Particle::getCentre(tarch::la::Vector<3, double> *, const dem::records::Particle *) const) ./dem/records/Particle.h(12625,2)

===========================================================================

Begin optimization report for: dem::records::Particle::getCentre(const dem::records::Particle *, int) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (dem::records::Particle::getCentre(const dem::records::Particle *, int) const) ./dem/records/Particle.h(12664,2)

===========================================================================

Begin optimization report for: dem::records::Particle::getCentreOfMass(tarch::la::Vector<3, double> *, const dem::records::Particle *) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (dem::records::Particle::getCentreOfMass(tarch::la::Vector<3, double> *, const dem::records::Particle *) const) ./dem/records/Particle.h(12709,2)

===========================================================================

Begin optimization report for: dem::records::Particle::getCentreOfMass(const dem::records::Particle *, int) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (dem::records::Particle::getCentreOfMass(const dem::records::Particle *, int) const) ./dem/records/Particle.h(12748,2)

===========================================================================

Begin optimization report for: dem::records::Particle::getReferencialAngular(tarch::la::Vector<3, double> *, const dem::records::Particle *) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (dem::records::Particle::getReferencialAngular(tarch::la::Vector<3, double> *, const dem::records::Particle *) const) ./dem/records/Particle.h(12793,2)

===========================================================================

Begin optimization report for: dem::records::Particle::getReferencialAngular(const dem::records::Particle *, int) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (dem::records::Particle::getReferencialAngular(const dem::records::Particle *, int) const) ./dem/records/Particle.h(12832,2)

===========================================================================

Begin optimization report for: dem::records::Particle::getReferentialCentreOfMass(tarch::la::Vector<3, double> *, const dem::records::Particle *) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (dem::records::Particle::getReferentialCentreOfMass(tarch::la::Vector<3, double> *, const dem::records::Particle *) const) ./dem/records/Particle.h(12877,2)

===========================================================================

Begin optimization report for: dem::records::Particle::getReferentialCentreOfMass(const dem::records::Particle *, int) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (dem::records::Particle::getReferentialCentreOfMass(const dem::records::Particle *, int) const) ./dem/records/Particle.h(12916,2)

===========================================================================

Begin optimization report for: dem::records::Particle::getVelocity(tarch::la::Vector<3, double> *, const dem::records::Particle *) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (dem::records::Particle::getVelocity(tarch::la::Vector<3, double> *, const dem::records::Particle *) const) ./dem/records/Particle.h(12961,2)

===========================================================================

Begin optimization report for: dem::records::Particle::getVelocity(const dem::records::Particle *, int) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (dem::records::Particle::getVelocity(const dem::records::Particle *, int) const) ./dem/records/Particle.h(13000,2)

===========================================================================

Begin optimization report for: dem::records::Particle::getAngular(tarch::la::Vector<3, double> *, const dem::records::Particle *) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (dem::records::Particle::getAngular(tarch::la::Vector<3, double> *, const dem::records::Particle *) const) ./dem/records/Particle.h(13045,2)

===========================================================================

Begin optimization report for: dem::records::Particle::getAngular(const dem::records::Particle *, int) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (dem::records::Particle::getAngular(const dem::records::Particle *, int) const) ./dem/records/Particle.h(13084,2)

===========================================================================

Begin optimization report for: dem::records::Particle::getDiameter(const dem::records::Particle *) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (dem::records::Particle::getDiameter(const dem::records::Particle *) const) ./dem/records/Particle.h(13110,2)

===========================================================================

Begin optimization report for: dem::records::Particle::getInfluenceRadius(const dem::records::Particle *) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (dem::records::Particle::getInfluenceRadius(const dem::records::Particle *) const) ./dem/records/Particle.h(13130,2)

===========================================================================

Begin optimization report for: dem::records::Particle::getEpsilon(const dem::records::Particle *) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (dem::records::Particle::getEpsilon(const dem::records::Particle *) const) ./dem/records/Particle.h(13150,2)

===========================================================================

Begin optimization report for: dem::records::Particle::getMass(const dem::records::Particle *) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (dem::records::Particle::getMass(const dem::records::Particle *) const) ./dem/records/Particle.h(13170,2)

===========================================================================

Begin optimization report for: dem::records::Particle::getHMin(const dem::records::Particle *) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (dem::records::Particle::getHMin(const dem::records::Particle *) const) ./dem/records/Particle.h(13190,2)

===========================================================================

Begin optimization report for: dem::records::Particle::getGlobalParticleNumber(const dem::records::Particle *) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (dem::records::Particle::getGlobalParticleNumber(const dem::records::Particle *) const) ./dem/records/Particle.h(13210,2)

===========================================================================

Begin optimization report for: dem::records::Particle::getNumberOfTriangles(const dem::records::Particle *) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (dem::records::Particle::getNumberOfTriangles(const dem::records::Particle *) const) ./dem/records/Particle.h(13230,2)

===========================================================================

Begin optimization report for: dem::records::Particle::getMaterial(const dem::records::Particle *) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (dem::records::Particle::getMaterial(const dem::records::Particle *) const) ./dem/records/Particle.h(13250,2)

===========================================================================

Begin optimization report for: dem::records::Particle::toString(std::string *, const dem::records::Particle *) const

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (dem::records::Particle::toString(std::string *, const dem::records::Particle *) const) [95/166=57.2%] dem/records/Particle.cpp(3108,54)
  -> INLINE (MANUAL): (3109,20) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::~basic_ostringstream(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *const) (isz = 23) (sz = 28)
    -> INLINE (MANUAL): /usr/include/c++/6/sstream:(576,7) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::~basic_ostringstream(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *, const long *const *) (isz = 53) (sz = 60)
      -> INLINE (MANUAL): (577,9) std::basic_ios<char, std::char_traits<char>>::~basic_ios(std::basic_ios<char, std::char_traits<char>> *const) (isz = 0) (sz = 5)
        -> INLINE (MANUAL): /usr/include/c++/6/bits/basic_ios.h:(282,7) std::basic_ios<char, std::char_traits<char>>::~basic_ios(std::basic_ios<char, std::char_traits<char>> *) (isz = 9) (sz = 14)
          -> EXTERN: (282,20) __cxa_call_unexpected
          -> EXTERN: (282,22) std::ios_base::~ios_base(std::ios_base *const)
      -> INLINE (MANUAL): (577,9) std::basic_ostream<char, std::char_traits<char>>::~basic_ostream(std::basic_ostream<char, std::char_traits<char>> *, const long *const *) (isz = 23) (sz = 30)
        -> INLINE (MANUAL): /usr/include/c++/6/ostream:(93,26) std::basic_ios<char, std::char_traits<char>>::~basic_ios(std::basic_ios<char, std::char_traits<char>> *const) (isz = 0) (sz = 5)
          -> INLINE (MANUAL): /usr/include/c++/6/bits/basic_ios.h:(282,7) std::basic_ios<char, std::char_traits<char>>::~basic_ios(std::basic_ios<char, std::char_traits<char>> *) (isz = 9) (sz = 14)
            -> EXTERN: (282,20) __cxa_call_unexpected
            -> EXTERN: (282,22) std::ios_base::~ios_base(std::ios_base *const)
      -> (577,9) std::basic_stringbuf<char, std::char_traits<char>, std::allocator<char>>::~basic_stringbuf(std::basic_stringbuf<char, std::char_traits<char>, std::allocator<char>> *) (isz = 22) (sz = 27)
         [[ Callee not marked with inlining pragma  <1>]]
  -> INLINE (MANUAL): (3109,20) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::basic_ostringstream(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *const, std::ios_base::openmode) (isz = 1) (sz = 8)
    -> INLINE (MANUAL): /usr/include/c++/6/sstream:(547,7) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::basic_ostringstream(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *, const long *const *, std::ios_base::openmode) (isz = 77) (sz = 86)
      -> INLINE (MANUAL): (547,7) std::basic_ios<char, std::char_traits<char>>::~basic_ios(std::basic_ios<char, std::char_traits<char>> *const) (isz = 0) (sz = 5)
        -> INLINE (MANUAL): /usr/include/c++/6/bits/basic_ios.h:(282,7) std::basic_ios<char, std::char_traits<char>>::~basic_ios(std::basic_ios<char, std::char_traits<char>> *) (isz = 9) (sz = 14)
          -> EXTERN: (282,20) __cxa_call_unexpected
          -> EXTERN: (282,22) std::ios_base::~ios_base(std::ios_base *const)
      -> INLINE (MANUAL): (547,7) std::basic_ostream<char, std::char_traits<char>>::~basic_ostream(std::basic_ostream<char, std::char_traits<char>> *, const long *const *) (isz = 23) (sz = 30)
        -> INLINE (MANUAL): /usr/include/c++/6/ostream:(93,26) std::basic_ios<char, std::char_traits<char>>::~basic_ios(std::basic_ios<char, std::char_traits<char>> *const) (isz = 0) (sz = 5)
          -> INLINE (MANUAL): /usr/include/c++/6/bits/basic_ios.h:(282,7) std::basic_ios<char, std::char_traits<char>>::~basic_ios(std::basic_ios<char, std::char_traits<char>> *) (isz = 9) (sz = 14)
            -> EXTERN: (282,20) __cxa_call_unexpected
            -> EXTERN: (282,22) std::ios_base::~ios_base(std::ios_base *const)
      -> INLINE (MANUAL): (547,7) std::basic_ostream<char, std::char_traits<char>>::basic_ostream(std::basic_ostream<char, std::char_traits<char>> *, const long *const *) (isz = 44) (sz = 51)
        -> INLINE (MANUAL): /usr/include/c++/6/ostream:(384,7) std::basic_ios<char, std::char_traits<char>>::basic_ios(std::basic_ios<char, std::char_traits<char>> *const) (isz = 0) (sz = 5)
          -> INLINE (MANUAL): /usr/include/c++/6/bits/basic_ios.h:(460,7) std::basic_ios<char, std::char_traits<char>>::basic_ios(std::basic_ios<char, std::char_traits<char>> *) (isz = 18) (sz = 23)
            -> EXTERN: (460,7) std::ios_base::ios_base(std::ios_base *const)
        -> INLINE (MANUAL): /usr/include/c++/6/ostream:(384,7) std::basic_ios<char, std::char_traits<char>>::~basic_ios(std::basic_ios<char, std::char_traits<char>> *const) (isz = 0) (sz = 5)
          -> INLINE (MANUAL): /usr/include/c++/6/bits/basic_ios.h:(282,7) std::basic_ios<char, std::char_traits<char>>::~basic_ios(std::basic_ios<char, std::char_traits<char>> *) (isz = 9) (sz = 14)
            -> EXTERN: (282,20) __cxa_call_unexpected
            -> EXTERN: (282,22) std::ios_base::~ios_base(std::ios_base *const)
        -> EXTERN: /usr/include/c++/6/ostream:(385,15) std::basic_ios<char, std::char_traits<char>>::init(std::basic_ios<char, std::char_traits<char>> *, std::basic_streambuf<char, std::char_traits<char>> *)
      -> INLINE (MANUAL): (547,7) std::basic_ios<char, std::char_traits<char>>::basic_ios(std::basic_ios<char, std::char_traits<char>> *const) (isz = 0) (sz = 5)
        -> INLINE (MANUAL): /usr/include/c++/6/bits/basic_ios.h:(460,7) std::basic_ios<char, std::char_traits<char>>::basic_ios(std::basic_ios<char, std::char_traits<char>> *) (isz = 18) (sz = 23)
          -> EXTERN: (460,7) std::ios_base::ios_base(std::ios_base *const)
      -> INLINE (MANUAL): (548,47) std::basic_stringbuf<char, std::char_traits<char>, std::allocator<char>>::basic_stringbuf(std::basic_stringbuf<char, std::char_traits<char>, std::allocator<char>> *, std::ios_base::openmode) (isz = 9) (sz = 16)
        -> INLINE (MANUAL): (100,7) std::basic_streambuf<char, std::char_traits<char>>::basic_streambuf(std::basic_streambuf<char, std::char_traits<char>> *const) (isz = 0) (sz = 5)
          -> INLINE (MANUAL): /usr/include/c++/6/streambuf:(463,7) std::basic_streambuf<char, std::char_traits<char>>::basic_streambuf(std::basic_streambuf<char, std::char_traits<char>> *) (isz = 18) (sz = 23)
            -> EXTERN: (463,7) std::locale::locale(std::locale *)
        -> INLINE (MANUAL): (100,7) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *) (isz = 13) (sz = 18)
          -> INLINE (MANUAL): /usr/include/c++/6/bits/basic_string.h:(2959,21) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_S_empty_rep() (isz = 2) (sz = 7)
            -> INLINE (MANUAL): (2947,16) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep::_S_empty_rep() (isz = 0) (sz = 4)
          -> INLINE (MANUAL): /usr/include/c++/6/bits/basic_string.h:(2959,36) std::allocator<char>::allocator(std::allocator<char> *) (isz = 5) (sz = 10)
            -> DELETED: /usr/include/c++/6/bits/allocator.h:(118,7) __gnu_cxx::new_allocator<char>::new_allocator(__gnu_cxx::new_allocator<char> *const) (isz = 0) (sz = 5)
            -> EXTERN: /usr/include/c++/6/bits/allocator.h:(118,27) __cxa_call_unexpected
          -> INLINE (MANUAL): /usr/include/c++/6/bits/basic_string.h:(2959,36) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep::_M_refdata(std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep *) (isz = 0) (sz = 7)
          -> INLINE (MANUAL): /usr/include/c++/6/bits/basic_string.h:(2959,50) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Alloc_hider::_Alloc_hider(std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Alloc_hider *, char *, const std::allocator<char> &) (isz = 1) (sz = 10)
            -> INLINE (MANUAL): (2791,11) std::allocator<char>::allocator(std::allocator<char> *const, const std::allocator<char> &) (isz = 0) (sz = 7)
              -> INLINE (MANUAL): /usr/include/c++/6/bits/allocator.h:(120,7) std::allocator<char>::allocator(std::allocator<char> *, const std::allocator<char> &) (isz = 5) (sz = 12)
                -> DELETED: (121,31) __gnu_cxx::new_allocator<char>::new_allocator(__gnu_cxx::new_allocator<char> *const, const __gnu_cxx::new_allocator<char> &) (isz = 0) (sz = 7)
                -> EXTERN: (121,36) __cxa_call_unexpected
      -> (548,47) std::basic_stringbuf<char, std::char_traits<char>, std::allocator<char>>::~basic_stringbuf(std::basic_stringbuf<char, std::char_traits<char>, std::allocator<char>> *) (isz = 22) (sz = 27)
         [[ Callee not marked with inlining pragma  <1>]]
      -> INLINE (MANUAL): (548,47) std::operator|(std::_Ios_Openmode, std::_Ios_Openmode) (isz = 0) (sz = 7)
      -> EXTERN: (549,15) std::basic_ios<char, std::char_traits<char>>::init(std::basic_ios<char, std::char_traits<char>> *, std::basic_streambuf<char, std::char_traits<char>> *)
  -> INLINE: (3110,1) dem::records::Particle::toString(const dem::records::Particle *, std::ostream &) const (isz = 568) (sz = 575)
    -> (3115,5) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
       [[ Called routine is noinline  <2>]]
    -> (3116,5) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
       [[ Called routine is noinline  <2>]]
    -> EXTERN: (3118,11) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, int)
    -> INLINE (MANUAL): (3118,14) dem::records::Particle::getVertices(const dem::records::Particle *, int) const (isz = 4) (sz = 13)
      -> INLINE (MANUAL): ./dem/records/Particle.h:(12331,96) tarch::la::Vector<6, int>::operator[](const tarch::la::Vector<6, int> *, int) const (isz = 1) (sz = 9)
    -> (3118,29) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
       [[ Called routine is noinline  <2>]]
    -> EXTERN: (3120,8) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, int)
    -> INLINE (MANUAL): (3120,11) dem::records::Particle::getVertices(const dem::records::Particle *, int) const (isz = 4) (sz = 13)
      -> INLINE (MANUAL): ./dem/records/Particle.h:(12331,96) tarch::la::Vector<6, int>::operator[](const tarch::la::Vector<6, int> *, int) const (isz = 1) (sz = 9)
    -> (3120,28) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
       [[ Called routine is noinline  <2>]]
    -> (3121,5) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
       [[ Called routine is noinline  <2>]]
    -> (3122,5) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
       [[ Called routine is noinline  <2>]]
    -> (3124,11) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) (isz = 1) (sz = 10)
       [[ Called routine is noinline  <2>]]
    -> INLINE (MANUAL): (3124,14) dem::records::Particle::getOrientation(const dem::records::Particle *, int) const (isz = 4) (sz = 13)
      -> INLINE (MANUAL): ./dem/records/Particle.h:(12415,99) tarch::la::Vector<9, double>::operator[](const tarch::la::Vector<9, double> *, int) const (isz = 1) (sz = 9)
    -> (3124,32) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
       [[ Called routine is noinline  <2>]]
    -> (3126,8) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) (isz = 1) (sz = 10)
       [[ Called routine is noinline  <2>]]
    -> INLINE (MANUAL): (3126,11) dem::records::Particle::getOrientation(const dem::records::Particle *, int) const (isz = 4) (sz = 13)
      -> INLINE (MANUAL): ./dem/records/Particle.h:(12415,99) tarch::la::Vector<9, double>::operator[](const tarch::la::Vector<9, double> *, int) const (isz = 1) (sz = 9)
    -> (3126,31) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
       [[ Called routine is noinline  <2>]]
    -> (3127,5) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
       [[ Called routine is noinline  <2>]]
    -> (3128,5) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
       [[ Called routine is noinline  <2>]]
    -> (3130,11) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) (isz = 1) (sz = 10)
       [[ Called routine is noinline  <2>]]
    -> INLINE (MANUAL): (3130,14) dem::records::Particle::getInertia(const dem::records::Particle *, int) const (isz = 4) (sz = 13)
      -> INLINE (MANUAL): ./dem/records/Particle.h:(12499,95) tarch::la::Vector<9, double>::operator[](const tarch::la::Vector<9, double> *, int) const (isz = 1) (sz = 9)
    -> (3130,28) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
       [[ Called routine is noinline  <2>]]
    -> (3132,8) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) (isz = 1) (sz = 10)
       [[ Called routine is noinline  <2>]]
    -> INLINE (MANUAL): (3132,11) dem::records::Particle::getInertia(const dem::records::Particle *, int) const (isz = 4) (sz = 13)
      -> INLINE (MANUAL): ./dem/records/Particle.h:(12499,95) tarch::la::Vector<9, double>::operator[](const tarch::la::Vector<9, double> *, int) const (isz = 1) (sz = 9)
    -> (3132,27) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
       [[ Called routine is noinline  <2>]]
    -> (3133,5) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
       [[ Called routine is noinline  <2>]]
    -> (3134,5) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
       [[ Called routine is noinline  <2>]]
    -> (3136,11) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) (isz = 1) (sz = 10)
       [[ Called routine is noinline  <2>]]
    -> INLINE (MANUAL): (3136,14) dem::records::Particle::getInverse(const dem::records::Particle *, int) const (isz = 4) (sz = 13)
      -> INLINE (MANUAL): ./dem/records/Particle.h:(12583,95) tarch::la::Vector<9, double>::operator[](const tarch::la::Vector<9, double> *, int) const (isz = 1) (sz = 9)
    -> (3136,28) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
       [[ Called routine is noinline  <2>]]
    -> (3138,8) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) (isz = 1) (sz = 10)
       [[ Called routine is noinline  <2>]]
    -> INLINE (MANUAL): (3138,11) dem::records::Particle::getInverse(const dem::records::Particle *, int) const (isz = 4) (sz = 13)
      -> INLINE (MANUAL): ./dem/records/Particle.h:(12583,95) tarch::la::Vector<9, double>::operator[](const tarch::la::Vector<9, double> *, int) const (isz = 1) (sz = 9)
    -> (3138,27) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
       [[ Called routine is noinline  <2>]]
    -> (3139,5) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
       [[ Called routine is noinline  <2>]]
    -> (3140,5) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
       [[ Called routine is noinline  <2>]]
    -> (3142,11) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) (isz = 1) (sz = 10)
       [[ Called routine is noinline  <2>]]
    -> INLINE (MANUAL): (3142,14) dem::records::Particle::getCentre(const dem::records::Particle *, int) const (isz = 4) (sz = 13)
      -> INLINE (MANUAL): ./dem/records/Particle.h:(12667,94) tarch::la::Vector<3, double>::operator[](const tarch::la::Vector<3, double> *, int) const (isz = 1) (sz = 9)
    -> (3142,27) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
       [[ Called routine is noinline  <2>]]
    -> (3144,8) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) (isz = 1) (sz = 10)
       [[ Called routine is noinline  <2>]]
    -> INLINE (MANUAL): (3144,11) dem::records::Particle::getCentre(const dem::records::Particle *, int) const (isz = 4) (sz = 13)
      -> INLINE (MANUAL): ./dem/records/Particle.h:(12667,94) tarch::la::Vector<3, double>::operator[](const tarch::la::Vector<3, double> *, int) const (isz = 1) (sz = 9)
    -> (3144,35) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
       [[ Called routine is noinline  <2>]]
    -> (3145,5) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
       [[ Called routine is noinline  <2>]]
    -> (3146,5) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
       [[ Called routine is noinline  <2>]]
    -> (3148,11) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) (isz = 1) (sz = 10)
       [[ Called routine is noinline  <2>]]
    -> INLINE (MANUAL): (3148,14) dem::records::Particle::getCentreOfMass(const dem::records::Particle *, int) const (isz = 4) (sz = 13)
      -> INLINE (MANUAL): ./dem/records/Particle.h:(12751,100) tarch::la::Vector<3, double>::operator[](const tarch::la::Vector<3, double> *, int) const (isz = 1) (sz = 9)
    -> (3148,33) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
       [[ Called routine is noinline  <2>]]
    -> (3150,8) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) (isz = 1) (sz = 10)
       [[ Called routine is noinline  <2>]]
    -> INLINE (MANUAL): (3150,11) dem::records::Particle::getCentreOfMass(const dem::records::Particle *, int) const (isz = 4) (sz = 13)
      -> INLINE (MANUAL): ./dem/records/Particle.h:(12751,100) tarch::la::Vector<3, double>::operator[](const tarch::la::Vector<3, double> *, int) const (isz = 1) (sz = 9)
    -> (3150,41) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
       [[ Called routine is noinline  <2>]]
    -> (3151,5) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
       [[ Called routine is noinline  <2>]]
    -> (3152,5) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
       [[ Called routine is noinline  <2>]]
    -> (3154,11) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) (isz = 1) (sz = 10)
       [[ Called routine is noinline  <2>]]
    -> INLINE (MANUAL): (3154,14) dem::records::Particle::getReferencialAngular(const dem::records::Particle *, int) const (isz = 4) (sz = 13)
      -> INLINE (MANUAL): ./dem/records/Particle.h:(12835,106) tarch::la::Vector<3, double>::operator[](const tarch::la::Vector<3, double> *, int) const (isz = 1) (sz = 9)
    -> (3154,39) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
       [[ Called routine is noinline  <2>]]
    -> (3156,8) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) (isz = 1) (sz = 10)
       [[ Called routine is noinline  <2>]]
    -> INLINE (MANUAL): (3156,11) dem::records::Particle::getReferencialAngular(const dem::records::Particle *, int) const (isz = 4) (sz = 13)
      -> INLINE (MANUAL): ./dem/records/Particle.h:(12835,106) tarch::la::Vector<3, double>::operator[](const tarch::la::Vector<3, double> *, int) const (isz = 1) (sz = 9)
    -> (3156,47) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
       [[ Called routine is noinline  <2>]]
    -> (3157,5) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
       [[ Called routine is noinline  <2>]]
    -> (3158,5) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
       [[ Called routine is noinline  <2>]]
    -> (3160,11) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) (isz = 1) (sz = 10)
       [[ Called routine is noinline  <2>]]
    -> INLINE (MANUAL): (3160,14) dem::records::Particle::getReferentialCentreOfMass(const dem::records::Particle *, int) const (isz = 4) (sz = 13)
      -> INLINE (MANUAL): ./dem/records/Particle.h:(12919,111) tarch::la::Vector<3, double>::operator[](const tarch::la::Vector<3, double> *, int) const (isz = 1) (sz = 9)
    -> (3160,44) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
       [[ Called routine is noinline  <2>]]
    -> (3162,8) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) (isz = 1) (sz = 10)
       [[ Called routine is noinline  <2>]]
    -> INLINE (MANUAL): (3162,11) dem::records::Particle::getReferentialCentreOfMass(const dem::records::Particle *, int) const (isz = 4) (sz = 13)
      -> INLINE (MANUAL): ./dem/records/Particle.h:(12919,111) tarch::la::Vector<3, double>::operator[](const tarch::la::Vector<3, double> *, int) const (isz = 1) (sz = 9)
    -> (3162,52) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
       [[ Called routine is noinline  <2>]]
    -> (3163,5) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
       [[ Called routine is noinline  <2>]]
    -> (3164,5) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
       [[ Called routine is noinline  <2>]]
    -> (3166,11) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) (isz = 1) (sz = 10)
       [[ Called routine is noinline  <2>]]
    -> INLINE (MANUAL): (3166,14) dem::records::Particle::getVelocity(const dem::records::Particle *, int) const (isz = 4) (sz = 13)
      -> INLINE (MANUAL): ./dem/records/Particle.h:(13003,96) tarch::la::Vector<3, double>::operator[](const tarch::la::Vector<3, double> *, int) const (isz = 1) (sz = 9)
    -> (3166,29) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
       [[ Called routine is noinline  <2>]]
    -> (3168,8) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) (isz = 1) (sz = 10)
       [[ Called routine is noinline  <2>]]
    -> INLINE (MANUAL): (3168,11) dem::records::Particle::getVelocity(const dem::records::Particle *, int) const (isz = 4) (sz = 13)
      -> INLINE (MANUAL): ./dem/records/Particle.h:(13003,96) tarch::la::Vector<3, double>::operator[](const tarch::la::Vector<3, double> *, int) const (isz = 1) (sz = 9)
    -> (3168,37) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
       [[ Called routine is noinline  <2>]]
    -> (3169,5) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
       [[ Called routine is noinline  <2>]]
    -> (3170,5) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
       [[ Called routine is noinline  <2>]]
    -> (3172,11) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) (isz = 1) (sz = 10)
       [[ Called routine is noinline  <2>]]
    -> INLINE (MANUAL): (3172,14) dem::records::Particle::getAngular(const dem::records::Particle *, int) const (isz = 4) (sz = 13)
      -> INLINE (MANUAL): ./dem/records/Particle.h:(13087,95) tarch::la::Vector<3, double>::operator[](const tarch::la::Vector<3, double> *, int) const (isz = 1) (sz = 9)
    -> (3172,28) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
       [[ Called routine is noinline  <2>]]
    -> (3174,8) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) (isz = 1) (sz = 10)
       [[ Called routine is noinline  <2>]]
    -> INLINE (MANUAL): (3174,11) dem::records::Particle::getAngular(const dem::records::Particle *, int) const (isz = 4) (sz = 13)
      -> INLINE (MANUAL): ./dem/records/Particle.h:(13087,95) tarch::la::Vector<3, double>::operator[](const tarch::la::Vector<3, double> *, int) const (isz = 1) (sz = 9)
    -> (3174,36) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
       [[ Called routine is noinline  <2>]]
    -> (3175,5) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
       [[ Called routine is noinline  <2>]]
    -> (3176,5) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
       [[ Called routine is noinline  <2>]]
    -> (3176,20) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) (isz = 1) (sz = 10)
       [[ Called routine is noinline  <2>]]
    -> INLINE (MANUAL): (3176,23) dem::records::Particle::getDiameter(const dem::records::Particle *) const (isz = 0) (sz = 6)
    -> (3177,5) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
       [[ Called routine is noinline  <2>]]
    -> (3178,5) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
       [[ Called routine is noinline  <2>]]
    -> (3178,27) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) (isz = 1) (sz = 10)
       [[ Called routine is noinline  <2>]]
    -> INLINE (MANUAL): (3178,30) dem::records::Particle::getInfluenceRadius(const dem::records::Particle *) const (isz = 0) (sz = 6)
    -> (3179,5) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
       [[ Called routine is noinline  <2>]]
    -> (3180,5) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
       [[ Called routine is noinline  <2>]]
    -> (3180,19) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) (isz = 1) (sz = 10)
       [[ Called routine is noinline  <2>]]
    -> INLINE (MANUAL): (3180,22) dem::records::Particle::getEpsilon(const dem::records::Particle *) const (isz = 0) (sz = 6)
    -> (3181,5) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
       [[ Called routine is noinline  <2>]]
    -> (3182,5) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
       [[ Called routine is noinline  <2>]]
    -> (3182,16) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) (isz = 1) (sz = 10)
       [[ Called routine is noinline  <2>]]
    -> INLINE (MANUAL): (3182,19) dem::records::Particle::getMass(const dem::records::Particle *) const (isz = 0) (sz = 6)
    -> (3183,5) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
       [[ Called routine is noinline  <2>]]
    -> (3184,5) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
       [[ Called routine is noinline  <2>]]
    -> (3184,16) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) (isz = 1) (sz = 10)
       [[ Called routine is noinline  <2>]]
    -> INLINE (MANUAL): (3184,19) dem::records::Particle::getHMin(const dem::records::Particle *) const (isz = 0) (sz = 6)
    -> (3185,5) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
       [[ Called routine is noinline  <2>]]
    -> (3186,5) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
       [[ Called routine is noinline  <2>]]
    -> EXTERN: (3186,32) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, int)
    -> INLINE (MANUAL): (3186,35) dem::records::Particle::getGlobalParticleNumber(const dem::records::Particle *) const (isz = 0) (sz = 6)
    -> (3187,5) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
       [[ Called routine is noinline  <2>]]
    -> (3188,5) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
       [[ Called routine is noinline  <2>]]
    -> EXTERN: (3188,29) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, int)
    -> INLINE (MANUAL): (3188,32) dem::records::Particle::getNumberOfTriangles(const dem::records::Particle *) const (isz = 0) (sz = 6)
    -> (3189,5) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
       [[ Called routine is noinline  <2>]]
    -> (3190,5) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
       [[ Called routine is noinline  <2>]]
    -> EXTERN: (3190,20) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, int)
    -> INLINE (MANUAL): (3190,23) dem::records::Particle::getMaterial(const dem::records::Particle *) const (isz = 0) (sz = 6)
    -> (3191,5) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
       [[ Called routine is noinline  <2>]]
  -> INLINE (MANUAL): (3111,1) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::~basic_ostringstream(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *const) (isz = 23) (sz = 28)
    -> INLINE (MANUAL): /usr/include/c++/6/sstream:(576,7) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::~basic_ostringstream(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *, const long *const *) (isz = 53) (sz = 60)
      -> INLINE (MANUAL): (577,9) std::basic_ios<char, std::char_traits<char>>::~basic_ios(std::basic_ios<char, std::char_traits<char>> *const) (isz = 0) (sz = 5)
        -> INLINE (MANUAL): /usr/include/c++/6/bits/basic_ios.h:(282,7) std::basic_ios<char, std::char_traits<char>>::~basic_ios(std::basic_ios<char, std::char_traits<char>> *) (isz = 9) (sz = 14)
          -> EXTERN: (282,20) __cxa_call_unexpected
          -> EXTERN: (282,22) std::ios_base::~ios_base(std::ios_base *const)
      -> INLINE (MANUAL): (577,9) std::basic_ostream<char, std::char_traits<char>>::~basic_ostream(std::basic_ostream<char, std::char_traits<char>> *, const long *const *) (isz = 23) (sz = 30)
        -> INLINE (MANUAL): /usr/include/c++/6/ostream:(93,26) std::basic_ios<char, std::char_traits<char>>::~basic_ios(std::basic_ios<char, std::char_traits<char>> *const) (isz = 0) (sz = 5)
          -> INLINE (MANUAL): /usr/include/c++/6/bits/basic_ios.h:(282,7) std::basic_ios<char, std::char_traits<char>>::~basic_ios(std::basic_ios<char, std::char_traits<char>> *) (isz = 9) (sz = 14)
            -> EXTERN: (282,20) __cxa_call_unexpected
            -> EXTERN: (282,22) std::ios_base::~ios_base(std::ios_base *const)
      -> INLINE (MANUAL): (577,9) std::basic_stringbuf<char, std::char_traits<char>, std::allocator<char>>::~basic_stringbuf(std::basic_stringbuf<char, std::char_traits<char>, std::allocator<char>> *) (isz = 22) (sz = 27)
        -> INLINE (MANUAL): /usr/include/c++/6/iosfwd:(96,11) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *) (isz = 27) (sz = 32)
          -> INLINE (MANUAL): /usr/include/c++/6/bits/basic_string.h:(3062,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_M_rep(const std::basic_string<char, std::char_traits<char>, std::allocator<char>> *) const (isz = 3) (sz = 10)
            -> INLINE (MANUAL): (2817,44) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_M_data(const std::basic_string<char, std::char_traits<char>, std::allocator<char>> *) const (isz = 0) (sz = 7)
          -> INLINE (MANUAL): /usr/include/c++/6/bits/basic_string.h:(3062,19) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep::_M_dispose(std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep *, const std::allocator<char> &) (isz = 37) (sz = 44)
            -> EXTERN: (2746,2) __cxa_call_unexpected
            -> INLINE (MANUAL): (2748,34) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep::_S_empty_rep() (isz = 0) (sz = 4)
            -> INLINE (MANUAL): (2761,12) __gnu_cxx::__exchange_and_add_dispatch(_Atomic_word *, int) (isz = 18) (sz = 28)
              -> INLINE (MANUAL): /usr/include/c++/6/ext/atomicity.h:(81,9) __gthread_active_p() (isz = 1) (sz = 5)
              -> INLINE (MANUAL): /usr/include/c++/6/ext/atomicity.h:(82,14) __gnu_cxx::__exchange_and_add(volatile _Atomic_word *, int) (isz = 4) (sz = 13)
                -> EXTERN: (49,12) __atomic_fetch_add_4(volatile void *, unsigned int, int)
              -> INLINE (MANUAL): /usr/include/c++/6/ext/atomicity.h:(84,14) __gnu_cxx::__exchange_and_add_single(_Atomic_word *, int) (isz = 3) (sz = 12)
            -> EXTERN: (2765,5) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep::_M_destroy(std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep *, const std::allocator<char> &)
          -> INLINE (MANUAL): /usr/include/c++/6/bits/basic_string.h:(3062,36) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::get_allocator(std::basic_string<char, std::char_traits<char>, std::allocator<char>>::allocator_type *, const std::basic_string<char, std::char_traits<char>, std::allocator<char>> *) const (isz = 2) (sz = 9)
            -> INLINE (MANUAL): (4369,16) std::allocator<char>::allocator(std::allocator<char> *, const std::allocator<char> &) (isz = 5) (sz = 12)
              -> DELETED: /usr/include/c++/6/bits/allocator.h:(121,31) __gnu_cxx::new_allocator<char>::new_allocator(__gnu_cxx::new_allocator<char> *const, const __gnu_cxx::new_allocator<char> &) (isz = 0) (sz = 7)
              -> EXTERN: /usr/include/c++/6/bits/allocator.h:(121,36) __cxa_call_unexpected
        -> INLINE (MANUAL): /usr/include/c++/6/iosfwd:(96,11) std::basic_streambuf<char, std::char_traits<char>>::~basic_streambuf(std::basic_streambuf<char, std::char_traits<char>> *const) (isz = 0) (sz = 5)
          -> INLINE (MANUAL): /usr/include/c++/6/streambuf:(197,7) std::basic_streambuf<char, std::char_traits<char>>::~basic_streambuf(std::basic_streambuf<char, std::char_traits<char>> *) (isz = 6) (sz = 11)
            -> EXTERN: (198,9) std::locale::~locale(std::locale *)
  -> INLINE (MANUAL): (3111,18) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::str(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::__string_type *, const std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *) const (isz = 190) (sz = 197)
    -> INLINE (MANUAL): /usr/include/c++/6/sstream:(625,29) std::basic_stringbuf<char, std::char_traits<char>, std::allocator<char>>::str(std::basic_stringbuf<char, std::char_traits<char>, std::allocator<char>>::__string_type *, const std::basic_stringbuf<char, std::char_traits<char>, std::allocator<char>> *) const (isz = 280) (sz = 287)
      -> INLINE (MANUAL): (168,16) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *) (isz = 27) (sz = 32)
        -> INLINE (MANUAL): /usr/include/c++/6/bits/basic_string.h:(3062,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_M_rep(const std::basic_string<char, std::char_traits<char>, std::allocator<char>> *) const (isz = 3) (sz = 10)
          -> INLINE (MANUAL): (2817,44) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_M_data(const std::basic_string<char, std::char_traits<char>, std::allocator<char>> *) const (isz = 0) (sz = 7)
        -> INLINE (MANUAL): /usr/include/c++/6/bits/basic_string.h:(3062,19) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep::_M_dispose(std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep *, const std::allocator<char> &) (isz = 37) (sz = 44)
          -> EXTERN: (2746,2) __cxa_call_unexpected
          -> INLINE (MANUAL): (2748,34) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep::_S_empty_rep() (isz = 0) (sz = 4)
          -> (2761,12) __gnu_cxx::__exchange_and_add_dispatch(_Atomic_word *, int) (isz = 18) (sz = 28)
             [[ Callee not marked with inlining pragma  <1>]]
          -> EXTERN: (2765,5) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep::_M_destroy(std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep *, const std::allocator<char> &)
        -> INLINE (MANUAL): /usr/include/c++/6/bits/basic_string.h:(3062,36) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::get_allocator(std::basic_string<char, std::char_traits<char>, std::allocator<char>>::allocator_type *, const std::basic_string<char, std::char_traits<char>, std::allocator<char>> *) const (isz = 2) (sz = 9)
          -> INLINE (MANUAL): (4369,16) std::allocator<char>::allocator(std::allocator<char> *, const std::allocator<char> &) (isz = 5) (sz = 12)
            -> DELETED: /usr/include/c++/6/bits/allocator.h:(121,31) __gnu_cxx::new_allocator<char>::new_allocator(__gnu_cxx::new_allocator<char> *const, const __gnu_cxx::new_allocator<char> &) (isz = 0) (sz = 7)
            -> EXTERN: /usr/include/c++/6/bits/allocator.h:(121,36) __cxa_call_unexpected
      -> INLINE (MANUAL): (168,16) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *) (isz = 13) (sz = 18)
        -> INLINE (MANUAL): /usr/include/c++/6/bits/basic_string.h:(2959,21) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_S_empty_rep() (isz = 2) (sz = 7)
          -> INLINE (MANUAL): (2947,16) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep::_S_empty_rep() (isz = 0) (sz = 4)
        -> INLINE (MANUAL): /usr/include/c++/6/bits/basic_string.h:(2959,36) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep::_M_refdata(std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep *) (isz = 0) (sz = 7)
        -> INLINE (MANUAL): /usr/include/c++/6/bits/basic_string.h:(2959,36) std::allocator<char>::allocator(std::allocator<char> *) (isz = 5) (sz = 10)
          -> DELETED: /usr/include/c++/6/bits/allocator.h:(118,7) __gnu_cxx::new_allocator<char>::new_allocator(__gnu_cxx::new_allocator<char> *const) (isz = 0) (sz = 5)
          -> EXTERN: /usr/include/c++/6/bits/allocator.h:(118,27) __cxa_call_unexpected
        -> INLINE (MANUAL): /usr/include/c++/6/bits/basic_string.h:(2959,50) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Alloc_hider::_Alloc_hider(std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Alloc_hider *, char *, const std::allocator<char> &) (isz = 1) (sz = 10)
          -> INLINE (MANUAL): (2791,11) std::allocator<char>::allocator(std::allocator<char> *const, const std::allocator<char> &) (isz = 0) (sz = 7)
            -> INLINE (MANUAL): /usr/include/c++/6/bits/allocator.h:(120,7) std::allocator<char>::allocator(std::allocator<char> *, const std::allocator<char> &) (isz = 5) (sz = 12)
              -> DELETED: (121,31) __gnu_cxx::new_allocator<char>::new_allocator(__gnu_cxx::new_allocator<char> *const, const __gnu_cxx::new_allocator<char> &) (isz = 0) (sz = 7)
              -> EXTERN: (121,36) __cxa_call_unexpected
      -> INLINE (MANUAL): (169,12) std::basic_streambuf<char, std::char_traits<char>>::pptr(const std::basic_streambuf<char, std::char_traits<char>> *) const (isz = 0) (sz = 6)
      -> INLINE (MANUAL): (172,16) std::basic_streambuf<char, std::char_traits<char>>::pptr(const std::basic_streambuf<char, std::char_traits<char>> *) const (isz = 0) (sz = 6)
      -> INLINE (MANUAL): (172,31) std::basic_streambuf<char, std::char_traits<char>>::egptr(const std::basic_streambuf<char, std::char_traits<char>> *) const (isz = 0) (sz = 6)
      -> INLINE (MANUAL): (173,14) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *) (isz = 27) (sz = 32)
        -> INLINE (MANUAL): /usr/include/c++/6/bits/basic_string.h:(3062,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_M_rep(const std::basic_string<char, std::char_traits<char>, std::allocator<char>> *) const (isz = 3) (sz = 10)
          -> INLINE (MANUAL): (2817,44) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_M_data(const std::basic_string<char, std::char_traits<char>, std::allocator<char>> *) const (isz = 0) (sz = 7)
        -> INLINE (MANUAL): /usr/include/c++/6/bits/basic_string.h:(3062,19) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep::_M_dispose(std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep *, const std::allocator<char> &) (isz = 37) (sz = 44)
          -> EXTERN: (2746,2) __cxa_call_unexpected
          -> INLINE (MANUAL): (2748,34) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep::_S_empty_rep() (isz = 0) (sz = 4)
          -> INLINE (MANUAL): (2761,12) __gnu_cxx::__exchange_and_add_dispatch(_Atomic_word *, int) (isz = 18) (sz = 28)
            -> INLINE (MANUAL): /usr/include/c++/6/ext/atomicity.h:(81,9) __gthread_active_p() (isz = 1) (sz = 5)
            -> INLINE (MANUAL): /usr/include/c++/6/ext/atomicity.h:(82,14) __gnu_cxx::__exchange_and_add(volatile _Atomic_word *, int) (isz = 4) (sz = 13)
              -> EXTERN: (49,12) __atomic_fetch_add_4(volatile void *, unsigned int, int)
            -> INLINE (MANUAL): /usr/include/c++/6/ext/atomicity.h:(84,14) __gnu_cxx::__exchange_and_add_single(_Atomic_word *, int) (isz = 3) (sz = 12)
          -> EXTERN: (2765,5) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep::_M_destroy(std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep *, const std::allocator<char> &)
        -> INLINE (MANUAL): /usr/include/c++/6/bits/basic_string.h:(3062,36) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::get_allocator(std::basic_string<char, std::char_traits<char>, std::allocator<char>>::allocator_type *, const std::basic_string<char, std::char_traits<char>, std::allocator<char>> *) const (isz = 2) (sz = 9)
          -> INLINE (MANUAL): (4369,16) std::allocator<char>::allocator(std::allocator<char> *, const std::allocator<char> &) (isz = 5) (sz = 12)
            -> DELETED: /usr/include/c++/6/bits/allocator.h:(121,31) __gnu_cxx::new_allocator<char>::new_allocator(__gnu_cxx::new_allocator<char> *const, const __gnu_cxx::new_allocator<char> &) (isz = 0) (sz = 7)
            -> EXTERN: /usr/include/c++/6/bits/allocator.h:(121,36) __cxa_call_unexpected
      -> INLINE (MANUAL): (173,14) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::operator=(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *, std::basic_string<char, std::char_traits<char>, std::allocator<char>> &&) (isz = 0) (sz = 9)
        -> EXTERN: /usr/include/c++/6/bits/basic_string.h:(3107,8) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::swap(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *, std::basic_string<char, std::char_traits<char>, std::allocator<char>> &)
      -> INLINE (MANUAL): (173,36) std::basic_streambuf<char, std::char_traits<char>>::pbase(const std::basic_streambuf<char, std::char_traits<char>> *) const (isz = 0) (sz = 6)
      -> INLINE (MANUAL): (173,51) std::basic_streambuf<char, std::char_traits<char>>::pptr(const std::basic_streambuf<char, std::char_traits<char>> *) const (isz = 0) (sz = 6)
      -> INLINE (MANUAL): (173,51) std::allocator<char>::allocator(std::allocator<char> *) (isz = 5) (sz = 10)
        -> DELETED: /usr/include/c++/6/bits/allocator.h:(118,7) __gnu_cxx::new_allocator<char>::new_allocator(__gnu_cxx::new_allocator<char> *const) (isz = 0) (sz = 5)
        -> EXTERN: /usr/include/c++/6/bits/allocator.h:(118,27) __cxa_call_unexpected
      -> INLINE (MANUAL): (173,51) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *) (isz = 27) (sz = 32)
        -> INLINE (MANUAL): /usr/include/c++/6/bits/basic_string.h:(3062,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_M_rep(const std::basic_string<char, std::char_traits<char>, std::allocator<char>> *) const (isz = 3) (sz = 10)
          -> INLINE (MANUAL): (2817,44) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_M_data(const std::basic_string<char, std::char_traits<char>, std::allocator<char>> *) const (isz = 0) (sz = 7)
        -> INLINE (MANUAL): /usr/include/c++/6/bits/basic_string.h:(3062,19) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep::_M_dispose(std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep *, const std::allocator<char> &) (isz = 37) (sz = 44)
          -> EXTERN: (2746,2) __cxa_call_unexpected
          -> INLINE (MANUAL): (2748,34) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep::_S_empty_rep() (isz = 0) (sz = 4)
          -> (2761,12) __gnu_cxx::__exchange_and_add_dispatch(_Atomic_word *, int) (isz = 18) (sz = 28)
             [[ Callee not marked with inlining pragma  <1>]]
          -> EXTERN: (2765,5) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep::_M_destroy(std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep *, const std::allocator<char> &)
        -> INLINE (MANUAL): /usr/include/c++/6/bits/basic_string.h:(3062,36) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::get_allocator(std::basic_string<char, std::char_traits<char>, std::allocator<char>>::allocator_type *, const std::basic_string<char, std::char_traits<char>, std::allocator<char>> *) const (isz = 2) (sz = 9)
          -> INLINE (MANUAL): (4369,16) std::allocator<char>::allocator(std::allocator<char> *, const std::allocator<char> &) (isz = 5) (sz = 12)
            -> DELETED: /usr/include/c++/6/bits/allocator.h:(121,31) __gnu_cxx::new_allocator<char>::new_allocator(__gnu_cxx::new_allocator<char> *const, const __gnu_cxx::new_allocator<char> &) (isz = 0) (sz = 7)
            -> EXTERN: /usr/include/c++/6/bits/allocator.h:(121,36) __cxa_call_unexpected
      -> INLINE (MANUAL): (173,51) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::basic_string<char *>(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *, char *, char *, const std::allocator<char> &) (isz = 76) (sz = 87)
        -> INLINE (MANUAL): /usr/include/c++/6/bits/basic_string.tcc:(669,19) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_S_construct<char *>(char *, char *, const std::allocator<char> &) (isz = 70) (sz = 81)
          -> INLINE (MANUAL): /usr/include/c++/6/bits/basic_string.h:(4296,11) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_S_construct_aux<char *>(char *, char *, const std::allocator<char> &, std::__false_type) (isz = 68) (sz = 81)
            -> INLINE (MANUAL): (4275,18) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_S_construct<char *>(char *, char *, const std::allocator<char> &, std::forward_iterator_tag) (isz = 65) (sz = 79)
              -> INLINE (MANUAL): /usr/include/c++/6/bits/basic_string.tcc:(568,24) std::allocator<char>::allocator(std::allocator<char> *) (isz = 5) (sz = 10)
                -> DELETED: /usr/include/c++/6/bits/allocator.h:(118,7) __gnu_cxx::new_allocator<char>::new_allocator(__gnu_cxx::new_allocator<char> *const) (isz = 0) (sz = 5)
                -> EXTERN: /usr/include/c++/6/bits/allocator.h:(118,27) __cxa_call_unexpected
              -> DELETED: /usr/include/c++/6/bits/basic_string.tcc:(568,28) std::operator==<char>(const std::allocator<char> &, const std::allocator<char> &) (isz = 0) (sz = 6)
              -> INLINE (MANUAL): /usr/include/c++/6/bits/basic_string.tcc:(569,11) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_S_empty_rep() (isz = 2) (sz = 7)
                -> INLINE (MANUAL): /usr/include/c++/6/bits/basic_string.h:(2947,16) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep::_S_empty_rep() (isz = 0) (sz = 4)
              -> INLINE (MANUAL): /usr/include/c++/6/bits/basic_string.tcc:(569,26) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep::_M_refdata(std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep *) (isz = 0) (sz = 7)
              -> INLINE (MANUAL): /usr/include/c++/6/bits/basic_string.tcc:(572,6) __gnu_cxx::__is_null_pointer<char>(char *) (isz = 1) (sz = 7)
              -> EXTERN: /usr/include/c++/6/bits/basic_string.tcc:(573,4) std::__throw_logic_error(const char *)
              -> INLINE (MANUAL): /usr/include/c++/6/bits/basic_string.tcc:(575,50) std::distance<char *>(char *, char *) (isz = 6) (sz = 15)
                -> INLINE (MANUAL): /usr/include/c++/6/bits/stl_iterator_base_funcs.h:(138,14) std::__distance<char *>(char *, char *, std::random_access_iterator_tag) (isz = 0) (sz = 9)
                -> INLINE (MANUAL): /usr/include/c++/6/bits/stl_iterator_base_funcs.h:(139,34) std::__iterator_category<char *>(char *const &) (isz = 0) (sz = 5)
              -> EXTERN: /usr/include/c++/6/bits/basic_string.tcc:(578,14) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep::_S_create(std::basic_string<char, std::char_traits<char>, std::allocator<char>>::size_type, std::basic_string<char, std::char_traits<char>, std::allocator<char>>::size_type, const std::allocator<char> &)
              -> INLINE (MANUAL): /usr/include/c++/6/bits/basic_string.tcc:(580,6) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_S_copy_chars(char *, char *, char *) (isz = 7) (sz = 16)
                -> INLINE (MANUAL): /usr/include/c++/6/bits/basic_string.h:(2919,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_M_copy(char *, const char *, std::basic_string<char, std::char_traits<char>, std::allocator<char>>::size_type) (isz = 10) (sz = 19)
                  -> INLINE (MANUAL): (2875,4) std::char_traits<char>::assign(std::char_traits<char>::char_type &, const std::char_traits<char>::char_type &) (isz = 0) (sz = 7)
                  -> INLINE (MANUAL): (2877,4) std::char_traits<char>::copy(std::char_traits<char>::char_type *, const std::char_traits<char>::char_type *, std::size_t) (isz = 4) (sz = 16)
                    -> EXTERN: /usr/include/c++/6/bits/char_traits.h:(290,33) __builtin_memcpy(void *, const void *, unsigned long)
              -> INLINE (MANUAL): /usr/include/c++/6/bits/basic_string.tcc:(580,25) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep::_M_refdata(std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep *) (isz = 0) (sz = 7)
              -> INLINE (MANUAL): /usr/include/c++/6/bits/basic_string.tcc:(586,7) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep::_M_set_length_and_sharable(std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep *, std::basic_string<char, std::char_traits<char>, std::allocator<char>>::size_type) (isz = 14) (sz = 21)
                -> INLINE (MANUAL): /usr/include/c++/6/bits/basic_string.h:(2718,34) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep::_S_empty_rep() (isz = 0) (sz = 4)
                -> INLINE (MANUAL): /usr/include/c++/6/bits/basic_string.h:(2721,14) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep::_M_set_sharable(std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep *) (isz = 0) (sz = 5)
                -> INLINE (MANUAL): /usr/include/c++/6/bits/basic_string.h:(2723,8) std::char_traits<char>::assign(std::char_traits<char>::char_type &, const std::char_traits<char>::char_type &) (isz = 0) (sz = 7)
                -> INLINE (MANUAL): /usr/include/c++/6/bits/basic_string.h:(2723,34) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep::_M_refdata(std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep *) (isz = 0) (sz = 7)
              -> INLINE (MANUAL): /usr/include/c++/6/bits/basic_string.tcc:(587,14) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep::_M_refdata(std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep *) (isz = 0) (sz = 7)
        -> INLINE (MANUAL): /usr/include/c++/6/bits/basic_string.tcc:(669,52) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Alloc_hider::_Alloc_hider(std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Alloc_hider *, char *, const std::allocator<char> &) (isz = 1) (sz = 10)
          -> INLINE (MANUAL): /usr/include/c++/6/bits/basic_string.h:(2791,11) std::allocator<char>::allocator(std::allocator<char> *const, const std::allocator<char> &) (isz = 0) (sz = 7)
            -> INLINE (MANUAL): /usr/include/c++/6/bits/allocator.h:(120,7) std::allocator<char>::allocator(std::allocator<char> *, const std::allocator<char> &) (isz = 5) (sz = 12)
              -> DELETED: (121,31) __gnu_cxx::new_allocator<char>::new_allocator(__gnu_cxx::new_allocator<char> *const, const __gnu_cxx::new_allocator<char> &) (isz = 0) (sz = 7)
              -> EXTERN: (121,36) __cxa_call_unexpected
      -> INLINE (MANUAL): (175,15) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *) (isz = 27) (sz = 32)
        -> INLINE (MANUAL): /usr/include/c++/6/bits/basic_string.h:(3062,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_M_rep(const std::basic_string<char, std::char_traits<char>, std::allocator<char>> *) const (isz = 3) (sz = 10)
          -> INLINE (MANUAL): (2817,44) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_M_data(const std::basic_string<char, std::char_traits<char>, std::allocator<char>> *) const (isz = 0) (sz = 7)
        -> INLINE (MANUAL): /usr/include/c++/6/bits/basic_string.h:(3062,19) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep::_M_dispose(std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep *, const std::allocator<char> &) (isz = 37) (sz = 44)
          -> EXTERN: (2746,2) __cxa_call_unexpected
          -> INLINE (MANUAL): (2748,34) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep::_S_empty_rep() (isz = 0) (sz = 4)
          -> INLINE (MANUAL): (2761,12) __gnu_cxx::__exchange_and_add_dispatch(_Atomic_word *, int) (isz = 18) (sz = 28)
            -> INLINE (MANUAL): /usr/include/c++/6/ext/atomicity.h:(81,9) __gthread_active_p() (isz = 1) (sz = 5)
            -> INLINE (MANUAL): /usr/include/c++/6/ext/atomicity.h:(82,14) __gnu_cxx::__exchange_and_add(volatile _Atomic_word *, int) (isz = 4) (sz = 13)
              -> EXTERN: (49,12) __atomic_fetch_add_4(volatile void *, unsigned int, int)
            -> INLINE (MANUAL): /usr/include/c++/6/ext/atomicity.h:(84,14) __gnu_cxx::__exchange_and_add_single(_Atomic_word *, int) (isz = 3) (sz = 12)
          -> EXTERN: (2765,5) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep::_M_destroy(std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep *, const std::allocator<char> &)
        -> INLINE (MANUAL): /usr/include/c++/6/bits/basic_string.h:(3062,36) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::get_allocator(std::basic_string<char, std::char_traits<char>, std::allocator<char>>::allocator_type *, const std::basic_string<char, std::char_traits<char>, std::allocator<char>> *) const (isz = 2) (sz = 9)
          -> INLINE (MANUAL): (4369,16) std::allocator<char>::allocator(std::allocator<char> *, const std::allocator<char> &) (isz = 5) (sz = 12)
            -> DELETED: /usr/include/c++/6/bits/allocator.h:(121,31) __gnu_cxx::new_allocator<char>::new_allocator(__gnu_cxx::new_allocator<char> *const, const __gnu_cxx::new_allocator<char> &) (isz = 0) (sz = 7)
            -> EXTERN: /usr/include/c++/6/bits/allocator.h:(121,36) __cxa_call_unexpected
      -> INLINE (MANUAL): (175,15) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::operator=(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *, std::basic_string<char, std::char_traits<char>, std::allocator<char>> &&) (isz = 0) (sz = 9)
        -> EXTERN: /usr/include/c++/6/bits/basic_string.h:(3107,8) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::swap(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *, std::basic_string<char, std::char_traits<char>, std::allocator<char>> &)
      -> INLINE (MANUAL): (175,37) std::basic_streambuf<char, std::char_traits<char>>::pbase(const std::basic_streambuf<char, std::char_traits<char>> *) const (isz = 0) (sz = 6)
      -> INLINE (MANUAL): (175,52) std::allocator<char>::allocator(std::allocator<char> *) (isz = 5) (sz = 10)
        -> DELETED: /usr/include/c++/6/bits/allocator.h:(118,7) __gnu_cxx::new_allocator<char>::new_allocator(__gnu_cxx::new_allocator<char> *const) (isz = 0) (sz = 5)
        -> EXTERN: /usr/include/c++/6/bits/allocator.h:(118,27) __cxa_call_unexpected
      -> INLINE (MANUAL): (175,52) std::basic_streambuf<char, std::char_traits<char>>::egptr(const std::basic_streambuf<char, std::char_traits<char>> *) const (isz = 0) (sz = 6)
      -> INLINE (MANUAL): (175,52) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *) (isz = 27) (sz = 32)
        -> INLINE (MANUAL): /usr/include/c++/6/bits/basic_string.h:(3062,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_M_rep(const std::basic_string<char, std::char_traits<char>, std::allocator<char>> *) const (isz = 3) (sz = 10)
          -> INLINE (MANUAL): (2817,44) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_M_data(const std::basic_string<char, std::char_traits<char>, std::allocator<char>> *) const (isz = 0) (sz = 7)
        -> INLINE (MANUAL): /usr/include/c++/6/bits/basic_string.h:(3062,19) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep::_M_dispose(std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep *, const std::allocator<char> &) (isz = 37) (sz = 44)
          -> EXTERN: (2746,2) __cxa_call_unexpected
          -> INLINE (MANUAL): (2748,34) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep::_S_empty_rep() (isz = 0) (sz = 4)
          -> (2761,12) __gnu_cxx::__exchange_and_add_dispatch(_Atomic_word *, int) (isz = 18) (sz = 28)
             [[ Callee not marked with inlining pragma  <1>]]
          -> EXTERN: (2765,5) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep::_M_destroy(std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep *, const std::allocator<char> &)
        -> INLINE (MANUAL): /usr/include/c++/6/bits/basic_string.h:(3062,36) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::get_allocator(std::basic_string<char, std::char_traits<char>, std::allocator<char>>::allocator_type *, const std::basic_string<char, std::char_traits<char>, std::allocator<char>> *) const (isz = 2) (sz = 9)
          -> INLINE (MANUAL): (4369,16) std::allocator<char>::allocator(std::allocator<char> *, const std::allocator<char> &) (isz = 5) (sz = 12)
            -> DELETED: /usr/include/c++/6/bits/allocator.h:(121,31) __gnu_cxx::new_allocator<char>::new_allocator(__gnu_cxx::new_allocator<char> *const, const __gnu_cxx::new_allocator<char> &) (isz = 0) (sz = 7)
            -> EXTERN: /usr/include/c++/6/bits/allocator.h:(121,36) __cxa_call_unexpected
      -> INLINE (MANUAL): (175,52) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::basic_string<char *>(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *, char *, char *, const std::allocator<char> &) (isz = 76) (sz = 87)
        -> INLINE (MANUAL): /usr/include/c++/6/bits/basic_string.tcc:(669,19) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_S_construct<char *>(char *, char *, const std::allocator<char> &) (isz = 70) (sz = 81)
          -> INLINE (MANUAL): /usr/include/c++/6/bits/basic_string.h:(4296,11) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_S_construct_aux<char *>(char *, char *, const std::allocator<char> &, std::__false_type) (isz = 68) (sz = 81)
            -> INLINE (MANUAL): (4275,18) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_S_construct<char *>(char *, char *, const std::allocator<char> &, std::forward_iterator_tag) (isz = 65) (sz = 79)
              -> INLINE (MANUAL): /usr/include/c++/6/bits/basic_string.tcc:(568,24) std::allocator<char>::allocator(std::allocator<char> *) (isz = 5) (sz = 10)
                -> DELETED: /usr/include/c++/6/bits/allocator.h:(118,7) __gnu_cxx::new_allocator<char>::new_allocator(__gnu_cxx::new_allocator<char> *const) (isz = 0) (sz = 5)
                -> EXTERN: /usr/include/c++/6/bits/allocator.h:(118,27) __cxa_call_unexpected
              -> DELETED: /usr/include/c++/6/bits/basic_string.tcc:(568,28) std::operator==<char>(const std::allocator<char> &, const std::allocator<char> &) (isz = 0) (sz = 6)
              -> INLINE (MANUAL): /usr/include/c++/6/bits/basic_string.tcc:(569,11) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_S_empty_rep() (isz = 2) (sz = 7)
                -> INLINE (MANUAL): /usr/include/c++/6/bits/basic_string.h:(2947,16) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep::_S_empty_rep() (isz = 0) (sz = 4)
              -> INLINE (MANUAL): /usr/include/c++/6/bits/basic_string.tcc:(569,26) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep::_M_refdata(std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep *) (isz = 0) (sz = 7)
              -> INLINE (MANUAL): /usr/include/c++/6/bits/basic_string.tcc:(572,6) __gnu_cxx::__is_null_pointer<char>(char *) (isz = 1) (sz = 7)
              -> EXTERN: /usr/include/c++/6/bits/basic_string.tcc:(573,4) std::__throw_logic_error(const char *)
              -> INLINE (MANUAL): /usr/include/c++/6/bits/basic_string.tcc:(575,50) std::distance<char *>(char *, char *) (isz = 6) (sz = 15)
                -> INLINE (MANUAL): /usr/include/c++/6/bits/stl_iterator_base_funcs.h:(138,14) std::__distance<char *>(char *, char *, std::random_access_iterator_tag) (isz = 0) (sz = 9)
                -> INLINE (MANUAL): /usr/include/c++/6/bits/stl_iterator_base_funcs.h:(139,34) std::__iterator_category<char *>(char *const &) (isz = 0) (sz = 5)
              -> EXTERN: /usr/include/c++/6/bits/basic_string.tcc:(578,14) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep::_S_create(std::basic_string<char, std::char_traits<char>, std::allocator<char>>::size_type, std::basic_string<char, std::char_traits<char>, std::allocator<char>>::size_type, const std::allocator<char> &)
              -> INLINE (MANUAL): /usr/include/c++/6/bits/basic_string.tcc:(580,6) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_S_copy_chars(char *, char *, char *) (isz = 7) (sz = 16)
                -> INLINE (MANUAL): /usr/include/c++/6/bits/basic_string.h:(2919,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_M_copy(char *, const char *, std::basic_string<char, std::char_traits<char>, std::allocator<char>>::size_type) (isz = 10) (sz = 19)
                  -> INLINE (MANUAL): (2875,4) std::char_traits<char>::assign(std::char_traits<char>::char_type &, const std::char_traits<char>::char_type &) (isz = 0) (sz = 7)
                  -> INLINE (MANUAL): (2877,4) std::char_traits<char>::copy(std::char_traits<char>::char_type *, const std::char_traits<char>::char_type *, std::size_t) (isz = 4) (sz = 16)
                    -> EXTERN: /usr/include/c++/6/bits/char_traits.h:(290,33) __builtin_memcpy(void *, const void *, unsigned long)
              -> INLINE (MANUAL): /usr/include/c++/6/bits/basic_string.tcc:(580,25) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep::_M_refdata(std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep *) (isz = 0) (sz = 7)
              -> INLINE (MANUAL): /usr/include/c++/6/bits/basic_string.tcc:(586,7) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep::_M_set_length_and_sharable(std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep *, std::basic_string<char, std::char_traits<char>, std::allocator<char>>::size_type) (isz = 14) (sz = 21)
                -> INLINE (MANUAL): /usr/include/c++/6/bits/basic_string.h:(2718,34) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep::_S_empty_rep() (isz = 0) (sz = 4)
                -> INLINE (MANUAL): /usr/include/c++/6/bits/basic_string.h:(2721,14) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep::_M_set_sharable(std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep *) (isz = 0) (sz = 5)
                -> INLINE (MANUAL): /usr/include/c++/6/bits/basic_string.h:(2723,8) std::char_traits<char>::assign(std::char_traits<char>::char_type &, const std::char_traits<char>::char_type &) (isz = 0) (sz = 7)
                -> INLINE (MANUAL): /usr/include/c++/6/bits/basic_string.h:(2723,34) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep::_M_refdata(std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep *) (isz = 0) (sz = 7)
              -> INLINE (MANUAL): /usr/include/c++/6/bits/basic_string.tcc:(587,14) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep::_M_refdata(std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep *) (isz = 0) (sz = 7)
        -> INLINE (MANUAL): /usr/include/c++/6/bits/basic_string.tcc:(669,52) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Alloc_hider::_Alloc_hider(std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Alloc_hider *, char *, const std::allocator<char> &) (isz = 1) (sz = 10)
          -> INLINE (MANUAL): /usr/include/c++/6/bits/basic_string.h:(2791,11) std::allocator<char>::allocator(std::allocator<char> *const, const std::allocator<char> &) (isz = 0) (sz = 7)
            -> INLINE (MANUAL): /usr/include/c++/6/bits/allocator.h:(120,7) std::allocator<char>::allocator(std::allocator<char> *, const std::allocator<char> &) (isz = 5) (sz = 12)
              -> DELETED: (121,31) __gnu_cxx::new_allocator<char>::new_allocator(__gnu_cxx::new_allocator<char> *const, const __gnu_cxx::new_allocator<char> &) (isz = 0) (sz = 7)
              -> EXTERN: (121,36) __cxa_call_unexpected
      -> INLINE (MANUAL): (178,10) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::operator=(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *, const std::basic_string<char, std::char_traits<char>, std::allocator<char>> &) (isz = 1) (sz = 10)
        -> EXTERN: /usr/include/c++/6/bits/basic_string.h:(3070,22) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::assign(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *, const std::basic_string<char, std::char_traits<char>, std::allocator<char>> &)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at dem/records/Particle.cpp(3117,4) inlined into dem/records/Particle.cpp(3110,1)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ dem/records/Particle.cpp(3118,11) ]
LOOP END

LOOP BEGIN at dem/records/Particle.cpp(3123,4) inlined into dem/records/Particle.cpp(3110,1)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ dem/records/Particle.cpp(3124,11) ]
LOOP END

LOOP BEGIN at dem/records/Particle.cpp(3129,4) inlined into dem/records/Particle.cpp(3110,1)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ dem/records/Particle.cpp(3130,11) ]
LOOP END

LOOP BEGIN at dem/records/Particle.cpp(3135,4) inlined into dem/records/Particle.cpp(3110,1)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ dem/records/Particle.cpp(3136,11) ]
LOOP END

LOOP BEGIN at dem/records/Particle.cpp(3141,4) inlined into dem/records/Particle.cpp(3110,1)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ dem/records/Particle.cpp(3142,11) ]
   remark #25436: completely unrolled by 2  
LOOP END

LOOP BEGIN at dem/records/Particle.cpp(3147,4) inlined into dem/records/Particle.cpp(3110,1)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ dem/records/Particle.cpp(3148,11) ]
   remark #25436: completely unrolled by 2  
LOOP END

LOOP BEGIN at dem/records/Particle.cpp(3153,4) inlined into dem/records/Particle.cpp(3110,1)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ dem/records/Particle.cpp(3154,11) ]
   remark #25436: completely unrolled by 2  
LOOP END

LOOP BEGIN at dem/records/Particle.cpp(3159,4) inlined into dem/records/Particle.cpp(3110,1)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ dem/records/Particle.cpp(3160,11) ]
   remark #25436: completely unrolled by 2  
LOOP END

LOOP BEGIN at dem/records/Particle.cpp(3165,4) inlined into dem/records/Particle.cpp(3110,1)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ dem/records/Particle.cpp(3166,11) ]
   remark #25436: completely unrolled by 2  
LOOP END

LOOP BEGIN at dem/records/Particle.cpp(3171,4) inlined into dem/records/Particle.cpp(3110,1)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ dem/records/Particle.cpp(3172,11) ]
   remark #25436: completely unrolled by 2  
LOOP END

    Report from: Code generation optimizations [cg]

/usr/include/c++/6/bits/char_traits.h(290,33):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
/usr/include/c++/6/bits/char_traits.h(290,33):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
/usr/include/c++/6/bits/char_traits.h(290,33):remark #34026: call to memcpy implemented as a call to optimized library version
/usr/include/c++/6/bits/char_traits.h(290,33):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
/usr/include/c++/6/bits/char_traits.h(290,33):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
/usr/include/c++/6/bits/char_traits.h(290,33):remark #34026: call to memcpy implemented as a call to optimized library version
dem/records/Particle.cpp(3108,54):remark #34051: REGISTER ALLOCATION : [_ZNK3dem7records8Particle8toStringEv] dem/records/Particle.cpp:3108

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   13[ rax rdx rcx rbx rbp rsi rdi r8 r12-r15 zmm0]
        
    Routine temporaries
        Total         :     582
            Global    :     132
            Local     :     450
        Regenerable   :     233
        Spilled       :       6
        
    Routine stack
        Variables     :     420 bytes*
            Reads     :      27 [6.06e+00 ~ 1.0%]
            Writes    :      63 [2.61e+01 ~ 4.1%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: __gnu_cxx::new_allocator<char>::new_allocator(__gnu_cxx::new_allocator<char> *const)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (__gnu_cxx::new_allocator<char>::new_allocator(__gnu_cxx::new_allocator<char> *const)) /usr/include/c++/6/ext/new_allocator.h(79,7)

===========================================================================

Begin optimization report for: __gnu_cxx::__exchange_and_add_dispatch(_Atomic_word *, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (__gnu_cxx::__exchange_and_add_dispatch(_Atomic_word *, int)) [97/166=58.4%] /usr/include/c++/6/ext/atomicity.h(79,3)
  -> INLINE (MANUAL): (81,9) __gthread_active_p() (isz = 1) (sz = 5)
  -> INLINE (MANUAL): (82,14) __gnu_cxx::__exchange_and_add(volatile _Atomic_word *, int) (isz = 4) (sz = 13)
    -> EXTERN: (49,12) __atomic_fetch_add_4(volatile void *, unsigned int, int)
  -> INLINE (MANUAL): (84,14) __gnu_cxx::__exchange_and_add_single(_Atomic_word *, int) (isz = 3) (sz = 12)


    Report from: Code generation optimizations [cg]

/usr/include/c++/6/ext/atomicity.h(79,3):remark #34051: REGISTER ALLOCATION : [_ZN46_INTERNAL_24_dem_records_Particle_cpp_dfd0e8929__gnu_cxx27__exchange_and_add_dispatchEPii] /usr/include/c++/6/ext/atomicity.h:79

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    5[ rax rdx rcx rsi rdi]
        
    Routine temporaries
        Total         :      18
            Global    :       8
            Local     :      10
        Regenerable   :       2
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::operator==<char>(const std::allocator<char> &, const std::allocator<char> &)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (std::operator==<char>(const std::allocator<char> &, const std::allocator<char> &)) /usr/include/c++/6/bits/allocator.h(141,5)

===========================================================================

Begin optimization report for: std::basic_stringbuf<char, std::char_traits<char>, std::allocator<char>>::~basic_stringbuf(std::basic_stringbuf<char, std::char_traits<char>, std::allocator<char>> *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (std::basic_stringbuf<char, std::char_traits<char>, std::allocator<char>>::~basic_stringbuf(std::basic_stringbuf<char, std::char_traits<char>, std::allocator<char>> *)) [99/166=59.6%] /usr/include/c++/6/iosfwd(96,11)
  -> INLINE (MANUAL): (96,11) std::basic_streambuf<char, std::char_traits<char>>::~basic_streambuf(std::basic_streambuf<char, std::char_traits<char>> *const) (isz = 0) (sz = 5)
    -> INLINE (MANUAL): /usr/include/c++/6/streambuf:(197,7) std::basic_streambuf<char, std::char_traits<char>>::~basic_streambuf(std::basic_streambuf<char, std::char_traits<char>> *) (isz = 6) (sz = 11)
      -> EXTERN: (198,9) std::locale::~locale(std::locale *)
  -> INLINE (MANUAL): (96,11) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *) (isz = 27) (sz = 32)
    -> INLINE (MANUAL): /usr/include/c++/6/bits/basic_string.h:(3062,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_M_rep(const std::basic_string<char, std::char_traits<char>, std::allocator<char>> *) const (isz = 3) (sz = 10)
      -> INLINE (MANUAL): (2817,44) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_M_data(const std::basic_string<char, std::char_traits<char>, std::allocator<char>> *) const (isz = 0) (sz = 7)
    -> INLINE (MANUAL): /usr/include/c++/6/bits/basic_string.h:(3062,19) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep::_M_dispose(std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep *, const std::allocator<char> &) (isz = 37) (sz = 44)
      -> EXTERN: (2746,2) __cxa_call_unexpected
      -> INLINE (MANUAL): (2748,34) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep::_S_empty_rep() (isz = 0) (sz = 4)
      -> INLINE (MANUAL): (2761,12) __gnu_cxx::__exchange_and_add_dispatch(_Atomic_word *, int) (isz = 18) (sz = 28)
        -> INLINE (MANUAL): /usr/include/c++/6/ext/atomicity.h:(81,9) __gthread_active_p() (isz = 1) (sz = 5)
        -> INLINE (MANUAL): /usr/include/c++/6/ext/atomicity.h:(82,14) __gnu_cxx::__exchange_and_add(volatile _Atomic_word *, int) (isz = 4) (sz = 13)
          -> EXTERN: (49,12) __atomic_fetch_add_4(volatile void *, unsigned int, int)
        -> INLINE (MANUAL): /usr/include/c++/6/ext/atomicity.h:(84,14) __gnu_cxx::__exchange_and_add_single(_Atomic_word *, int) (isz = 3) (sz = 12)
      -> EXTERN: (2765,5) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep::_M_destroy(std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep *, const std::allocator<char> &)
    -> INLINE (MANUAL): /usr/include/c++/6/bits/basic_string.h:(3062,36) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::get_allocator(std::basic_string<char, std::char_traits<char>, std::allocator<char>>::allocator_type *, const std::basic_string<char, std::char_traits<char>, std::allocator<char>> *) const (isz = 2) (sz = 9)
      -> INLINE (MANUAL): (4369,16) std::allocator<char>::allocator(std::allocator<char> *, const std::allocator<char> &) (isz = 5) (sz = 12)
        -> DELETED: /usr/include/c++/6/bits/allocator.h:(121,31) __gnu_cxx::new_allocator<char>::new_allocator(__gnu_cxx::new_allocator<char> *const, const __gnu_cxx::new_allocator<char> &) (isz = 0) (sz = 7)
        -> EXTERN: /usr/include/c++/6/bits/allocator.h:(121,36) __cxa_call_unexpected


    Report from: Code generation optimizations [cg]

/usr/include/c++/6/iosfwd(96,11):remark #34051: REGISTER ALLOCATION : [_ZNSt15basic_stringbufIcSt11char_traitsIcESaIcEED1Ev] /usr/include/c++/6/iosfwd:96

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    5[ rax rdx rcx rsi rdi]
        
    Routine temporaries
        Total         :      23
            Global    :      12
            Local     :      11
        Regenerable   :       5
        Spilled       :       0
        
    Routine stack
        Variables     :       9 bytes*
            Reads     :       2 [5.00e-02 ~ 0.2%]
            Writes    :       1 [1.00e+00 ~ 4.3%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: __gnu_cxx::new_allocator<char>::new_allocator(__gnu_cxx::new_allocator<char> *const, const __gnu_cxx::new_allocator<char> &)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (__gnu_cxx::new_allocator<char>::new_allocator(__gnu_cxx::new_allocator<char> *const, const __gnu_cxx::new_allocator<char> &)) /usr/include/c++/6/ext/new_allocator.h(81,7)

===========================================================================

Begin optimization report for: dem::records::Particle::toString(const dem::records::Particle *, std::ostream &) const

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (dem::records::Particle::toString(const dem::records::Particle *, std::ostream &) const) [101/166=60.8%] dem/records/Particle.cpp(3114,65)
  -> (3115,5) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <2>]]
  -> (3116,5) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <2>]]
  -> EXTERN: (3118,11) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, int)
  -> INLINE (MANUAL): (3118,14) dem::records::Particle::getVertices(const dem::records::Particle *, int) const (isz = 4) (sz = 13)
    -> INLINE (MANUAL): ./dem/records/Particle.h:(12331,96) tarch::la::Vector<6, int>::operator[](const tarch::la::Vector<6, int> *, int) const (isz = 1) (sz = 9)
  -> (3118,29) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <2>]]
  -> EXTERN: (3120,8) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, int)
  -> INLINE (MANUAL): (3120,11) dem::records::Particle::getVertices(const dem::records::Particle *, int) const (isz = 4) (sz = 13)
    -> INLINE (MANUAL): ./dem/records/Particle.h:(12331,96) tarch::la::Vector<6, int>::operator[](const tarch::la::Vector<6, int> *, int) const (isz = 1) (sz = 9)
  -> (3120,28) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <2>]]
  -> (3121,5) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <2>]]
  -> (3122,5) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <2>]]
  -> (3124,11) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) (isz = 1) (sz = 10)
     [[ Called routine is noinline  <2>]]
  -> INLINE (MANUAL): (3124,14) dem::records::Particle::getOrientation(const dem::records::Particle *, int) const (isz = 4) (sz = 13)
    -> INLINE (MANUAL): ./dem/records/Particle.h:(12415,99) tarch::la::Vector<9, double>::operator[](const tarch::la::Vector<9, double> *, int) const (isz = 1) (sz = 9)
  -> (3124,32) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <2>]]
  -> (3126,8) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) (isz = 1) (sz = 10)
     [[ Called routine is noinline  <2>]]
  -> INLINE (MANUAL): (3126,11) dem::records::Particle::getOrientation(const dem::records::Particle *, int) const (isz = 4) (sz = 13)
    -> INLINE (MANUAL): ./dem/records/Particle.h:(12415,99) tarch::la::Vector<9, double>::operator[](const tarch::la::Vector<9, double> *, int) const (isz = 1) (sz = 9)
  -> (3126,31) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <2>]]
  -> (3127,5) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <2>]]
  -> (3128,5) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <2>]]
  -> (3130,11) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) (isz = 1) (sz = 10)
     [[ Called routine is noinline  <2>]]
  -> INLINE (MANUAL): (3130,14) dem::records::Particle::getInertia(const dem::records::Particle *, int) const (isz = 4) (sz = 13)
    -> INLINE (MANUAL): ./dem/records/Particle.h:(12499,95) tarch::la::Vector<9, double>::operator[](const tarch::la::Vector<9, double> *, int) const (isz = 1) (sz = 9)
  -> (3130,28) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <2>]]
  -> (3132,8) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) (isz = 1) (sz = 10)
     [[ Called routine is noinline  <2>]]
  -> INLINE (MANUAL): (3132,11) dem::records::Particle::getInertia(const dem::records::Particle *, int) const (isz = 4) (sz = 13)
    -> INLINE (MANUAL): ./dem/records/Particle.h:(12499,95) tarch::la::Vector<9, double>::operator[](const tarch::la::Vector<9, double> *, int) const (isz = 1) (sz = 9)
  -> (3132,27) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <2>]]
  -> (3133,5) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <2>]]
  -> (3134,5) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <2>]]
  -> (3136,11) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) (isz = 1) (sz = 10)
     [[ Called routine is noinline  <2>]]
  -> INLINE (MANUAL): (3136,14) dem::records::Particle::getInverse(const dem::records::Particle *, int) const (isz = 4) (sz = 13)
    -> INLINE (MANUAL): ./dem/records/Particle.h:(12583,95) tarch::la::Vector<9, double>::operator[](const tarch::la::Vector<9, double> *, int) const (isz = 1) (sz = 9)
  -> (3136,28) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <2>]]
  -> (3138,8) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) (isz = 1) (sz = 10)
     [[ Called routine is noinline  <2>]]
  -> INLINE (MANUAL): (3138,11) dem::records::Particle::getInverse(const dem::records::Particle *, int) const (isz = 4) (sz = 13)
    -> INLINE (MANUAL): ./dem/records/Particle.h:(12583,95) tarch::la::Vector<9, double>::operator[](const tarch::la::Vector<9, double> *, int) const (isz = 1) (sz = 9)
  -> (3138,27) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <2>]]
  -> (3139,5) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <2>]]
  -> (3140,5) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <2>]]
  -> (3142,11) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) (isz = 1) (sz = 10)
     [[ Called routine is noinline  <2>]]
  -> INLINE (MANUAL): (3142,14) dem::records::Particle::getCentre(const dem::records::Particle *, int) const (isz = 4) (sz = 13)
    -> INLINE (MANUAL): ./dem/records/Particle.h:(12667,94) tarch::la::Vector<3, double>::operator[](const tarch::la::Vector<3, double> *, int) const (isz = 1) (sz = 9)
  -> (3142,27) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <2>]]
  -> (3144,8) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) (isz = 1) (sz = 10)
     [[ Called routine is noinline  <2>]]
  -> INLINE (MANUAL): (3144,11) dem::records::Particle::getCentre(const dem::records::Particle *, int) const (isz = 4) (sz = 13)
    -> INLINE (MANUAL): ./dem/records/Particle.h:(12667,94) tarch::la::Vector<3, double>::operator[](const tarch::la::Vector<3, double> *, int) const (isz = 1) (sz = 9)
  -> (3144,35) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <2>]]
  -> (3145,5) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <2>]]
  -> (3146,5) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <2>]]
  -> (3148,11) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) (isz = 1) (sz = 10)
     [[ Called routine is noinline  <2>]]
  -> INLINE (MANUAL): (3148,14) dem::records::Particle::getCentreOfMass(const dem::records::Particle *, int) const (isz = 4) (sz = 13)
    -> INLINE (MANUAL): ./dem/records/Particle.h:(12751,100) tarch::la::Vector<3, double>::operator[](const tarch::la::Vector<3, double> *, int) const (isz = 1) (sz = 9)
  -> (3148,33) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <2>]]
  -> (3150,8) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) (isz = 1) (sz = 10)
     [[ Called routine is noinline  <2>]]
  -> INLINE (MANUAL): (3150,11) dem::records::Particle::getCentreOfMass(const dem::records::Particle *, int) const (isz = 4) (sz = 13)
    -> INLINE (MANUAL): ./dem/records/Particle.h:(12751,100) tarch::la::Vector<3, double>::operator[](const tarch::la::Vector<3, double> *, int) const (isz = 1) (sz = 9)
  -> (3150,41) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <2>]]
  -> (3151,5) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <2>]]
  -> (3152,5) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <2>]]
  -> (3154,11) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) (isz = 1) (sz = 10)
     [[ Called routine is noinline  <2>]]
  -> INLINE (MANUAL): (3154,14) dem::records::Particle::getReferencialAngular(const dem::records::Particle *, int) const (isz = 4) (sz = 13)
    -> INLINE (MANUAL): ./dem/records/Particle.h:(12835,106) tarch::la::Vector<3, double>::operator[](const tarch::la::Vector<3, double> *, int) const (isz = 1) (sz = 9)
  -> (3154,39) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <2>]]
  -> (3156,8) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) (isz = 1) (sz = 10)
     [[ Called routine is noinline  <2>]]
  -> INLINE (MANUAL): (3156,11) dem::records::Particle::getReferencialAngular(const dem::records::Particle *, int) const (isz = 4) (sz = 13)
    -> INLINE (MANUAL): ./dem/records/Particle.h:(12835,106) tarch::la::Vector<3, double>::operator[](const tarch::la::Vector<3, double> *, int) const (isz = 1) (sz = 9)
  -> (3156,47) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <2>]]
  -> (3157,5) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <2>]]
  -> (3158,5) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <2>]]
  -> (3160,11) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) (isz = 1) (sz = 10)
     [[ Called routine is noinline  <2>]]
  -> INLINE (MANUAL): (3160,14) dem::records::Particle::getReferentialCentreOfMass(const dem::records::Particle *, int) const (isz = 4) (sz = 13)
    -> INLINE (MANUAL): ./dem/records/Particle.h:(12919,111) tarch::la::Vector<3, double>::operator[](const tarch::la::Vector<3, double> *, int) const (isz = 1) (sz = 9)
  -> (3160,44) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <2>]]
  -> (3162,8) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) (isz = 1) (sz = 10)
     [[ Called routine is noinline  <2>]]
  -> INLINE (MANUAL): (3162,11) dem::records::Particle::getReferentialCentreOfMass(const dem::records::Particle *, int) const (isz = 4) (sz = 13)
    -> INLINE (MANUAL): ./dem/records/Particle.h:(12919,111) tarch::la::Vector<3, double>::operator[](const tarch::la::Vector<3, double> *, int) const (isz = 1) (sz = 9)
  -> (3162,52) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <2>]]
  -> (3163,5) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <2>]]
  -> (3164,5) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <2>]]
  -> (3166,11) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) (isz = 1) (sz = 10)
     [[ Called routine is noinline  <2>]]
  -> INLINE (MANUAL): (3166,14) dem::records::Particle::getVelocity(const dem::records::Particle *, int) const (isz = 4) (sz = 13)
    -> INLINE (MANUAL): ./dem/records/Particle.h:(13003,96) tarch::la::Vector<3, double>::operator[](const tarch::la::Vector<3, double> *, int) const (isz = 1) (sz = 9)
  -> (3166,29) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <2>]]
  -> (3168,8) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) (isz = 1) (sz = 10)
     [[ Called routine is noinline  <2>]]
  -> INLINE (MANUAL): (3168,11) dem::records::Particle::getVelocity(const dem::records::Particle *, int) const (isz = 4) (sz = 13)
    -> INLINE (MANUAL): ./dem/records/Particle.h:(13003,96) tarch::la::Vector<3, double>::operator[](const tarch::la::Vector<3, double> *, int) const (isz = 1) (sz = 9)
  -> (3168,37) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <2>]]
  -> (3169,5) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <2>]]
  -> (3170,5) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <2>]]
  -> (3172,11) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) (isz = 1) (sz = 10)
     [[ Called routine is noinline  <2>]]
  -> INLINE (MANUAL): (3172,14) dem::records::Particle::getAngular(const dem::records::Particle *, int) const (isz = 4) (sz = 13)
    -> INLINE (MANUAL): ./dem/records/Particle.h:(13087,95) tarch::la::Vector<3, double>::operator[](const tarch::la::Vector<3, double> *, int) const (isz = 1) (sz = 9)
  -> (3172,28) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <2>]]
  -> (3174,8) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) (isz = 1) (sz = 10)
     [[ Called routine is noinline  <2>]]
  -> INLINE (MANUAL): (3174,11) dem::records::Particle::getAngular(const dem::records::Particle *, int) const (isz = 4) (sz = 13)
    -> INLINE (MANUAL): ./dem/records/Particle.h:(13087,95) tarch::la::Vector<3, double>::operator[](const tarch::la::Vector<3, double> *, int) const (isz = 1) (sz = 9)
  -> (3174,36) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <2>]]
  -> (3175,5) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <2>]]
  -> (3176,5) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <2>]]
  -> (3176,20) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) (isz = 1) (sz = 10)
     [[ Called routine is noinline  <2>]]
  -> INLINE (MANUAL): (3176,23) dem::records::Particle::getDiameter(const dem::records::Particle *) const (isz = 0) (sz = 6)
  -> (3177,5) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <2>]]
  -> (3178,5) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <2>]]
  -> (3178,27) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) (isz = 1) (sz = 10)
     [[ Called routine is noinline  <2>]]
  -> INLINE (MANUAL): (3178,30) dem::records::Particle::getInfluenceRadius(const dem::records::Particle *) const (isz = 0) (sz = 6)
  -> (3179,5) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <2>]]
  -> (3180,5) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <2>]]
  -> (3180,19) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) (isz = 1) (sz = 10)
     [[ Called routine is noinline  <2>]]
  -> INLINE (MANUAL): (3180,22) dem::records::Particle::getEpsilon(const dem::records::Particle *) const (isz = 0) (sz = 6)
  -> (3181,5) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <2>]]
  -> (3182,5) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <2>]]
  -> (3182,16) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) (isz = 1) (sz = 10)
     [[ Called routine is noinline  <2>]]
  -> INLINE (MANUAL): (3182,19) dem::records::Particle::getMass(const dem::records::Particle *) const (isz = 0) (sz = 6)
  -> (3183,5) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <2>]]
  -> (3184,5) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <2>]]
  -> (3184,16) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) (isz = 1) (sz = 10)
     [[ Called routine is noinline  <2>]]
  -> INLINE (MANUAL): (3184,19) dem::records::Particle::getHMin(const dem::records::Particle *) const (isz = 0) (sz = 6)
  -> (3185,5) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <2>]]
  -> (3186,5) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <2>]]
  -> EXTERN: (3186,32) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, int)
  -> INLINE (MANUAL): (3186,35) dem::records::Particle::getGlobalParticleNumber(const dem::records::Particle *) const (isz = 0) (sz = 6)
  -> (3187,5) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <2>]]
  -> (3188,5) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <2>]]
  -> EXTERN: (3188,29) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, int)
  -> INLINE (MANUAL): (3188,32) dem::records::Particle::getNumberOfTriangles(const dem::records::Particle *) const (isz = 0) (sz = 6)
  -> (3189,5) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <2>]]
  -> (3190,5) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <2>]]
  -> EXTERN: (3190,20) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, int)
  -> INLINE (MANUAL): (3190,23) dem::records::Particle::getMaterial(const dem::records::Particle *) const (isz = 0) (sz = 6)
  -> (3191,5) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at dem/records/Particle.cpp(3117,4)
   remark #15382: vectorization support: call to function std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, int) cannot be vectorized   [ dem/records/Particle.cpp(3118,11) ]
   remark #15382: vectorization support: call to function std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) cannot be vectorized   [ dem/records/Particle.cpp(3118,29) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END

LOOP BEGIN at dem/records/Particle.cpp(3123,4)
   remark #15382: vectorization support: call to function std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) cannot be vectorized   [ dem/records/Particle.cpp(3124,11) ]
   remark #15382: vectorization support: call to function std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) cannot be vectorized   [ dem/records/Particle.cpp(3124,32) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END

LOOP BEGIN at dem/records/Particle.cpp(3129,4)
   remark #15382: vectorization support: call to function std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) cannot be vectorized   [ dem/records/Particle.cpp(3130,11) ]
   remark #15382: vectorization support: call to function std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) cannot be vectorized   [ dem/records/Particle.cpp(3130,28) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END

LOOP BEGIN at dem/records/Particle.cpp(3135,4)
   remark #15382: vectorization support: call to function std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) cannot be vectorized   [ dem/records/Particle.cpp(3136,11) ]
   remark #15382: vectorization support: call to function std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) cannot be vectorized   [ dem/records/Particle.cpp(3136,28) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END

LOOP BEGIN at dem/records/Particle.cpp(3141,4)
   remark #15382: vectorization support: call to function std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) cannot be vectorized   [ dem/records/Particle.cpp(3142,11) ]
   remark #15382: vectorization support: call to function std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) cannot be vectorized   [ dem/records/Particle.cpp(3142,27) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #25436: completely unrolled by 2  
LOOP END

LOOP BEGIN at dem/records/Particle.cpp(3147,4)
   remark #15382: vectorization support: call to function std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) cannot be vectorized   [ dem/records/Particle.cpp(3148,11) ]
   remark #15382: vectorization support: call to function std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) cannot be vectorized   [ dem/records/Particle.cpp(3148,33) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #25436: completely unrolled by 2  
LOOP END

LOOP BEGIN at dem/records/Particle.cpp(3153,4)
   remark #15382: vectorization support: call to function std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) cannot be vectorized   [ dem/records/Particle.cpp(3154,11) ]
   remark #15382: vectorization support: call to function std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) cannot be vectorized   [ dem/records/Particle.cpp(3154,39) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #25436: completely unrolled by 2  
LOOP END

LOOP BEGIN at dem/records/Particle.cpp(3159,4)
   remark #15382: vectorization support: call to function std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) cannot be vectorized   [ dem/records/Particle.cpp(3160,11) ]
   remark #15382: vectorization support: call to function std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) cannot be vectorized   [ dem/records/Particle.cpp(3160,44) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #25436: completely unrolled by 2  
LOOP END

LOOP BEGIN at dem/records/Particle.cpp(3165,4)
   remark #15382: vectorization support: call to function std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) cannot be vectorized   [ dem/records/Particle.cpp(3166,11) ]
   remark #15382: vectorization support: call to function std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) cannot be vectorized   [ dem/records/Particle.cpp(3166,29) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #25436: completely unrolled by 2  
LOOP END

LOOP BEGIN at dem/records/Particle.cpp(3171,4)
   remark #15382: vectorization support: call to function std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) cannot be vectorized   [ dem/records/Particle.cpp(3172,11) ]
   remark #15382: vectorization support: call to function std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) cannot be vectorized   [ dem/records/Particle.cpp(3172,28) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #25436: completely unrolled by 2  
LOOP END

    Report from: Code generation optimizations [cg]

dem/records/Particle.cpp(3114,65):remark #34051: REGISTER ALLOCATION : [_ZNK3dem7records8Particle8toStringERSo] dem/records/Particle.cpp:3114

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    7[ rax rsi rdi r12-r14 zmm0]
        
    Routine temporaries
        Total         :     333
            Global    :      83
            Local     :     250
        Regenerable   :      86
        Spilled       :       3
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::char_traits<char>::length(const std::char_traits<char>::char_type *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (std::char_traits<char>::length(const std::char_traits<char>::char_type *)) [104/166=62.7%] /usr/include/c++/6/bits/char_traits.h(267,7)
  -> EXTERN: (267,16) __builtin_strlen(const char *)


    Report from: Code generation optimizations [cg]

/usr/include/c++/6/bits/char_traits.h(267,7):remark #34051: REGISTER ALLOCATION : [_ZNSt11char_traitsIcE6lengthEPKc] /usr/include/c++/6/bits/char_traits.h:267

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    3[ rax rdx rdi]
        
    Routine temporaries
        Total         :      12
            Global    :       7
            Local     :       5
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: dem::records::Particle::getPersistentRecords(dem::records::Particle::PersistentRecords *, const dem::records::Particle *) const

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (dem::records::Particle::getPersistentRecords(dem::records::Particle::PersistentRecords *, const dem::records::Particle *) const) [106/166=63.9%] dem/records/Particle.cpp(3195,96)
  -> INLINE (MANUAL): (3196,8) dem::records::Particle::PersistentRecords::PersistentRecords(dem::records::Particle::PersistentRecords *, const dem::records::Particle::PersistentRecords &) (isz = 261) (sz = 268)
    -> INLINE (MANUAL): ./dem/records/Particle.h:(11425,65) tarch::la::Vector<6, int>::Vector(tarch::la::Vector<6, int> *, const tarch::la::Vector<6, int> &) (isz = 17) (sz = 24)
      -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()
    -> INLINE (MANUAL): ./dem/records/Particle.h:(11425,65) tarch::la::Vector<9, double>::Vector(tarch::la::Vector<9, double> *, const tarch::la::Vector<9, double> &) (isz = 17) (sz = 24)
      -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()
    -> INLINE (MANUAL): ./dem/records/Particle.h:(11425,65) tarch::la::Vector<9, double>::Vector(tarch::la::Vector<9, double> *, const tarch::la::Vector<9, double> &) (isz = 17) (sz = 24)
      -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()
    -> INLINE (MANUAL): ./dem/records/Particle.h:(11425,65) tarch::la::Vector<9, double>::Vector(tarch::la::Vector<9, double> *, const tarch::la::Vector<9, double> &) (isz = 17) (sz = 24)
      -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()
    -> INLINE (MANUAL): ./dem/records/Particle.h:(11425,65) tarch::la::Vector<3, double>::Vector(tarch::la::Vector<3, double> *, const tarch::la::Vector<3, double> &) (isz = 17) (sz = 24)
      -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()
    -> INLINE (MANUAL): ./dem/records/Particle.h:(11425,65) tarch::la::Vector<3, double>::Vector(tarch::la::Vector<3, double> *, const tarch::la::Vector<3, double> &) (isz = 17) (sz = 24)
      -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()
    -> INLINE (MANUAL): ./dem/records/Particle.h:(11425,65) tarch::la::Vector<3, double>::Vector(tarch::la::Vector<3, double> *, const tarch::la::Vector<3, double> &) (isz = 17) (sz = 24)
      -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()
    -> INLINE (MANUAL): ./dem/records/Particle.h:(11425,65) tarch::la::Vector<3, double>::Vector(tarch::la::Vector<3, double> *, const tarch::la::Vector<3, double> &) (isz = 17) (sz = 24)
      -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()
    -> INLINE (MANUAL): ./dem/records/Particle.h:(11425,65) tarch::la::Vector<3, double>::Vector(tarch::la::Vector<3, double> *, const tarch::la::Vector<3, double> &) (isz = 17) (sz = 24)
      -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()
    -> INLINE (MANUAL): ./dem/records/Particle.h:(11425,65) tarch::la::Vector<3, double>::Vector(tarch::la::Vector<3, double> *, const tarch::la::Vector<3, double> &) (isz = 17) (sz = 24)
      -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3196,8)
   remark #15389: vectorization support: reference this->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15389: vectorization support: reference toCopy->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 1.000
   remark #15300: LOOP WAS VECTORIZED
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.200 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3196,8)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 2  
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3196,8)
<Peeled loop for vectorization>
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3196,8)
   remark #15388: vectorization support: reference this->_values[i] has aligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15389: vectorization support: reference toCopy->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 3.333
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.200 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=4
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3196,8)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3196,8)
<Peeled loop for vectorization>
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3196,8)
   remark #15388: vectorization support: reference this->_values[i] has aligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15389: vectorization support: reference toCopy->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 3.333
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.200 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=4
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3196,8)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3196,8)
<Peeled loop for vectorization>
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3196,8)
   remark #15388: vectorization support: reference this->_values[i] has aligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15389: vectorization support: reference toCopy->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 3.333
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.200 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=4
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3196,8)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3196,8)
   remark #15389: vectorization support: reference this->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15389: vectorization support: reference toCopy->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 1.000
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.750 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3196,8)
   remark #15389: vectorization support: reference this->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15389: vectorization support: reference toCopy->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 1.000
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.750 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3196,8)
   remark #15389: vectorization support: reference this->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15389: vectorization support: reference toCopy->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 1.000
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.750 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3196,8)
   remark #15389: vectorization support: reference this->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15389: vectorization support: reference toCopy->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 1.000
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.750 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3196,8)
   remark #15389: vectorization support: reference this->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15389: vectorization support: reference toCopy->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 1.000
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.750 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3196,8)
   remark #15389: vectorization support: reference this->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15389: vectorization support: reference toCopy->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 1.000
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.750 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at ./dem/records/Particle.h(11425,65) inlined into dem/records/Particle.cpp(3196,8)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between *(__p1+_2*8+384) (11425:65) and *(__p2+_2*8+384) (11425:65)
   remark #15346: vector dependence: assumed ANTI dependence between *(__p2+_2*8+384) (11425:65) and *(__p1+_2*8+384) (11425:65)
   remark #25436: completely unrolled by 5  
LOOP END

    Report from: Code generation optimizations [cg]

./tarch/la/Vector.cpph(63,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(63,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(63,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(63,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(63,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(63,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(63,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(63,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(63,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(63,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
dem/records/Particle.cpp(3195,96):remark #34051: REGISTER ALLOCATION : [_ZNK3dem7records8Particle20getPersistentRecordsEv] dem/records/Particle.cpp:3195

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   11[ rax rdx rcx rsi rdi r8-r11 zmm0-zmm1]
        
    Routine temporaries
        Total         :      82
            Global    :      21
            Local     :      61
        Regenerable   :       1
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: dem::records::Particle::convert(dem::records::ParticlePacked *, const dem::records::Particle *) const

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (dem::records::Particle::convert(dem::records::ParticlePacked *, const dem::records::Particle *) const) [107/166=64.5%] dem/records/Particle.cpp(3199,69)
  -> INLINE (MANUAL): (3201,4) dem::records::Particle::getVertices(tarch::la::Vector<6, int> *, const dem::records::Particle *) const (isz = 19) (sz = 26)
    -> INLINE (MANUAL): ./dem/records/Particle.h:(12290,68) tarch::la::Vector<6, int>::Vector(tarch::la::Vector<6, int> *, const tarch::la::Vector<6, int> &) (isz = 17) (sz = 24)
      -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()
  -> INLINE (MANUAL): (3202,4) dem::records::Particle::getOrientation(tarch::la::Vector<9, double> *, const dem::records::Particle *) const (isz = 19) (sz = 26)
    -> INLINE (MANUAL): ./dem/records/Particle.h:(12374,68) tarch::la::Vector<9, double>::Vector(tarch::la::Vector<9, double> *, const tarch::la::Vector<9, double> &) (isz = 17) (sz = 24)
      -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()
  -> INLINE (MANUAL): (3203,4) dem::records::Particle::getInertia(tarch::la::Vector<9, double> *, const dem::records::Particle *) const (isz = 19) (sz = 26)
    -> INLINE (MANUAL): ./dem/records/Particle.h:(12458,68) tarch::la::Vector<9, double>::Vector(tarch::la::Vector<9, double> *, const tarch::la::Vector<9, double> &) (isz = 17) (sz = 24)
      -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()
  -> INLINE (MANUAL): (3204,4) dem::records::Particle::getInverse(tarch::la::Vector<9, double> *, const dem::records::Particle *) const (isz = 19) (sz = 26)
    -> INLINE (MANUAL): ./dem/records/Particle.h:(12542,68) tarch::la::Vector<9, double>::Vector(tarch::la::Vector<9, double> *, const tarch::la::Vector<9, double> &) (isz = 17) (sz = 24)
      -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()
  -> INLINE (MANUAL): (3205,4) dem::records::Particle::getCentre(tarch::la::Vector<3, double> *, const dem::records::Particle *) const (isz = 19) (sz = 26)
    -> INLINE (MANUAL): ./dem/records/Particle.h:(12626,68) tarch::la::Vector<3, double>::Vector(tarch::la::Vector<3, double> *, const tarch::la::Vector<3, double> &) (isz = 17) (sz = 24)
      -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()
  -> INLINE (MANUAL): (3206,4) dem::records::Particle::getCentreOfMass(tarch::la::Vector<3, double> *, const dem::records::Particle *) const (isz = 19) (sz = 26)
    -> INLINE (MANUAL): ./dem/records/Particle.h:(12710,68) tarch::la::Vector<3, double>::Vector(tarch::la::Vector<3, double> *, const tarch::la::Vector<3, double> &) (isz = 17) (sz = 24)
      -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()
  -> INLINE (MANUAL): (3207,4) dem::records::Particle::getReferencialAngular(tarch::la::Vector<3, double> *, const dem::records::Particle *) const (isz = 19) (sz = 26)
    -> INLINE (MANUAL): ./dem/records/Particle.h:(12794,68) tarch::la::Vector<3, double>::Vector(tarch::la::Vector<3, double> *, const tarch::la::Vector<3, double> &) (isz = 17) (sz = 24)
      -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()
  -> INLINE (MANUAL): (3208,4) dem::records::Particle::getReferentialCentreOfMass(tarch::la::Vector<3, double> *, const dem::records::Particle *) const (isz = 19) (sz = 26)
    -> INLINE (MANUAL): ./dem/records/Particle.h:(12878,68) tarch::la::Vector<3, double>::Vector(tarch::la::Vector<3, double> *, const tarch::la::Vector<3, double> &) (isz = 17) (sz = 24)
      -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()
  -> INLINE (MANUAL): (3209,4) dem::records::Particle::getVelocity(tarch::la::Vector<3, double> *, const dem::records::Particle *) const (isz = 19) (sz = 26)
    -> INLINE (MANUAL): ./dem/records/Particle.h:(12962,68) tarch::la::Vector<3, double>::Vector(tarch::la::Vector<3, double> *, const tarch::la::Vector<3, double> &) (isz = 17) (sz = 24)
      -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()
  -> INLINE (MANUAL): (3210,4) dem::records::Particle::getAngular(tarch::la::Vector<3, double> *, const dem::records::Particle *) const (isz = 19) (sz = 26)
    -> INLINE (MANUAL): ./dem/records/Particle.h:(13046,68) tarch::la::Vector<3, double>::Vector(tarch::la::Vector<3, double> *, const tarch::la::Vector<3, double> &) (isz = 17) (sz = 24)
      -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()
  -> INLINE (MANUAL): (3211,4) dem::records::Particle::getDiameter(const dem::records::Particle *) const (isz = 0) (sz = 6)
  -> INLINE (MANUAL): (3212,4) dem::records::Particle::getInfluenceRadius(const dem::records::Particle *) const (isz = 0) (sz = 6)
  -> INLINE (MANUAL): (3213,4) dem::records::Particle::getEpsilon(const dem::records::Particle *) const (isz = 0) (sz = 6)
  -> INLINE (MANUAL): (3214,4) dem::records::Particle::getMass(const dem::records::Particle *) const (isz = 0) (sz = 6)
  -> INLINE (MANUAL): (3215,4) dem::records::Particle::getHMin(const dem::records::Particle *) const (isz = 0) (sz = 6)
  -> INLINE (MANUAL): (3216,4) dem::records::Particle::getGlobalParticleNumber(const dem::records::Particle *) const (isz = 0) (sz = 6)
  -> INLINE (MANUAL): (3217,4) dem::records::Particle::getNumberOfTriangles(const dem::records::Particle *) const (isz = 0) (sz = 6)
  -> INLINE: (3218,4) dem::records::ParticlePacked::ParticlePacked(dem::records::ParticlePacked *, const tarch::la::Vector<6, int> &, const tarch::la::Vector<9, double> &, const tarch::la::Vector<9, double> &, const tarch::la::Vector<9, double> &, const tarch::la::Vector<3, double> &, const tarch::la::Vector<3, double> &, const tarch::la::Vector<3, double> &, const tarch::la::Vector<3, double> &, const tarch::la::Vector<3, double> &, const tarch::la::Vector<3, double> &, const double &, const double &, const double &, const double &, const double &, const int &, const int &, const int &) (isz = 226) (sz = 267)
    -> INLINE: (3607,236) dem::records::ParticlePacked::PersistentRecords::PersistentRecords(dem::records::ParticlePacked::PersistentRecords *, const tarch::la::Vector<6, int> &, const tarch::la::Vector<9, double> &, const tarch::la::Vector<9, double> &, const tarch::la::Vector<9, double> &, const tarch::la::Vector<3, double> &, const tarch::la::Vector<3, double> &, const tarch::la::Vector<3, double> &, const tarch::la::Vector<3, double> &, const tarch::la::Vector<3, double> &, const tarch::la::Vector<3, double> &, const double &, const double &, const double &, const double &, const double &, const int &, const int &, const int &) (isz = 224) (sz = 265)
      -> INLINE (MANUAL): (3574,11) tarch::la::Vector<6, int>::Vector(tarch::la::Vector<6, int> *, const tarch::la::Vector<6, int> &) (isz = 17) (sz = 24)
        -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()
      -> INLINE (MANUAL): (3575,14) tarch::la::Vector<9, double>::Vector(tarch::la::Vector<9, double> *, const tarch::la::Vector<9, double> &) (isz = 17) (sz = 24)
        -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()
      -> INLINE (MANUAL): (3576,10) tarch::la::Vector<9, double>::Vector(tarch::la::Vector<9, double> *, const tarch::la::Vector<9, double> &) (isz = 17) (sz = 24)
        -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()
      -> INLINE (MANUAL): (3577,10) tarch::la::Vector<9, double>::Vector(tarch::la::Vector<9, double> *, const tarch::la::Vector<9, double> &) (isz = 17) (sz = 24)
        -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()
      -> INLINE (MANUAL): (3578,9) tarch::la::Vector<3, double>::Vector(tarch::la::Vector<3, double> *, const tarch::la::Vector<3, double> &) (isz = 17) (sz = 24)
        -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()
      -> INLINE (MANUAL): (3579,15) tarch::la::Vector<3, double>::Vector(tarch::la::Vector<3, double> *, const tarch::la::Vector<3, double> &) (isz = 17) (sz = 24)
        -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()
      -> INLINE (MANUAL): (3580,21) tarch::la::Vector<3, double>::Vector(tarch::la::Vector<3, double> *, const tarch::la::Vector<3, double> &) (isz = 17) (sz = 24)
        -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()
      -> INLINE (MANUAL): (3581,26) tarch::la::Vector<3, double>::Vector(tarch::la::Vector<3, double> *, const tarch::la::Vector<3, double> &) (isz = 17) (sz = 24)
        -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()
      -> INLINE (MANUAL): (3582,11) tarch::la::Vector<3, double>::Vector(tarch::la::Vector<3, double> *, const tarch::la::Vector<3, double> &) (isz = 17) (sz = 24)
        -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()
      -> INLINE (MANUAL): (3583,10) tarch::la::Vector<3, double>::Vector(tarch::la::Vector<3, double> *, const tarch::la::Vector<3, double> &) (isz = 17) (sz = 24)
        -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()
  -> INLINE (MANUAL): (3218,4) dem::records::Particle::getMaterial(const dem::records::Particle *) const (isz = 0) (sz = 6)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3201,4)
   remark #15388: vectorization support: reference U17_V._values[i] has aligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15389: vectorization support: reference toCopy->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.750
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.000 
   remark #15478: estimated potential speedup: 1.600 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3201,4)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 2  
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3202,4)
   remark #15388: vectorization support: reference U18_V._values[i] has aligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15389: vectorization support: reference toCopy->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.188
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.000 
   remark #15478: estimated potential speedup: 1.560 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3202,4)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 1  
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3203,4)
   remark #15388: vectorization support: reference U19_V._values[i] has aligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15389: vectorization support: reference toCopy->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.188
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.000 
   remark #15478: estimated potential speedup: 1.560 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3203,4)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 1  
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3204,4)
   remark #15388: vectorization support: reference U1a_V._values[i] has aligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15389: vectorization support: reference toCopy->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.188
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.000 
   remark #15478: estimated potential speedup: 1.560 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3204,4)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 1  
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3205,4)
   remark #15388: vectorization support: reference U1b_V._values[i] has aligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15389: vectorization support: reference toCopy->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.750
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.000 
   remark #15478: estimated potential speedup: 1.090 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3205,4)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 1  
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3206,4)
   remark #15388: vectorization support: reference U1c_V._values[i] has aligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15389: vectorization support: reference toCopy->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.750
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.000 
   remark #15478: estimated potential speedup: 1.090 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3206,4)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 1  
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3207,4)
   remark #15388: vectorization support: reference U1d_V._values[i] has aligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15389: vectorization support: reference toCopy->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.750
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.000 
   remark #15478: estimated potential speedup: 1.090 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3207,4)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 1  
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3208,4)
   remark #15388: vectorization support: reference U1e_V._values[i] has aligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15389: vectorization support: reference toCopy->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.750
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.000 
   remark #15478: estimated potential speedup: 1.090 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3208,4)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 1  
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3209,4)
   remark #15388: vectorization support: reference U1f_V._values[i] has aligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15389: vectorization support: reference toCopy->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.750
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.000 
   remark #15478: estimated potential speedup: 1.090 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3209,4)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 1  
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3210,4)
   remark #15388: vectorization support: reference U20_V._values[i] has aligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15389: vectorization support: reference toCopy->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.750
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.000 
   remark #15478: estimated potential speedup: 1.090 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3210,4)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 1  
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3218,4)
   remark #15389: vectorization support: reference this->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15388: vectorization support: reference U17_V._values[i] has aligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.600
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.250 
   remark #15478: estimated potential speedup: 1.490 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3218,4)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 2  
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3218,4)
   remark #15389: vectorization support: reference this->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15388: vectorization support: reference U18_V._values[i] has aligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.150
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.330 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3218,4)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 1  
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3218,4)
   remark #15389: vectorization support: reference this->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15388: vectorization support: reference U19_V._values[i] has aligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.150
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.330 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3218,4)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 1  
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3218,4)
   remark #15389: vectorization support: reference this->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15388: vectorization support: reference U1a_V._values[i] has aligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.150
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.330 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3218,4)
   remark #15389: vectorization support: reference this->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15388: vectorization support: reference U1b_V._values[i] has aligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.600
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.000 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3218,4)
   remark #15389: vectorization support: reference this->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15388: vectorization support: reference U1c_V._values[i] has aligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.600
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.000 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3218,4)
   remark #15389: vectorization support: reference this->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15388: vectorization support: reference U1d_V._values[i] has aligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.600
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.000 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3218,4)
   remark #15389: vectorization support: reference this->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15388: vectorization support: reference U1e_V._values[i] has aligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.600
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.000 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3218,4)
   remark #15389: vectorization support: reference this->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15388: vectorization support: reference U1f_V._values[i] has aligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.600
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.000 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3218,4)
   remark #15389: vectorization support: reference this->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15388: vectorization support: reference U20_V._values[i] has aligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.600
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.000 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3218,4)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 1  
LOOP END

    Report from: Code generation optimizations [cg]

./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (16, 0)
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (16, 0)
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (16, 0)
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (16, 0)
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (16, 0)
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (16, 0)
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (16, 0)
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (16, 0)
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (16, 0)
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (16, 0)
./tarch/la/Vector.cpph(63,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(63,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(63,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(63,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(63,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(63,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(63,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(63,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(63,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(63,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
dem/records/Particle.cpp(3199,69):remark #34051: REGISTER ALLOCATION : [_ZNK3dem7records8Particle7convertEv] dem/records/Particle.cpp:3199

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   15[ rax rdx rcx rsi rdi r8-r11 r15 zmm0-zmm4]
        
    Routine temporaries
        Total         :      85
            Global    :      17
            Local     :      68
        Regenerable   :       1
        Spilled       :       1
        
    Routine stack
        Variables     :     384 bytes*
            Reads     :      36 [3.60e+01 ~ 16.0%]
            Writes    :      59 [5.90e+01 ~ 26.2%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: dem::records::Particle::PersistentRecords::PersistentRecords(dem::records::Particle::PersistentRecords *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (dem::records::Particle::PersistentRecords::PersistentRecords(dem::records::Particle::PersistentRecords *)) [108/166=65.1%] dem/records/Particle.cpp(3060,64)
  -> INLINE (MANUAL): (3060,44) tarch::la::Vector<3, double>::Vector(tarch::la::Vector<3, double> *) (isz = 5) (sz = 10)
    -> EXTERN: ./tarch/la/Vector.cpph:(6,13) memset()
  -> INLINE (MANUAL): (3060,44) tarch::la::Vector<3, double>::Vector(tarch::la::Vector<3, double> *) (isz = 5) (sz = 10)
    -> EXTERN: ./tarch/la/Vector.cpph:(6,13) memset()
  -> INLINE (MANUAL): (3060,44) tarch::la::Vector<3, double>::Vector(tarch::la::Vector<3, double> *) (isz = 5) (sz = 10)
    -> EXTERN: ./tarch/la/Vector.cpph:(6,13) memset()
  -> INLINE (MANUAL): (3060,44) tarch::la::Vector<3, double>::Vector(tarch::la::Vector<3, double> *) (isz = 5) (sz = 10)
    -> EXTERN: ./tarch/la/Vector.cpph:(6,13) memset()
  -> INLINE (MANUAL): (3060,44) tarch::la::Vector<3, double>::Vector(tarch::la::Vector<3, double> *) (isz = 5) (sz = 10)
    -> EXTERN: ./tarch/la/Vector.cpph:(6,13) memset()
  -> INLINE (MANUAL): (3060,44) tarch::la::Vector<3, double>::Vector(tarch::la::Vector<3, double> *) (isz = 5) (sz = 10)
    -> EXTERN: ./tarch/la/Vector.cpph:(6,13) memset()
  -> INLINE (MANUAL): (3060,44) tarch::la::Vector<9, double>::Vector(tarch::la::Vector<9, double> *) (isz = 5) (sz = 10)
    -> EXTERN: ./tarch/la/Vector.cpph:(6,13) memset()
  -> INLINE (MANUAL): (3060,44) tarch::la::Vector<9, double>::Vector(tarch::la::Vector<9, double> *) (isz = 5) (sz = 10)
    -> EXTERN: ./tarch/la/Vector.cpph:(6,13) memset()
  -> INLINE (MANUAL): (3060,44) tarch::la::Vector<9, double>::Vector(tarch::la::Vector<9, double> *) (isz = 5) (sz = 10)
    -> EXTERN: ./tarch/la/Vector.cpph:(6,13) memset()
  -> INLINE (MANUAL): (3060,44) tarch::la::Vector<6, int>::Vector(tarch::la::Vector<6, int> *) (isz = 5) (sz = 10)
    -> EXTERN: ./tarch/la/Vector.cpph:(6,13) memset()


    Report from: Code generation optimizations [cg]

./tarch/la/Vector.cpph(6,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(6,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(6,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(6,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(6,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(6,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(6,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(6,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(6,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(6,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(6,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(6,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(6,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(6,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(6,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(6,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(6,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(6,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(6,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(6,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
dem/records/Particle.cpp(3060,64):remark #34051: REGISTER ALLOCATION : [_ZN3dem7records8Particle17PersistentRecordsC1Ev] dem/records/Particle.cpp:3060

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    2[ rdi zmm0]
        
    Routine temporaries
        Total         :       9
            Global    :       8
            Local     :       1
        Regenerable   :       1
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: dem::records::Particle::PersistentRecords::PersistentRecords(dem::records::Particle::PersistentRecords *const)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (dem::records::Particle::PersistentRecords::PersistentRecords(dem::records::Particle::PersistentRecords *const)) [109/166=65.7%] dem/records/Particle.cpp(3060,44)
  -> INLINE: (3060,44) dem::records::Particle::PersistentRecords::PersistentRecords(dem::records::Particle::PersistentRecords *) (isz = 88) (sz = 93)
    -> INLINE (MANUAL): (3060,44) tarch::la::Vector<6, int>::Vector(tarch::la::Vector<6, int> *) (isz = 5) (sz = 10)
      -> EXTERN: ./tarch/la/Vector.cpph:(6,13) memset()
    -> INLINE (MANUAL): (3060,44) tarch::la::Vector<9, double>::Vector(tarch::la::Vector<9, double> *) (isz = 5) (sz = 10)
      -> EXTERN: ./tarch/la/Vector.cpph:(6,13) memset()
    -> INLINE (MANUAL): (3060,44) tarch::la::Vector<9, double>::Vector(tarch::la::Vector<9, double> *) (isz = 5) (sz = 10)
      -> EXTERN: ./tarch/la/Vector.cpph:(6,13) memset()
    -> INLINE (MANUAL): (3060,44) tarch::la::Vector<9, double>::Vector(tarch::la::Vector<9, double> *) (isz = 5) (sz = 10)
      -> EXTERN: ./tarch/la/Vector.cpph:(6,13) memset()
    -> INLINE (MANUAL): (3060,44) tarch::la::Vector<3, double>::Vector(tarch::la::Vector<3, double> *) (isz = 5) (sz = 10)
      -> EXTERN: ./tarch/la/Vector.cpph:(6,13) memset()
    -> INLINE (MANUAL): (3060,44) tarch::la::Vector<3, double>::Vector(tarch::la::Vector<3, double> *) (isz = 5) (sz = 10)
      -> EXTERN: ./tarch/la/Vector.cpph:(6,13) memset()
    -> INLINE (MANUAL): (3060,44) tarch::la::Vector<3, double>::Vector(tarch::la::Vector<3, double> *) (isz = 5) (sz = 10)
      -> EXTERN: ./tarch/la/Vector.cpph:(6,13) memset()
    -> INLINE (MANUAL): (3060,44) tarch::la::Vector<3, double>::Vector(tarch::la::Vector<3, double> *) (isz = 5) (sz = 10)
      -> EXTERN: ./tarch/la/Vector.cpph:(6,13) memset()
    -> INLINE (MANUAL): (3060,44) tarch::la::Vector<3, double>::Vector(tarch::la::Vector<3, double> *) (isz = 5) (sz = 10)
      -> EXTERN: ./tarch/la/Vector.cpph:(6,13) memset()
    -> INLINE (MANUAL): (3060,44) tarch::la::Vector<3, double>::Vector(tarch::la::Vector<3, double> *) (isz = 5) (sz = 10)
      -> EXTERN: ./tarch/la/Vector.cpph:(6,13) memset()


    Report from: Code generation optimizations [cg]

./tarch/la/Vector.cpph(6,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(6,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(6,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(6,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(6,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(6,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(6,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(6,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(6,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(6,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(6,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(6,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(6,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(6,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(6,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(6,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(6,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(6,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(6,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(6,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
dem/records/Particle.cpp(3060,44):remark #34051: REGISTER ALLOCATION : [_ZN3dem7records8Particle17PersistentRecordsC2Ev] dem/records/Particle.cpp:3060

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    2[ rdi zmm0]
        
    Routine temporaries
        Total         :       9
            Global    :       8
            Local     :       1
        Regenerable   :       1
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: dem::records::Particle::PersistentRecords::PersistentRecords(dem::records::Particle::PersistentRecords *, const tarch::la::Vector<6, int> &, const tarch::la::Vector<9, double> &, const tarch::la::Vector<9, double> &, const tarch::la::Vector<9, double> &, const tarch::la::Vector<3, double> &, const tarch::la::Vector<3, double> &, const tarch::la::Vector<3, double> &, const tarch::la::Vector<3, double> &, const tarch::la::Vector<3, double> &, const tarch::la::Vector<3, double> &, const double &, const double &, const double &, const double &, const double &, const int &, const int &, const int &)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (dem::records::Particle::PersistentRecords::PersistentRecords(dem::records::Particle::PersistentRecords *, const tarch::la::Vector<6, int> &, const tarch::la::Vector<9, double> &, const tarch::la::Vector<9, double> &, const tarch::la::Vector<9, double> &, const tarch::la::Vector<3, double> &, const tarch::la::Vector<3, double> &, const tarch::la::Vector<3, double> &, const tarch::la::Vector<3, double> &, const tarch::la::Vector<3, double> &, const tarch::la::Vector<3, double> &, const double &, const double &, const double &, const double &, const double &, const int &, const int &, const int &)) [110/166=66.3%] dem/records/Particle.cpp(3083,21)
  -> INLINE (MANUAL): (3066,11) tarch::la::Vector<6, int>::Vector(tarch::la::Vector<6, int> *, const tarch::la::Vector<6, int> &) (isz = 17) (sz = 24)
    -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()
  -> INLINE (MANUAL): (3067,14) tarch::la::Vector<9, double>::Vector(tarch::la::Vector<9, double> *, const tarch::la::Vector<9, double> &) (isz = 17) (sz = 24)
    -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()
  -> INLINE (MANUAL): (3068,10) tarch::la::Vector<9, double>::Vector(tarch::la::Vector<9, double> *, const tarch::la::Vector<9, double> &) (isz = 17) (sz = 24)
    -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()
  -> INLINE (MANUAL): (3069,10) tarch::la::Vector<9, double>::Vector(tarch::la::Vector<9, double> *, const tarch::la::Vector<9, double> &) (isz = 17) (sz = 24)
    -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()
  -> INLINE (MANUAL): (3070,9) tarch::la::Vector<3, double>::Vector(tarch::la::Vector<3, double> *, const tarch::la::Vector<3, double> &) (isz = 17) (sz = 24)
    -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()
  -> INLINE (MANUAL): (3071,15) tarch::la::Vector<3, double>::Vector(tarch::la::Vector<3, double> *, const tarch::la::Vector<3, double> &) (isz = 17) (sz = 24)
    -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()
  -> INLINE (MANUAL): (3072,21) tarch::la::Vector<3, double>::Vector(tarch::la::Vector<3, double> *, const tarch::la::Vector<3, double> &) (isz = 17) (sz = 24)
    -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()
  -> INLINE (MANUAL): (3073,26) tarch::la::Vector<3, double>::Vector(tarch::la::Vector<3, double> *, const tarch::la::Vector<3, double> &) (isz = 17) (sz = 24)
    -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()
  -> INLINE (MANUAL): (3074,11) tarch::la::Vector<3, double>::Vector(tarch::la::Vector<3, double> *, const tarch::la::Vector<3, double> &) (isz = 17) (sz = 24)
    -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()
  -> INLINE (MANUAL): (3075,10) tarch::la::Vector<3, double>::Vector(tarch::la::Vector<3, double> *, const tarch::la::Vector<3, double> &) (isz = 17) (sz = 24)
    -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3066,11)
   remark #15389: vectorization support: reference this->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15389: vectorization support: reference vertices->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 1.000
   remark #15300: LOOP WAS VECTORIZED
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.200 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3066,11)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 2  
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3067,14)
<Peeled loop for vectorization>
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3067,14)
   remark #15388: vectorization support: reference this->_values[i] has aligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15389: vectorization support: reference orientation->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 3.333
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.200 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=4
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3067,14)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3068,10)
<Peeled loop for vectorization>
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3068,10)
   remark #15388: vectorization support: reference this->_values[i] has aligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15389: vectorization support: reference inertia->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 3.333
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.200 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=4
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3068,10)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3069,10)
<Peeled loop for vectorization>
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3069,10)
   remark #15388: vectorization support: reference this->_values[i] has aligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15389: vectorization support: reference inverse->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 3.333
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.200 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=4
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3069,10)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3070,9)
   remark #15389: vectorization support: reference this->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15389: vectorization support: reference centre->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 1.000
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.750 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3071,15)
   remark #15389: vectorization support: reference this->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15389: vectorization support: reference centreOfMass->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 1.000
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.750 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3072,21)
   remark #15389: vectorization support: reference this->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15389: vectorization support: reference referencialAngular->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 1.000
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.750 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3073,26)
   remark #15389: vectorization support: reference this->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15389: vectorization support: reference referentialCentreOfMass->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 1.000
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.750 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3074,11)
   remark #15389: vectorization support: reference this->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15389: vectorization support: reference velocity->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 1.000
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.750 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3075,10)
   remark #15389: vectorization support: reference this->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15389: vectorization support: reference angular->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 1.000
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.750 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

    Report from: Code generation optimizations [cg]

./tarch/la/Vector.cpph(63,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(63,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(63,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(63,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(63,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(63,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(63,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(63,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(63,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(63,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
dem/records/Particle.cpp(3083,21):remark #34051: REGISTER ALLOCATION : [_ZN3dem7records8Particle17PersistentRecordsC1ERKN5tarch2la6VectorILi6EiEERKNS5_ILi9EdEESB_SB_RKNS5_ILi3EdEESE_SE_SE_SE_SE_RKdSG_SG_SG_SG_RKiSI_SI_] dem/records/Particle.cpp:3083

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   11[ rax rdx rcx rsi rdi r8-r11 zmm0-zmm1]
        
    Routine temporaries
        Total         :     103
            Global    :      25
            Local     :      78
        Regenerable   :       1
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: dem::records::Particle::PersistentRecords::PersistentRecords(dem::records::Particle::PersistentRecords *const, const tarch::la::Vector<6, int> &, const tarch::la::Vector<9, double> &, const tarch::la::Vector<9, double> &, const tarch::la::Vector<9, double> &, const tarch::la::Vector<3, double> &, const tarch::la::Vector<3, double> &, const tarch::la::Vector<3, double> &, const tarch::la::Vector<3, double> &, const tarch::la::Vector<3, double> &, const tarch::la::Vector<3, double> &, const double &, const double &, const double &, const double &, const double &, const int &, const int &, const int &)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (dem::records::Particle::PersistentRecords::PersistentRecords(dem::records::Particle::PersistentRecords *const, const tarch::la::Vector<6, int> &, const tarch::la::Vector<9, double> &, const tarch::la::Vector<9, double> &, const tarch::la::Vector<9, double> &, const tarch::la::Vector<3, double> &, const tarch::la::Vector<3, double> &, const tarch::la::Vector<3, double> &, const tarch::la::Vector<3, double> &, const tarch::la::Vector<3, double> &, const tarch::la::Vector<3, double> &, const double &, const double &, const double &, const double &, const double &, const int &, const int &, const int &)) [111/166=66.9%] dem/records/Particle.cpp(3065,44)
  -> INLINE: (3065,44) dem::records::Particle::PersistentRecords::PersistentRecords(dem::records::Particle::PersistentRecords *, const tarch::la::Vector<6, int> &, const tarch::la::Vector<9, double> &, const tarch::la::Vector<9, double> &, const tarch::la::Vector<9, double> &, const tarch::la::Vector<3, double> &, const tarch::la::Vector<3, double> &, const tarch::la::Vector<3, double> &, const tarch::la::Vector<3, double> &, const tarch::la::Vector<3, double> &, const tarch::la::Vector<3, double> &, const double &, const double &, const double &, const double &, const double &, const int &, const int &, const int &) (isz = 224) (sz = 265)
    -> INLINE (MANUAL): (3066,11) tarch::la::Vector<6, int>::Vector(tarch::la::Vector<6, int> *, const tarch::la::Vector<6, int> &) (isz = 17) (sz = 24)
      -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()
    -> INLINE (MANUAL): (3067,14) tarch::la::Vector<9, double>::Vector(tarch::la::Vector<9, double> *, const tarch::la::Vector<9, double> &) (isz = 17) (sz = 24)
      -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()
    -> INLINE (MANUAL): (3068,10) tarch::la::Vector<9, double>::Vector(tarch::la::Vector<9, double> *, const tarch::la::Vector<9, double> &) (isz = 17) (sz = 24)
      -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()
    -> INLINE (MANUAL): (3069,10) tarch::la::Vector<9, double>::Vector(tarch::la::Vector<9, double> *, const tarch::la::Vector<9, double> &) (isz = 17) (sz = 24)
      -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()
    -> INLINE (MANUAL): (3070,9) tarch::la::Vector<3, double>::Vector(tarch::la::Vector<3, double> *, const tarch::la::Vector<3, double> &) (isz = 17) (sz = 24)
      -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()
    -> INLINE (MANUAL): (3071,15) tarch::la::Vector<3, double>::Vector(tarch::la::Vector<3, double> *, const tarch::la::Vector<3, double> &) (isz = 17) (sz = 24)
      -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()
    -> INLINE (MANUAL): (3072,21) tarch::la::Vector<3, double>::Vector(tarch::la::Vector<3, double> *, const tarch::la::Vector<3, double> &) (isz = 17) (sz = 24)
      -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()
    -> INLINE (MANUAL): (3073,26) tarch::la::Vector<3, double>::Vector(tarch::la::Vector<3, double> *, const tarch::la::Vector<3, double> &) (isz = 17) (sz = 24)
      -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()
    -> INLINE (MANUAL): (3074,11) tarch::la::Vector<3, double>::Vector(tarch::la::Vector<3, double> *, const tarch::la::Vector<3, double> &) (isz = 17) (sz = 24)
      -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()
    -> INLINE (MANUAL): (3075,10) tarch::la::Vector<3, double>::Vector(tarch::la::Vector<3, double> *, const tarch::la::Vector<3, double> &) (isz = 17) (sz = 24)
      -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3065,44)
   remark #15389: vectorization support: reference this->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15389: vectorization support: reference __p2->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 1.000
   remark #15300: LOOP WAS VECTORIZED
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.200 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3065,44)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 2  
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3065,44)
<Peeled loop for vectorization>
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3065,44)
   remark #15388: vectorization support: reference this->_values[i] has aligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15389: vectorization support: reference __p3->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 3.333
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.200 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=4
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3065,44)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3065,44)
<Peeled loop for vectorization>
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3065,44)
   remark #15388: vectorization support: reference this->_values[i] has aligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15389: vectorization support: reference __p4->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 3.333
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.200 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=4
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3065,44)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3065,44)
<Peeled loop for vectorization>
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3065,44)
   remark #15388: vectorization support: reference this->_values[i] has aligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15389: vectorization support: reference __p5->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 3.333
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.200 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=4
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3065,44)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3065,44)
   remark #15389: vectorization support: reference this->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15389: vectorization support: reference __p6->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 1.000
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.750 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3065,44)
   remark #15389: vectorization support: reference this->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15389: vectorization support: reference __p7->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 1.000
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.750 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3065,44)
   remark #15389: vectorization support: reference this->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15389: vectorization support: reference __p8->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 1.000
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.750 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3065,44)
   remark #15389: vectorization support: reference this->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15389: vectorization support: reference __p9->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 1.000
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.750 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3065,44)
   remark #15389: vectorization support: reference this->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15389: vectorization support: reference __p10->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 1.000
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.750 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3065,44)
   remark #15389: vectorization support: reference this->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15389: vectorization support: reference __p11->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 1.000
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.750 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

    Report from: Code generation optimizations [cg]

./tarch/la/Vector.cpph(63,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(63,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(63,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(63,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(63,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(63,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(63,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(63,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(63,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(63,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
dem/records/Particle.cpp(3065,44):remark #34051: REGISTER ALLOCATION : [_ZN3dem7records8Particle17PersistentRecordsC2ERKN5tarch2la6VectorILi6EiEERKNS5_ILi9EdEESB_SB_RKNS5_ILi3EdEESE_SE_SE_SE_SE_RKdSG_SG_SG_SG_RKiSI_SI_] dem/records/Particle.cpp:3065

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   11[ rax rdx rcx rsi rdi r8-r11 zmm0-zmm1]
        
    Routine temporaries
        Total         :     103
            Global    :      25
            Local     :      78
        Regenerable   :       1
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: dem::records::Particle::PersistentRecords::PersistentRecords(dem::records::Particle::PersistentRecords *, const dem::records::Particle::PersistentRecords &)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (dem::records::Particle::PersistentRecords::PersistentRecords(dem::records::Particle::PersistentRecords *, const dem::records::Particle::PersistentRecords &)) ./dem/records/Particle.h(11425,65)

===========================================================================

Begin optimization report for: dem::records::ParticlePacked::ParticlePacked(dem::records::ParticlePacked *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (dem::records::ParticlePacked::ParticlePacked(dem::records::ParticlePacked *)) [113/166=68.1%] dem/records/Particle.cpp(3595,48)
  -> INLINE: (3595,31) dem::records::ParticlePacked::PersistentRecords::PersistentRecords(dem::records::ParticlePacked::PersistentRecords *) (isz = 88) (sz = 93)
    -> INLINE (MANUAL): (3568,50) tarch::la::Vector<6, int>::Vector(tarch::la::Vector<6, int> *) (isz = 5) (sz = 10)
      -> EXTERN: ./tarch/la/Vector.cpph:(6,13) memset()
    -> INLINE (MANUAL): (3568,50) tarch::la::Vector<9, double>::Vector(tarch::la::Vector<9, double> *) (isz = 5) (sz = 10)
      -> EXTERN: ./tarch/la/Vector.cpph:(6,13) memset()
    -> INLINE (MANUAL): (3568,50) tarch::la::Vector<9, double>::Vector(tarch::la::Vector<9, double> *) (isz = 5) (sz = 10)
      -> EXTERN: ./tarch/la/Vector.cpph:(6,13) memset()
    -> INLINE (MANUAL): (3568,50) tarch::la::Vector<9, double>::Vector(tarch::la::Vector<9, double> *) (isz = 5) (sz = 10)
      -> EXTERN: ./tarch/la/Vector.cpph:(6,13) memset()
    -> INLINE (MANUAL): (3568,50) tarch::la::Vector<3, double>::Vector(tarch::la::Vector<3, double> *) (isz = 5) (sz = 10)
      -> EXTERN: ./tarch/la/Vector.cpph:(6,13) memset()
    -> INLINE (MANUAL): (3568,50) tarch::la::Vector<3, double>::Vector(tarch::la::Vector<3, double> *) (isz = 5) (sz = 10)
      -> EXTERN: ./tarch/la/Vector.cpph:(6,13) memset()
    -> INLINE (MANUAL): (3568,50) tarch::la::Vector<3, double>::Vector(tarch::la::Vector<3, double> *) (isz = 5) (sz = 10)
      -> EXTERN: ./tarch/la/Vector.cpph:(6,13) memset()
    -> INLINE (MANUAL): (3568,50) tarch::la::Vector<3, double>::Vector(tarch::la::Vector<3, double> *) (isz = 5) (sz = 10)
      -> EXTERN: ./tarch/la/Vector.cpph:(6,13) memset()
    -> INLINE (MANUAL): (3568,50) tarch::la::Vector<3, double>::Vector(tarch::la::Vector<3, double> *) (isz = 5) (sz = 10)
      -> EXTERN: ./tarch/la/Vector.cpph:(6,13) memset()
    -> INLINE (MANUAL): (3568,50) tarch::la::Vector<3, double>::Vector(tarch::la::Vector<3, double> *) (isz = 5) (sz = 10)
      -> EXTERN: ./tarch/la/Vector.cpph:(6,13) memset()


    Report from: Code generation optimizations [cg]

./tarch/la/Vector.cpph(6,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(6,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(6,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(6,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(6,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(6,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(6,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(6,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(6,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(6,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(6,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(6,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(6,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(6,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(6,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(6,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(6,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(6,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(6,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(6,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
dem/records/Particle.cpp(3595,48):remark #34051: REGISTER ALLOCATION : [_ZN3dem7records14ParticlePackedC1Ev] dem/records/Particle.cpp:3595

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    2[ rdi zmm0]
        
    Routine temporaries
        Total         :       9
            Global    :       8
            Local     :       1
        Regenerable   :       1
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: dem::records::ParticlePacked::ParticlePacked(dem::records::ParticlePacked *const)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (dem::records::ParticlePacked::ParticlePacked(dem::records::ParticlePacked *const)) [114/166=68.7%] dem/records/Particle.cpp(3595,31)
  -> INLINE: (3595,31) dem::records::ParticlePacked::ParticlePacked(dem::records::ParticlePacked *) (isz = 90) (sz = 95)
    -> INLINE: (3595,31) dem::records::ParticlePacked::PersistentRecords::PersistentRecords(dem::records::ParticlePacked::PersistentRecords *) (isz = 88) (sz = 93)
      -> INLINE (MANUAL): (3568,50) tarch::la::Vector<6, int>::Vector(tarch::la::Vector<6, int> *) (isz = 5) (sz = 10)
        -> EXTERN: ./tarch/la/Vector.cpph:(6,13) memset()
      -> INLINE (MANUAL): (3568,50) tarch::la::Vector<9, double>::Vector(tarch::la::Vector<9, double> *) (isz = 5) (sz = 10)
        -> EXTERN: ./tarch/la/Vector.cpph:(6,13) memset()
      -> INLINE (MANUAL): (3568,50) tarch::la::Vector<9, double>::Vector(tarch::la::Vector<9, double> *) (isz = 5) (sz = 10)
        -> EXTERN: ./tarch/la/Vector.cpph:(6,13) memset()
      -> INLINE (MANUAL): (3568,50) tarch::la::Vector<9, double>::Vector(tarch::la::Vector<9, double> *) (isz = 5) (sz = 10)
        -> EXTERN: ./tarch/la/Vector.cpph:(6,13) memset()
      -> INLINE (MANUAL): (3568,50) tarch::la::Vector<3, double>::Vector(tarch::la::Vector<3, double> *) (isz = 5) (sz = 10)
        -> EXTERN: ./tarch/la/Vector.cpph:(6,13) memset()
      -> INLINE (MANUAL): (3568,50) tarch::la::Vector<3, double>::Vector(tarch::la::Vector<3, double> *) (isz = 5) (sz = 10)
        -> EXTERN: ./tarch/la/Vector.cpph:(6,13) memset()
      -> INLINE (MANUAL): (3568,50) tarch::la::Vector<3, double>::Vector(tarch::la::Vector<3, double> *) (isz = 5) (sz = 10)
        -> EXTERN: ./tarch/la/Vector.cpph:(6,13) memset()
      -> INLINE (MANUAL): (3568,50) tarch::la::Vector<3, double>::Vector(tarch::la::Vector<3, double> *) (isz = 5) (sz = 10)
        -> EXTERN: ./tarch/la/Vector.cpph:(6,13) memset()
      -> INLINE (MANUAL): (3568,50) tarch::la::Vector<3, double>::Vector(tarch::la::Vector<3, double> *) (isz = 5) (sz = 10)
        -> EXTERN: ./tarch/la/Vector.cpph:(6,13) memset()
      -> INLINE (MANUAL): (3568,50) tarch::la::Vector<3, double>::Vector(tarch::la::Vector<3, double> *) (isz = 5) (sz = 10)
        -> EXTERN: ./tarch/la/Vector.cpph:(6,13) memset()


    Report from: Code generation optimizations [cg]

./tarch/la/Vector.cpph(6,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(6,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(6,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(6,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(6,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(6,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(6,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(6,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(6,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(6,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(6,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(6,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(6,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(6,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(6,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(6,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(6,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(6,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(6,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(6,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
dem/records/Particle.cpp(3595,31):remark #34051: REGISTER ALLOCATION : [_ZN3dem7records14ParticlePackedC2Ev] dem/records/Particle.cpp:3595

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    2[ rdi zmm0]
        
    Routine temporaries
        Total         :       9
            Global    :       8
            Local     :       1
        Regenerable   :       1
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: dem::records::ParticlePacked::ParticlePacked(dem::records::ParticlePacked *, const dem::records::ParticlePacked::PersistentRecords &)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (dem::records::ParticlePacked::ParticlePacked(dem::records::ParticlePacked *, const dem::records::ParticlePacked::PersistentRecords &)) [115/166=69.3%] dem/records/Particle.cpp(3601,588)
  -> INLINE: (3601,559) dem::records::ParticlePacked::PersistentRecords::PersistentRecords(dem::records::ParticlePacked::PersistentRecords *, const tarch::la::Vector<6, int> &, const tarch::la::Vector<9, double> &, const tarch::la::Vector<9, double> &, const tarch::la::Vector<9, double> &, const tarch::la::Vector<3, double> &, const tarch::la::Vector<3, double> &, const tarch::la::Vector<3, double> &, const tarch::la::Vector<3, double> &, const tarch::la::Vector<3, double> &, const tarch::la::Vector<3, double> &, const double &, const double &, const double &, const double &, const double &, const int &, const int &, const int &) (isz = 224) (sz = 265)
    -> INLINE (MANUAL): (3574,11) tarch::la::Vector<6, int>::Vector(tarch::la::Vector<6, int> *, const tarch::la::Vector<6, int> &) (isz = 17) (sz = 24)
      -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()
    -> INLINE (MANUAL): (3575,14) tarch::la::Vector<9, double>::Vector(tarch::la::Vector<9, double> *, const tarch::la::Vector<9, double> &) (isz = 17) (sz = 24)
      -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()
    -> INLINE (MANUAL): (3576,10) tarch::la::Vector<9, double>::Vector(tarch::la::Vector<9, double> *, const tarch::la::Vector<9, double> &) (isz = 17) (sz = 24)
      -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()
    -> INLINE (MANUAL): (3577,10) tarch::la::Vector<9, double>::Vector(tarch::la::Vector<9, double> *, const tarch::la::Vector<9, double> &) (isz = 17) (sz = 24)
      -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()
    -> INLINE (MANUAL): (3578,9) tarch::la::Vector<3, double>::Vector(tarch::la::Vector<3, double> *, const tarch::la::Vector<3, double> &) (isz = 17) (sz = 24)
      -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()
    -> INLINE (MANUAL): (3579,15) tarch::la::Vector<3, double>::Vector(tarch::la::Vector<3, double> *, const tarch::la::Vector<3, double> &) (isz = 17) (sz = 24)
      -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()
    -> INLINE (MANUAL): (3580,21) tarch::la::Vector<3, double>::Vector(tarch::la::Vector<3, double> *, const tarch::la::Vector<3, double> &) (isz = 17) (sz = 24)
      -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()
    -> INLINE (MANUAL): (3581,26) tarch::la::Vector<3, double>::Vector(tarch::la::Vector<3, double> *, const tarch::la::Vector<3, double> &) (isz = 17) (sz = 24)
      -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()
    -> INLINE (MANUAL): (3582,11) tarch::la::Vector<3, double>::Vector(tarch::la::Vector<3, double> *, const tarch::la::Vector<3, double> &) (isz = 17) (sz = 24)
      -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()
    -> INLINE (MANUAL): (3583,10) tarch::la::Vector<3, double>::Vector(tarch::la::Vector<3, double> *, const tarch::la::Vector<3, double> &) (isz = 17) (sz = 24)
      -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3601,559)
   remark #15389: vectorization support: reference this->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15389: vectorization support: reference vertices->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 1.000
   remark #15300: LOOP WAS VECTORIZED
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.200 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3601,559)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 2  
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3601,559)
<Peeled loop for vectorization>
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3601,559)
   remark #15388: vectorization support: reference this->_values[i] has aligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15389: vectorization support: reference orientation->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 3.333
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.200 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=4
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3601,559)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3601,559)
<Peeled loop for vectorization>
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3601,559)
   remark #15388: vectorization support: reference this->_values[i] has aligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15389: vectorization support: reference inertia->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 3.333
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.200 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=4
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3601,559)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3601,559)
<Peeled loop for vectorization>
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3601,559)
   remark #15388: vectorization support: reference this->_values[i] has aligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15389: vectorization support: reference inverse->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 3.333
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.200 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=4
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3601,559)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3601,559)
   remark #15389: vectorization support: reference this->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15389: vectorization support: reference centre->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 1.000
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.750 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3601,559)
   remark #15389: vectorization support: reference this->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15389: vectorization support: reference centreOfMass->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 1.000
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.750 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3601,559)
   remark #15389: vectorization support: reference this->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15389: vectorization support: reference referencialAngular->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 1.000
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.750 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3601,559)
   remark #15389: vectorization support: reference this->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15389: vectorization support: reference referentialCentreOfMass->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 1.000
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.750 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3601,559)
   remark #15389: vectorization support: reference this->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15389: vectorization support: reference velocity->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 1.000
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.750 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3601,559)
   remark #15389: vectorization support: reference this->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15389: vectorization support: reference angular->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 1.000
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.750 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

    Report from: Code generation optimizations [cg]

./tarch/la/Vector.cpph(63,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(63,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(63,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(63,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(63,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(63,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(63,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(63,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(63,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(63,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
dem/records/Particle.cpp(3601,588):remark #34051: REGISTER ALLOCATION : [_ZN3dem7records14ParticlePackedC1ERKNS1_17PersistentRecordsE] dem/records/Particle.cpp:3601

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   11[ rax rdx rcx rsi rdi r8-r11 zmm0-zmm1]
        
    Routine temporaries
        Total         :      82
            Global    :      21
            Local     :      61
        Regenerable   :       1
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: dem::records::ParticlePacked::ParticlePacked(dem::records::ParticlePacked *const, const dem::records::ParticlePacked::PersistentRecords &)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (dem::records::ParticlePacked::ParticlePacked(dem::records::ParticlePacked *const, const dem::records::ParticlePacked::PersistentRecords &)) [116/166=69.9%] dem/records/Particle.cpp(3600,31)
  -> INLINE: (3600,31) dem::records::ParticlePacked::ParticlePacked(dem::records::ParticlePacked *, const dem::records::ParticlePacked::PersistentRecords &) (isz = 279) (sz = 286)
    -> INLINE: (3601,559) dem::records::ParticlePacked::PersistentRecords::PersistentRecords(dem::records::ParticlePacked::PersistentRecords *, const tarch::la::Vector<6, int> &, const tarch::la::Vector<9, double> &, const tarch::la::Vector<9, double> &, const tarch::la::Vector<9, double> &, const tarch::la::Vector<3, double> &, const tarch::la::Vector<3, double> &, const tarch::la::Vector<3, double> &, const tarch::la::Vector<3, double> &, const tarch::la::Vector<3, double> &, const tarch::la::Vector<3, double> &, const double &, const double &, const double &, const double &, const double &, const int &, const int &, const int &) (isz = 224) (sz = 265)
      -> INLINE (MANUAL): (3574,11) tarch::la::Vector<6, int>::Vector(tarch::la::Vector<6, int> *, const tarch::la::Vector<6, int> &) (isz = 17) (sz = 24)
        -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()
      -> INLINE (MANUAL): (3575,14) tarch::la::Vector<9, double>::Vector(tarch::la::Vector<9, double> *, const tarch::la::Vector<9, double> &) (isz = 17) (sz = 24)
        -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()
      -> INLINE (MANUAL): (3576,10) tarch::la::Vector<9, double>::Vector(tarch::la::Vector<9, double> *, const tarch::la::Vector<9, double> &) (isz = 17) (sz = 24)
        -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()
      -> INLINE (MANUAL): (3577,10) tarch::la::Vector<9, double>::Vector(tarch::la::Vector<9, double> *, const tarch::la::Vector<9, double> &) (isz = 17) (sz = 24)
        -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()
      -> INLINE (MANUAL): (3578,9) tarch::la::Vector<3, double>::Vector(tarch::la::Vector<3, double> *, const tarch::la::Vector<3, double> &) (isz = 17) (sz = 24)
        -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()
      -> INLINE (MANUAL): (3579,15) tarch::la::Vector<3, double>::Vector(tarch::la::Vector<3, double> *, const tarch::la::Vector<3, double> &) (isz = 17) (sz = 24)
        -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()
      -> INLINE (MANUAL): (3580,21) tarch::la::Vector<3, double>::Vector(tarch::la::Vector<3, double> *, const tarch::la::Vector<3, double> &) (isz = 17) (sz = 24)
        -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()
      -> INLINE (MANUAL): (3581,26) tarch::la::Vector<3, double>::Vector(tarch::la::Vector<3, double> *, const tarch::la::Vector<3, double> &) (isz = 17) (sz = 24)
        -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()
      -> INLINE (MANUAL): (3582,11) tarch::la::Vector<3, double>::Vector(tarch::la::Vector<3, double> *, const tarch::la::Vector<3, double> &) (isz = 17) (sz = 24)
        -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()
      -> INLINE (MANUAL): (3583,10) tarch::la::Vector<3, double>::Vector(tarch::la::Vector<3, double> *, const tarch::la::Vector<3, double> &) (isz = 17) (sz = 24)
        -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3600,31)
   remark #15389: vectorization support: reference this->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15389: vectorization support: reference vertices->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 1.000
   remark #15300: LOOP WAS VECTORIZED
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.200 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3600,31)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 2  
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3600,31)
<Peeled loop for vectorization>
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3600,31)
   remark #15388: vectorization support: reference this->_values[i] has aligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15389: vectorization support: reference orientation->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 3.333
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.200 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=4
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3600,31)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3600,31)
<Peeled loop for vectorization>
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3600,31)
   remark #15388: vectorization support: reference this->_values[i] has aligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15389: vectorization support: reference inertia->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 3.333
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.200 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=4
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3600,31)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3600,31)
<Peeled loop for vectorization>
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3600,31)
   remark #15388: vectorization support: reference this->_values[i] has aligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15389: vectorization support: reference inverse->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 3.333
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.200 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=4
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3600,31)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3600,31)
   remark #15389: vectorization support: reference this->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15389: vectorization support: reference centre->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 1.000
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.750 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3600,31)
   remark #15389: vectorization support: reference this->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15389: vectorization support: reference centreOfMass->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 1.000
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.750 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3600,31)
   remark #15389: vectorization support: reference this->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15389: vectorization support: reference referencialAngular->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 1.000
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.750 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3600,31)
   remark #15389: vectorization support: reference this->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15389: vectorization support: reference referentialCentreOfMass->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 1.000
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.750 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3600,31)
   remark #15389: vectorization support: reference this->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15389: vectorization support: reference velocity->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 1.000
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.750 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3600,31)
   remark #15389: vectorization support: reference this->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15389: vectorization support: reference angular->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 1.000
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.750 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

    Report from: Code generation optimizations [cg]

./tarch/la/Vector.cpph(63,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(63,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(63,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(63,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(63,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(63,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(63,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(63,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(63,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(63,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
dem/records/Particle.cpp(3600,31):remark #34051: REGISTER ALLOCATION : [_ZN3dem7records14ParticlePackedC2ERKNS1_17PersistentRecordsE] dem/records/Particle.cpp:3600

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   11[ rax rdx rcx rsi rdi r8-r11 zmm0-zmm1]
        
    Routine temporaries
        Total         :      82
            Global    :      21
            Local     :      61
        Regenerable   :       1
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: dem::records::ParticlePacked::ParticlePacked(dem::records::ParticlePacked *, const tarch::la::Vector<6, int> &, const tarch::la::Vector<9, double> &, const tarch::la::Vector<9, double> &, const tarch::la::Vector<9, double> &, const tarch::la::Vector<3, double> &, const tarch::la::Vector<3, double> &, const tarch::la::Vector<3, double> &, const tarch::la::Vector<3, double> &, const tarch::la::Vector<3, double> &, const tarch::la::Vector<3, double> &, const double &, const double &, const double &, const double &, const double &, const int &, const int &, const int &)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (dem::records::ParticlePacked::ParticlePacked(dem::records::ParticlePacked *, const tarch::la::Vector<6, int> &, const tarch::la::Vector<9, double> &, const tarch::la::Vector<9, double> &, const tarch::la::Vector<9, double> &, const tarch::la::Vector<3, double> &, const tarch::la::Vector<3, double> &, const tarch::la::Vector<3, double> &, const tarch::la::Vector<3, double> &, const tarch::la::Vector<3, double> &, const tarch::la::Vector<3, double> &, const double &, const double &, const double &, const double &, const double &, const int &, const int &, const int &)) [117/166=70.5%] dem/records/Particle.cpp(3607,246)
  -> INLINE: (3607,236) dem::records::ParticlePacked::PersistentRecords::PersistentRecords(dem::records::ParticlePacked::PersistentRecords *, const tarch::la::Vector<6, int> &, const tarch::la::Vector<9, double> &, const tarch::la::Vector<9, double> &, const tarch::la::Vector<9, double> &, const tarch::la::Vector<3, double> &, const tarch::la::Vector<3, double> &, const tarch::la::Vector<3, double> &, const tarch::la::Vector<3, double> &, const tarch::la::Vector<3, double> &, const tarch::la::Vector<3, double> &, const double &, const double &, const double &, const double &, const double &, const int &, const int &, const int &) (isz = 224) (sz = 265)
    -> INLINE (MANUAL): (3574,11) tarch::la::Vector<6, int>::Vector(tarch::la::Vector<6, int> *, const tarch::la::Vector<6, int> &) (isz = 17) (sz = 24)
      -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()
    -> INLINE (MANUAL): (3575,14) tarch::la::Vector<9, double>::Vector(tarch::la::Vector<9, double> *, const tarch::la::Vector<9, double> &) (isz = 17) (sz = 24)
      -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()
    -> INLINE (MANUAL): (3576,10) tarch::la::Vector<9, double>::Vector(tarch::la::Vector<9, double> *, const tarch::la::Vector<9, double> &) (isz = 17) (sz = 24)
      -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()
    -> INLINE (MANUAL): (3577,10) tarch::la::Vector<9, double>::Vector(tarch::la::Vector<9, double> *, const tarch::la::Vector<9, double> &) (isz = 17) (sz = 24)
      -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()
    -> INLINE (MANUAL): (3578,9) tarch::la::Vector<3, double>::Vector(tarch::la::Vector<3, double> *, const tarch::la::Vector<3, double> &) (isz = 17) (sz = 24)
      -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()
    -> INLINE (MANUAL): (3579,15) tarch::la::Vector<3, double>::Vector(tarch::la::Vector<3, double> *, const tarch::la::Vector<3, double> &) (isz = 17) (sz = 24)
      -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()
    -> INLINE (MANUAL): (3580,21) tarch::la::Vector<3, double>::Vector(tarch::la::Vector<3, double> *, const tarch::la::Vector<3, double> &) (isz = 17) (sz = 24)
      -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()
    -> INLINE (MANUAL): (3581,26) tarch::la::Vector<3, double>::Vector(tarch::la::Vector<3, double> *, const tarch::la::Vector<3, double> &) (isz = 17) (sz = 24)
      -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()
    -> INLINE (MANUAL): (3582,11) tarch::la::Vector<3, double>::Vector(tarch::la::Vector<3, double> *, const tarch::la::Vector<3, double> &) (isz = 17) (sz = 24)
      -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()
    -> INLINE (MANUAL): (3583,10) tarch::la::Vector<3, double>::Vector(tarch::la::Vector<3, double> *, const tarch::la::Vector<3, double> &) (isz = 17) (sz = 24)
      -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3607,236)
   remark #15389: vectorization support: reference this->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15389: vectorization support: reference vertices->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 1.000
   remark #15300: LOOP WAS VECTORIZED
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.200 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3607,236)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 2  
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3607,236)
<Peeled loop for vectorization>
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3607,236)
   remark #15388: vectorization support: reference this->_values[i] has aligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15389: vectorization support: reference orientation->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 3.333
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.200 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=4
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3607,236)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3607,236)
<Peeled loop for vectorization>
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3607,236)
   remark #15388: vectorization support: reference this->_values[i] has aligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15389: vectorization support: reference inertia->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 3.333
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.200 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=4
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3607,236)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3607,236)
<Peeled loop for vectorization>
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3607,236)
   remark #15388: vectorization support: reference this->_values[i] has aligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15389: vectorization support: reference inverse->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 3.333
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.200 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=4
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3607,236)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3607,236)
   remark #15389: vectorization support: reference this->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15389: vectorization support: reference centre->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 1.000
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.750 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3607,236)
   remark #15389: vectorization support: reference this->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15389: vectorization support: reference centreOfMass->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 1.000
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.750 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3607,236)
   remark #15389: vectorization support: reference this->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15389: vectorization support: reference referencialAngular->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 1.000
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.750 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3607,236)
   remark #15389: vectorization support: reference this->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15389: vectorization support: reference referentialCentreOfMass->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 1.000
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.750 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3607,236)
   remark #15389: vectorization support: reference this->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15389: vectorization support: reference velocity->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 1.000
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.750 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3607,236)
   remark #15389: vectorization support: reference this->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15389: vectorization support: reference angular->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 1.000
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.750 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

    Report from: Code generation optimizations [cg]

./tarch/la/Vector.cpph(63,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(63,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(63,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(63,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(63,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(63,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(63,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(63,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(63,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(63,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
dem/records/Particle.cpp(3607,246):remark #34051: REGISTER ALLOCATION : [_ZN3dem7records14ParticlePackedC1ERKN5tarch2la6VectorILi6EiEERKNS4_ILi9EdEESA_SA_RKNS4_ILi3EdEESD_SD_SD_SD_SD_RKdSF_SF_SF_SF_RKiSH_SH_] dem/records/Particle.cpp:3607

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   11[ rax rdx rcx rsi rdi r8-r11 zmm0-zmm1]
        
    Routine temporaries
        Total         :     103
            Global    :      25
            Local     :      78
        Regenerable   :       1
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: dem::records::ParticlePacked::ParticlePacked(dem::records::ParticlePacked *const, const tarch::la::Vector<6, int> &, const tarch::la::Vector<9, double> &, const tarch::la::Vector<9, double> &, const tarch::la::Vector<9, double> &, const tarch::la::Vector<3, double> &, const tarch::la::Vector<3, double> &, const tarch::la::Vector<3, double> &, const tarch::la::Vector<3, double> &, const tarch::la::Vector<3, double> &, const tarch::la::Vector<3, double> &, const double &, const double &, const double &, const double &, const double &, const int &, const int &, const int &)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (dem::records::ParticlePacked::ParticlePacked(dem::records::ParticlePacked *const, const tarch::la::Vector<6, int> &, const tarch::la::Vector<9, double> &, const tarch::la::Vector<9, double> &, const tarch::la::Vector<9, double> &, const tarch::la::Vector<3, double> &, const tarch::la::Vector<3, double> &, const tarch::la::Vector<3, double> &, const tarch::la::Vector<3, double> &, const tarch::la::Vector<3, double> &, const tarch::la::Vector<3, double> &, const double &, const double &, const double &, const double &, const double &, const int &, const int &, const int &)) [118/166=71.1%] dem/records/Particle.cpp(3606,31)
  -> INLINE: (3606,31) dem::records::ParticlePacked::ParticlePacked(dem::records::ParticlePacked *, const tarch::la::Vector<6, int> &, const tarch::la::Vector<9, double> &, const tarch::la::Vector<9, double> &, const tarch::la::Vector<9, double> &, const tarch::la::Vector<3, double> &, const tarch::la::Vector<3, double> &, const tarch::la::Vector<3, double> &, const tarch::la::Vector<3, double> &, const tarch::la::Vector<3, double> &, const tarch::la::Vector<3, double> &, const double &, const double &, const double &, const double &, const double &, const int &, const int &, const int &) (isz = 226) (sz = 267)
    -> INLINE: (3607,236) dem::records::ParticlePacked::PersistentRecords::PersistentRecords(dem::records::ParticlePacked::PersistentRecords *, const tarch::la::Vector<6, int> &, const tarch::la::Vector<9, double> &, const tarch::la::Vector<9, double> &, const tarch::la::Vector<9, double> &, const tarch::la::Vector<3, double> &, const tarch::la::Vector<3, double> &, const tarch::la::Vector<3, double> &, const tarch::la::Vector<3, double> &, const tarch::la::Vector<3, double> &, const tarch::la::Vector<3, double> &, const double &, const double &, const double &, const double &, const double &, const int &, const int &, const int &) (isz = 224) (sz = 265)
      -> INLINE (MANUAL): (3574,11) tarch::la::Vector<6, int>::Vector(tarch::la::Vector<6, int> *, const tarch::la::Vector<6, int> &) (isz = 17) (sz = 24)
        -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()
      -> INLINE (MANUAL): (3575,14) tarch::la::Vector<9, double>::Vector(tarch::la::Vector<9, double> *, const tarch::la::Vector<9, double> &) (isz = 17) (sz = 24)
        -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()
      -> INLINE (MANUAL): (3576,10) tarch::la::Vector<9, double>::Vector(tarch::la::Vector<9, double> *, const tarch::la::Vector<9, double> &) (isz = 17) (sz = 24)
        -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()
      -> INLINE (MANUAL): (3577,10) tarch::la::Vector<9, double>::Vector(tarch::la::Vector<9, double> *, const tarch::la::Vector<9, double> &) (isz = 17) (sz = 24)
        -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()
      -> INLINE (MANUAL): (3578,9) tarch::la::Vector<3, double>::Vector(tarch::la::Vector<3, double> *, const tarch::la::Vector<3, double> &) (isz = 17) (sz = 24)
        -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()
      -> INLINE (MANUAL): (3579,15) tarch::la::Vector<3, double>::Vector(tarch::la::Vector<3, double> *, const tarch::la::Vector<3, double> &) (isz = 17) (sz = 24)
        -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()
      -> INLINE (MANUAL): (3580,21) tarch::la::Vector<3, double>::Vector(tarch::la::Vector<3, double> *, const tarch::la::Vector<3, double> &) (isz = 17) (sz = 24)
        -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()
      -> INLINE (MANUAL): (3581,26) tarch::la::Vector<3, double>::Vector(tarch::la::Vector<3, double> *, const tarch::la::Vector<3, double> &) (isz = 17) (sz = 24)
        -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()
      -> INLINE (MANUAL): (3582,11) tarch::la::Vector<3, double>::Vector(tarch::la::Vector<3, double> *, const tarch::la::Vector<3, double> &) (isz = 17) (sz = 24)
        -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()
      -> INLINE (MANUAL): (3583,10) tarch::la::Vector<3, double>::Vector(tarch::la::Vector<3, double> *, const tarch::la::Vector<3, double> &) (isz = 17) (sz = 24)
        -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3606,31)
   remark #15389: vectorization support: reference this->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15389: vectorization support: reference __p2->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 1.000
   remark #15300: LOOP WAS VECTORIZED
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.200 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3606,31)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 2  
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3606,31)
<Peeled loop for vectorization>
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3606,31)
   remark #15388: vectorization support: reference this->_values[i] has aligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15389: vectorization support: reference __p3->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 3.333
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.200 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=4
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3606,31)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3606,31)
<Peeled loop for vectorization>
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3606,31)
   remark #15388: vectorization support: reference this->_values[i] has aligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15389: vectorization support: reference __p4->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 3.333
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.200 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=4
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3606,31)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3606,31)
<Peeled loop for vectorization>
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3606,31)
   remark #15388: vectorization support: reference this->_values[i] has aligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15389: vectorization support: reference __p5->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 3.333
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.200 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=4
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3606,31)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3606,31)
   remark #15389: vectorization support: reference this->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15389: vectorization support: reference __p6->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 1.000
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.750 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3606,31)
   remark #15389: vectorization support: reference this->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15389: vectorization support: reference __p7->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 1.000
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.750 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3606,31)
   remark #15389: vectorization support: reference this->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15389: vectorization support: reference __p8->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 1.000
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.750 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3606,31)
   remark #15389: vectorization support: reference this->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15389: vectorization support: reference __p9->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 1.000
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.750 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3606,31)
   remark #15389: vectorization support: reference this->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15389: vectorization support: reference __p10->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 1.000
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.750 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3606,31)
   remark #15389: vectorization support: reference this->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15389: vectorization support: reference __p11->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 1.000
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.750 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

    Report from: Code generation optimizations [cg]

./tarch/la/Vector.cpph(63,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(63,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(63,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(63,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(63,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(63,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(63,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(63,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(63,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(63,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
dem/records/Particle.cpp(3606,31):remark #34051: REGISTER ALLOCATION : [_ZN3dem7records14ParticlePackedC2ERKN5tarch2la6VectorILi6EiEERKNS4_ILi9EdEESA_SA_RKNS4_ILi3EdEESD_SD_SD_SD_SD_RKdSF_SF_SF_SF_RKiSH_SH_] dem/records/Particle.cpp:3606

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   11[ rax rdx rcx rsi rdi r8-r11 zmm0-zmm1]
        
    Routine temporaries
        Total         :     103
            Global    :      25
            Local     :      78
        Regenerable   :       1
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: dem::records::ParticlePacked::~ParticlePacked(dem::records::ParticlePacked *const)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (dem::records::ParticlePacked::~ParticlePacked(dem::records::ParticlePacked *const)) [119/166=71.7%] dem/records/Particle.cpp(3612,31)
  -> DELETED: (3612,31) dem::records::ParticlePacked::~ParticlePacked(dem::records::ParticlePacked *) (isz = 0) (sz = 3)


    Report from: Code generation optimizations [cg]

dem/records/Particle.cpp(3612,31):remark #34051: REGISTER ALLOCATION : [_ZN3dem7records14ParticlePackedD2Ev] dem/records/Particle.cpp:3612

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    1[ rdi]
        
    Routine temporaries
        Total         :       7
            Global    :       0
            Local     :       7
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: dem::records::ParticlePacked::~ParticlePacked(dem::records::ParticlePacked *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (dem::records::ParticlePacked::~ParticlePacked(dem::records::ParticlePacked *)) [120/166=72.3%] dem/records/Particle.cpp(3612,49)


    Report from: Code generation optimizations [cg]

dem/records/Particle.cpp(3612,49):remark #34051: REGISTER ALLOCATION : [_ZN3dem7records14ParticlePackedD1Ev] dem/records/Particle.cpp:3612

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    1[ rdi]
        
    Routine temporaries
        Total         :       7
            Global    :       0
            Local     :       7
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: dem::records::ParticlePacked::getVertices(tarch::la::Vector<6, int> *, const dem::records::ParticlePacked *) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (dem::records::ParticlePacked::getVertices(tarch::la::Vector<6, int> *, const dem::records::ParticlePacked *) const) ./dem/records/Particle.h(14164,2)

===========================================================================

Begin optimization report for: dem::records::ParticlePacked::getVertices(const dem::records::ParticlePacked *, int) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (dem::records::ParticlePacked::getVertices(const dem::records::ParticlePacked *, int) const) ./dem/records/Particle.h(14203,2)

===========================================================================

Begin optimization report for: dem::records::ParticlePacked::getOrientation(tarch::la::Vector<9, double> *, const dem::records::ParticlePacked *) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (dem::records::ParticlePacked::getOrientation(tarch::la::Vector<9, double> *, const dem::records::ParticlePacked *) const) ./dem/records/Particle.h(14248,2)

===========================================================================

Begin optimization report for: dem::records::ParticlePacked::getOrientation(const dem::records::ParticlePacked *, int) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (dem::records::ParticlePacked::getOrientation(const dem::records::ParticlePacked *, int) const) ./dem/records/Particle.h(14287,2)

===========================================================================

Begin optimization report for: dem::records::ParticlePacked::getInertia(tarch::la::Vector<9, double> *, const dem::records::ParticlePacked *) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (dem::records::ParticlePacked::getInertia(tarch::la::Vector<9, double> *, const dem::records::ParticlePacked *) const) ./dem/records/Particle.h(14332,2)

===========================================================================

Begin optimization report for: dem::records::ParticlePacked::getInertia(const dem::records::ParticlePacked *, int) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (dem::records::ParticlePacked::getInertia(const dem::records::ParticlePacked *, int) const) ./dem/records/Particle.h(14371,2)

===========================================================================

Begin optimization report for: dem::records::ParticlePacked::getInverse(tarch::la::Vector<9, double> *, const dem::records::ParticlePacked *) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (dem::records::ParticlePacked::getInverse(tarch::la::Vector<9, double> *, const dem::records::ParticlePacked *) const) ./dem/records/Particle.h(14416,2)

===========================================================================

Begin optimization report for: dem::records::ParticlePacked::getInverse(const dem::records::ParticlePacked *, int) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (dem::records::ParticlePacked::getInverse(const dem::records::ParticlePacked *, int) const) ./dem/records/Particle.h(14455,2)

===========================================================================

Begin optimization report for: dem::records::ParticlePacked::getCentre(tarch::la::Vector<3, double> *, const dem::records::ParticlePacked *) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (dem::records::ParticlePacked::getCentre(tarch::la::Vector<3, double> *, const dem::records::ParticlePacked *) const) ./dem/records/Particle.h(14500,2)

===========================================================================

Begin optimization report for: dem::records::ParticlePacked::getCentre(const dem::records::ParticlePacked *, int) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (dem::records::ParticlePacked::getCentre(const dem::records::ParticlePacked *, int) const) ./dem/records/Particle.h(14539,2)

===========================================================================

Begin optimization report for: dem::records::ParticlePacked::getCentreOfMass(tarch::la::Vector<3, double> *, const dem::records::ParticlePacked *) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (dem::records::ParticlePacked::getCentreOfMass(tarch::la::Vector<3, double> *, const dem::records::ParticlePacked *) const) ./dem/records/Particle.h(14584,2)

===========================================================================

Begin optimization report for: dem::records::ParticlePacked::getCentreOfMass(const dem::records::ParticlePacked *, int) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (dem::records::ParticlePacked::getCentreOfMass(const dem::records::ParticlePacked *, int) const) ./dem/records/Particle.h(14623,2)

===========================================================================

Begin optimization report for: dem::records::ParticlePacked::getReferencialAngular(tarch::la::Vector<3, double> *, const dem::records::ParticlePacked *) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (dem::records::ParticlePacked::getReferencialAngular(tarch::la::Vector<3, double> *, const dem::records::ParticlePacked *) const) ./dem/records/Particle.h(14668,2)

===========================================================================

Begin optimization report for: dem::records::ParticlePacked::getReferencialAngular(const dem::records::ParticlePacked *, int) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (dem::records::ParticlePacked::getReferencialAngular(const dem::records::ParticlePacked *, int) const) ./dem/records/Particle.h(14707,2)

===========================================================================

Begin optimization report for: dem::records::ParticlePacked::getReferentialCentreOfMass(tarch::la::Vector<3, double> *, const dem::records::ParticlePacked *) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (dem::records::ParticlePacked::getReferentialCentreOfMass(tarch::la::Vector<3, double> *, const dem::records::ParticlePacked *) const) ./dem/records/Particle.h(14752,2)

===========================================================================

Begin optimization report for: dem::records::ParticlePacked::getReferentialCentreOfMass(const dem::records::ParticlePacked *, int) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (dem::records::ParticlePacked::getReferentialCentreOfMass(const dem::records::ParticlePacked *, int) const) ./dem/records/Particle.h(14791,2)

===========================================================================

Begin optimization report for: dem::records::ParticlePacked::getVelocity(tarch::la::Vector<3, double> *, const dem::records::ParticlePacked *) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (dem::records::ParticlePacked::getVelocity(tarch::la::Vector<3, double> *, const dem::records::ParticlePacked *) const) ./dem/records/Particle.h(14836,2)

===========================================================================

Begin optimization report for: dem::records::ParticlePacked::getVelocity(const dem::records::ParticlePacked *, int) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (dem::records::ParticlePacked::getVelocity(const dem::records::ParticlePacked *, int) const) ./dem/records/Particle.h(14875,2)

===========================================================================

Begin optimization report for: dem::records::ParticlePacked::getAngular(tarch::la::Vector<3, double> *, const dem::records::ParticlePacked *) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (dem::records::ParticlePacked::getAngular(tarch::la::Vector<3, double> *, const dem::records::ParticlePacked *) const) ./dem/records/Particle.h(14920,2)

===========================================================================

Begin optimization report for: dem::records::ParticlePacked::getAngular(const dem::records::ParticlePacked *, int) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (dem::records::ParticlePacked::getAngular(const dem::records::ParticlePacked *, int) const) ./dem/records/Particle.h(14959,2)

===========================================================================

Begin optimization report for: dem::records::ParticlePacked::getDiameter(const dem::records::ParticlePacked *) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (dem::records::ParticlePacked::getDiameter(const dem::records::ParticlePacked *) const) ./dem/records/Particle.h(14985,2)

===========================================================================

Begin optimization report for: dem::records::ParticlePacked::getInfluenceRadius(const dem::records::ParticlePacked *) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (dem::records::ParticlePacked::getInfluenceRadius(const dem::records::ParticlePacked *) const) ./dem/records/Particle.h(15005,2)

===========================================================================

Begin optimization report for: dem::records::ParticlePacked::getEpsilon(const dem::records::ParticlePacked *) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (dem::records::ParticlePacked::getEpsilon(const dem::records::ParticlePacked *) const) ./dem/records/Particle.h(15025,2)

===========================================================================

Begin optimization report for: dem::records::ParticlePacked::getMass(const dem::records::ParticlePacked *) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (dem::records::ParticlePacked::getMass(const dem::records::ParticlePacked *) const) ./dem/records/Particle.h(15045,2)

===========================================================================

Begin optimization report for: dem::records::ParticlePacked::getHMin(const dem::records::ParticlePacked *) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (dem::records::ParticlePacked::getHMin(const dem::records::ParticlePacked *) const) ./dem/records/Particle.h(15065,2)

===========================================================================

Begin optimization report for: dem::records::ParticlePacked::getGlobalParticleNumber(const dem::records::ParticlePacked *) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (dem::records::ParticlePacked::getGlobalParticleNumber(const dem::records::ParticlePacked *) const) ./dem/records/Particle.h(15085,2)

===========================================================================

Begin optimization report for: dem::records::ParticlePacked::getNumberOfTriangles(const dem::records::ParticlePacked *) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (dem::records::ParticlePacked::getNumberOfTriangles(const dem::records::ParticlePacked *) const) ./dem/records/Particle.h(15105,2)

===========================================================================

Begin optimization report for: dem::records::ParticlePacked::getMaterial(const dem::records::ParticlePacked *) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (dem::records::ParticlePacked::getMaterial(const dem::records::ParticlePacked *) const) ./dem/records/Particle.h(15125,2)

===========================================================================

Begin optimization report for: dem::records::ParticlePacked::toString(std::string *, const dem::records::ParticlePacked *) const

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (dem::records::ParticlePacked::toString(std::string *, const dem::records::ParticlePacked *) const) [149/166=89.8%] dem/records/Particle.cpp(3616,60)
  -> INLINE (MANUAL): (3617,20) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::~basic_ostringstream(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *const) (isz = 23) (sz = 28)
    -> INLINE (MANUAL): /usr/include/c++/6/sstream:(576,7) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::~basic_ostringstream(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *, const long *const *) (isz = 53) (sz = 60)
      -> INLINE (MANUAL): (577,9) std::basic_ios<char, std::char_traits<char>>::~basic_ios(std::basic_ios<char, std::char_traits<char>> *const) (isz = 0) (sz = 5)
        -> INLINE (MANUAL): /usr/include/c++/6/bits/basic_ios.h:(282,7) std::basic_ios<char, std::char_traits<char>>::~basic_ios(std::basic_ios<char, std::char_traits<char>> *) (isz = 9) (sz = 14)
          -> EXTERN: (282,20) __cxa_call_unexpected
          -> EXTERN: (282,22) std::ios_base::~ios_base(std::ios_base *const)
      -> INLINE (MANUAL): (577,9) std::basic_ostream<char, std::char_traits<char>>::~basic_ostream(std::basic_ostream<char, std::char_traits<char>> *, const long *const *) (isz = 23) (sz = 30)
        -> INLINE (MANUAL): /usr/include/c++/6/ostream:(93,26) std::basic_ios<char, std::char_traits<char>>::~basic_ios(std::basic_ios<char, std::char_traits<char>> *const) (isz = 0) (sz = 5)
          -> INLINE (MANUAL): /usr/include/c++/6/bits/basic_ios.h:(282,7) std::basic_ios<char, std::char_traits<char>>::~basic_ios(std::basic_ios<char, std::char_traits<char>> *) (isz = 9) (sz = 14)
            -> EXTERN: (282,20) __cxa_call_unexpected
            -> EXTERN: (282,22) std::ios_base::~ios_base(std::ios_base *const)
      -> (577,9) std::basic_stringbuf<char, std::char_traits<char>, std::allocator<char>>::~basic_stringbuf(std::basic_stringbuf<char, std::char_traits<char>, std::allocator<char>> *) (isz = 22) (sz = 27)
         [[ Callee not marked with inlining pragma  <1>]]
  -> INLINE (MANUAL): (3617,20) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::basic_ostringstream(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *const, std::ios_base::openmode) (isz = 1) (sz = 8)
    -> INLINE (MANUAL): /usr/include/c++/6/sstream:(547,7) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::basic_ostringstream(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *, const long *const *, std::ios_base::openmode) (isz = 77) (sz = 86)
      -> INLINE (MANUAL): (547,7) std::basic_ios<char, std::char_traits<char>>::~basic_ios(std::basic_ios<char, std::char_traits<char>> *const) (isz = 0) (sz = 5)
        -> INLINE (MANUAL): /usr/include/c++/6/bits/basic_ios.h:(282,7) std::basic_ios<char, std::char_traits<char>>::~basic_ios(std::basic_ios<char, std::char_traits<char>> *) (isz = 9) (sz = 14)
          -> EXTERN: (282,20) __cxa_call_unexpected
          -> EXTERN: (282,22) std::ios_base::~ios_base(std::ios_base *const)
      -> INLINE (MANUAL): (547,7) std::basic_ostream<char, std::char_traits<char>>::~basic_ostream(std::basic_ostream<char, std::char_traits<char>> *, const long *const *) (isz = 23) (sz = 30)
        -> INLINE (MANUAL): /usr/include/c++/6/ostream:(93,26) std::basic_ios<char, std::char_traits<char>>::~basic_ios(std::basic_ios<char, std::char_traits<char>> *const) (isz = 0) (sz = 5)
          -> INLINE (MANUAL): /usr/include/c++/6/bits/basic_ios.h:(282,7) std::basic_ios<char, std::char_traits<char>>::~basic_ios(std::basic_ios<char, std::char_traits<char>> *) (isz = 9) (sz = 14)
            -> EXTERN: (282,20) __cxa_call_unexpected
            -> EXTERN: (282,22) std::ios_base::~ios_base(std::ios_base *const)
      -> INLINE (MANUAL): (547,7) std::basic_ostream<char, std::char_traits<char>>::basic_ostream(std::basic_ostream<char, std::char_traits<char>> *, const long *const *) (isz = 44) (sz = 51)
        -> INLINE (MANUAL): /usr/include/c++/6/ostream:(384,7) std::basic_ios<char, std::char_traits<char>>::basic_ios(std::basic_ios<char, std::char_traits<char>> *const) (isz = 0) (sz = 5)
          -> INLINE (MANUAL): /usr/include/c++/6/bits/basic_ios.h:(460,7) std::basic_ios<char, std::char_traits<char>>::basic_ios(std::basic_ios<char, std::char_traits<char>> *) (isz = 18) (sz = 23)
            -> EXTERN: (460,7) std::ios_base::ios_base(std::ios_base *const)
        -> INLINE (MANUAL): /usr/include/c++/6/ostream:(384,7) std::basic_ios<char, std::char_traits<char>>::~basic_ios(std::basic_ios<char, std::char_traits<char>> *const) (isz = 0) (sz = 5)
          -> INLINE (MANUAL): /usr/include/c++/6/bits/basic_ios.h:(282,7) std::basic_ios<char, std::char_traits<char>>::~basic_ios(std::basic_ios<char, std::char_traits<char>> *) (isz = 9) (sz = 14)
            -> EXTERN: (282,20) __cxa_call_unexpected
            -> EXTERN: (282,22) std::ios_base::~ios_base(std::ios_base *const)
        -> EXTERN: /usr/include/c++/6/ostream:(385,15) std::basic_ios<char, std::char_traits<char>>::init(std::basic_ios<char, std::char_traits<char>> *, std::basic_streambuf<char, std::char_traits<char>> *)
      -> INLINE (MANUAL): (547,7) std::basic_ios<char, std::char_traits<char>>::basic_ios(std::basic_ios<char, std::char_traits<char>> *const) (isz = 0) (sz = 5)
        -> INLINE (MANUAL): /usr/include/c++/6/bits/basic_ios.h:(460,7) std::basic_ios<char, std::char_traits<char>>::basic_ios(std::basic_ios<char, std::char_traits<char>> *) (isz = 18) (sz = 23)
          -> EXTERN: (460,7) std::ios_base::ios_base(std::ios_base *const)
      -> INLINE (MANUAL): (548,47) std::basic_stringbuf<char, std::char_traits<char>, std::allocator<char>>::basic_stringbuf(std::basic_stringbuf<char, std::char_traits<char>, std::allocator<char>> *, std::ios_base::openmode) (isz = 9) (sz = 16)
        -> INLINE (MANUAL): (100,7) std::basic_streambuf<char, std::char_traits<char>>::basic_streambuf(std::basic_streambuf<char, std::char_traits<char>> *const) (isz = 0) (sz = 5)
          -> INLINE (MANUAL): /usr/include/c++/6/streambuf:(463,7) std::basic_streambuf<char, std::char_traits<char>>::basic_streambuf(std::basic_streambuf<char, std::char_traits<char>> *) (isz = 18) (sz = 23)
            -> EXTERN: (463,7) std::locale::locale(std::locale *)
        -> INLINE (MANUAL): (100,7) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *) (isz = 13) (sz = 18)
          -> INLINE (MANUAL): /usr/include/c++/6/bits/basic_string.h:(2959,21) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_S_empty_rep() (isz = 2) (sz = 7)
            -> INLINE (MANUAL): (2947,16) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep::_S_empty_rep() (isz = 0) (sz = 4)
          -> INLINE (MANUAL): /usr/include/c++/6/bits/basic_string.h:(2959,36) std::allocator<char>::allocator(std::allocator<char> *) (isz = 5) (sz = 10)
            -> DELETED: /usr/include/c++/6/bits/allocator.h:(118,7) __gnu_cxx::new_allocator<char>::new_allocator(__gnu_cxx::new_allocator<char> *const) (isz = 0) (sz = 5)
            -> EXTERN: /usr/include/c++/6/bits/allocator.h:(118,27) __cxa_call_unexpected
          -> INLINE (MANUAL): /usr/include/c++/6/bits/basic_string.h:(2959,36) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep::_M_refdata(std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep *) (isz = 0) (sz = 7)
          -> INLINE (MANUAL): /usr/include/c++/6/bits/basic_string.h:(2959,50) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Alloc_hider::_Alloc_hider(std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Alloc_hider *, char *, const std::allocator<char> &) (isz = 1) (sz = 10)
            -> INLINE (MANUAL): (2791,11) std::allocator<char>::allocator(std::allocator<char> *const, const std::allocator<char> &) (isz = 0) (sz = 7)
              -> INLINE (MANUAL): /usr/include/c++/6/bits/allocator.h:(120,7) std::allocator<char>::allocator(std::allocator<char> *, const std::allocator<char> &) (isz = 5) (sz = 12)
                -> DELETED: (121,31) __gnu_cxx::new_allocator<char>::new_allocator(__gnu_cxx::new_allocator<char> *const, const __gnu_cxx::new_allocator<char> &) (isz = 0) (sz = 7)
                -> EXTERN: (121,36) __cxa_call_unexpected
      -> (548,47) std::basic_stringbuf<char, std::char_traits<char>, std::allocator<char>>::~basic_stringbuf(std::basic_stringbuf<char, std::char_traits<char>, std::allocator<char>> *) (isz = 22) (sz = 27)
         [[ Callee not marked with inlining pragma  <1>]]
      -> INLINE (MANUAL): (548,47) std::operator|(std::_Ios_Openmode, std::_Ios_Openmode) (isz = 0) (sz = 7)
      -> EXTERN: (549,15) std::basic_ios<char, std::char_traits<char>>::init(std::basic_ios<char, std::char_traits<char>> *, std::basic_streambuf<char, std::char_traits<char>> *)
  -> INLINE: (3618,1) dem::records::ParticlePacked::toString(const dem::records::ParticlePacked *, std::ostream &) const (isz = 568) (sz = 575)
    -> (3623,5) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
       [[ Called routine is noinline  <2>]]
    -> (3624,5) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
       [[ Called routine is noinline  <2>]]
    -> EXTERN: (3626,11) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, int)
    -> INLINE (MANUAL): (3626,14) dem::records::ParticlePacked::getVertices(const dem::records::ParticlePacked *, int) const (isz = 4) (sz = 13)
      -> INLINE (MANUAL): ./dem/records/Particle.h:(14206,105) tarch::la::Vector<6, int>::operator[](const tarch::la::Vector<6, int> *, int) const (isz = 1) (sz = 9)
    -> (3626,29) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
       [[ Called routine is noinline  <2>]]
    -> EXTERN: (3628,8) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, int)
    -> INLINE (MANUAL): (3628,11) dem::records::ParticlePacked::getVertices(const dem::records::ParticlePacked *, int) const (isz = 4) (sz = 13)
      -> INLINE (MANUAL): ./dem/records/Particle.h:(14206,105) tarch::la::Vector<6, int>::operator[](const tarch::la::Vector<6, int> *, int) const (isz = 1) (sz = 9)
    -> (3628,28) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
       [[ Called routine is noinline  <2>]]
    -> (3629,5) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
       [[ Called routine is noinline  <2>]]
    -> (3630,5) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
       [[ Called routine is noinline  <2>]]
    -> (3632,11) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) (isz = 1) (sz = 10)
       [[ Called routine is noinline  <2>]]
    -> INLINE (MANUAL): (3632,14) dem::records::ParticlePacked::getOrientation(const dem::records::ParticlePacked *, int) const (isz = 4) (sz = 13)
      -> INLINE (MANUAL): ./dem/records/Particle.h:(14290,108) tarch::la::Vector<9, double>::operator[](const tarch::la::Vector<9, double> *, int) const (isz = 1) (sz = 9)
    -> (3632,32) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
       [[ Called routine is noinline  <2>]]
    -> (3634,8) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) (isz = 1) (sz = 10)
       [[ Called routine is noinline  <2>]]
    -> INLINE (MANUAL): (3634,11) dem::records::ParticlePacked::getOrientation(const dem::records::ParticlePacked *, int) const (isz = 4) (sz = 13)
      -> INLINE (MANUAL): ./dem/records/Particle.h:(14290,108) tarch::la::Vector<9, double>::operator[](const tarch::la::Vector<9, double> *, int) const (isz = 1) (sz = 9)
    -> (3634,31) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
       [[ Called routine is noinline  <2>]]
    -> (3635,5) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
       [[ Called routine is noinline  <2>]]
    -> (3636,5) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
       [[ Called routine is noinline  <2>]]
    -> (3638,11) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) (isz = 1) (sz = 10)
       [[ Called routine is noinline  <2>]]
    -> INLINE (MANUAL): (3638,14) dem::records::ParticlePacked::getInertia(const dem::records::ParticlePacked *, int) const (isz = 4) (sz = 13)
      -> INLINE (MANUAL): ./dem/records/Particle.h:(14374,104) tarch::la::Vector<9, double>::operator[](const tarch::la::Vector<9, double> *, int) const (isz = 1) (sz = 9)
    -> (3638,28) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
       [[ Called routine is noinline  <2>]]
    -> (3640,8) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) (isz = 1) (sz = 10)
       [[ Called routine is noinline  <2>]]
    -> INLINE (MANUAL): (3640,11) dem::records::ParticlePacked::getInertia(const dem::records::ParticlePacked *, int) const (isz = 4) (sz = 13)
      -> INLINE (MANUAL): ./dem/records/Particle.h:(14374,104) tarch::la::Vector<9, double>::operator[](const tarch::la::Vector<9, double> *, int) const (isz = 1) (sz = 9)
    -> (3640,27) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
       [[ Called routine is noinline  <2>]]
    -> (3641,5) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
       [[ Called routine is noinline  <2>]]
    -> (3642,5) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
       [[ Called routine is noinline  <2>]]
    -> (3644,11) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) (isz = 1) (sz = 10)
       [[ Called routine is noinline  <2>]]
    -> INLINE (MANUAL): (3644,14) dem::records::ParticlePacked::getInverse(const dem::records::ParticlePacked *, int) const (isz = 4) (sz = 13)
      -> INLINE (MANUAL): ./dem/records/Particle.h:(14458,104) tarch::la::Vector<9, double>::operator[](const tarch::la::Vector<9, double> *, int) const (isz = 1) (sz = 9)
    -> (3644,28) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
       [[ Called routine is noinline  <2>]]
    -> (3646,8) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) (isz = 1) (sz = 10)
       [[ Called routine is noinline  <2>]]
    -> INLINE (MANUAL): (3646,11) dem::records::ParticlePacked::getInverse(const dem::records::ParticlePacked *, int) const (isz = 4) (sz = 13)
      -> INLINE (MANUAL): ./dem/records/Particle.h:(14458,104) tarch::la::Vector<9, double>::operator[](const tarch::la::Vector<9, double> *, int) const (isz = 1) (sz = 9)
    -> (3646,27) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
       [[ Called routine is noinline  <2>]]
    -> (3647,5) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
       [[ Called routine is noinline  <2>]]
    -> (3648,5) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
       [[ Called routine is noinline  <2>]]
    -> (3650,11) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) (isz = 1) (sz = 10)
       [[ Called routine is noinline  <2>]]
    -> INLINE (MANUAL): (3650,14) dem::records::ParticlePacked::getCentre(const dem::records::ParticlePacked *, int) const (isz = 4) (sz = 13)
      -> INLINE (MANUAL): ./dem/records/Particle.h:(14542,103) tarch::la::Vector<3, double>::operator[](const tarch::la::Vector<3, double> *, int) const (isz = 1) (sz = 9)
    -> (3650,27) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
       [[ Called routine is noinline  <2>]]
    -> (3652,8) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) (isz = 1) (sz = 10)
       [[ Called routine is noinline  <2>]]
    -> INLINE (MANUAL): (3652,11) dem::records::ParticlePacked::getCentre(const dem::records::ParticlePacked *, int) const (isz = 4) (sz = 13)
      -> INLINE (MANUAL): ./dem/records/Particle.h:(14542,103) tarch::la::Vector<3, double>::operator[](const tarch::la::Vector<3, double> *, int) const (isz = 1) (sz = 9)
    -> (3652,35) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
       [[ Called routine is noinline  <2>]]
    -> (3653,5) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
       [[ Called routine is noinline  <2>]]
    -> (3654,5) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
       [[ Called routine is noinline  <2>]]
    -> (3656,11) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) (isz = 1) (sz = 10)
       [[ Called routine is noinline  <2>]]
    -> INLINE (MANUAL): (3656,14) dem::records::ParticlePacked::getCentreOfMass(const dem::records::ParticlePacked *, int) const (isz = 4) (sz = 13)
      -> INLINE (MANUAL): ./dem/records/Particle.h:(14626,109) tarch::la::Vector<3, double>::operator[](const tarch::la::Vector<3, double> *, int) const (isz = 1) (sz = 9)
    -> (3656,33) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
       [[ Called routine is noinline  <2>]]
    -> (3658,8) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) (isz = 1) (sz = 10)
       [[ Called routine is noinline  <2>]]
    -> INLINE (MANUAL): (3658,11) dem::records::ParticlePacked::getCentreOfMass(const dem::records::ParticlePacked *, int) const (isz = 4) (sz = 13)
      -> INLINE (MANUAL): ./dem/records/Particle.h:(14626,109) tarch::la::Vector<3, double>::operator[](const tarch::la::Vector<3, double> *, int) const (isz = 1) (sz = 9)
    -> (3658,41) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
       [[ Called routine is noinline  <2>]]
    -> (3659,5) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
       [[ Called routine is noinline  <2>]]
    -> (3660,5) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
       [[ Called routine is noinline  <2>]]
    -> (3662,11) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) (isz = 1) (sz = 10)
       [[ Called routine is noinline  <2>]]
    -> INLINE (MANUAL): (3662,14) dem::records::ParticlePacked::getReferencialAngular(const dem::records::ParticlePacked *, int) const (isz = 4) (sz = 13)
      -> INLINE (MANUAL): ./dem/records/Particle.h:(14710,115) tarch::la::Vector<3, double>::operator[](const tarch::la::Vector<3, double> *, int) const (isz = 1) (sz = 9)
    -> (3662,39) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
       [[ Called routine is noinline  <2>]]
    -> (3664,8) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) (isz = 1) (sz = 10)
       [[ Called routine is noinline  <2>]]
    -> INLINE (MANUAL): (3664,11) dem::records::ParticlePacked::getReferencialAngular(const dem::records::ParticlePacked *, int) const (isz = 4) (sz = 13)
      -> INLINE (MANUAL): ./dem/records/Particle.h:(14710,115) tarch::la::Vector<3, double>::operator[](const tarch::la::Vector<3, double> *, int) const (isz = 1) (sz = 9)
    -> (3664,47) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
       [[ Called routine is noinline  <2>]]
    -> (3665,5) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
       [[ Called routine is noinline  <2>]]
    -> (3666,5) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
       [[ Called routine is noinline  <2>]]
    -> (3668,11) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) (isz = 1) (sz = 10)
       [[ Called routine is noinline  <2>]]
    -> INLINE (MANUAL): (3668,14) dem::records::ParticlePacked::getReferentialCentreOfMass(const dem::records::ParticlePacked *, int) const (isz = 4) (sz = 13)
      -> INLINE (MANUAL): ./dem/records/Particle.h:(14794,120) tarch::la::Vector<3, double>::operator[](const tarch::la::Vector<3, double> *, int) const (isz = 1) (sz = 9)
    -> (3668,44) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
       [[ Called routine is noinline  <2>]]
    -> (3670,8) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) (isz = 1) (sz = 10)
       [[ Called routine is noinline  <2>]]
    -> INLINE (MANUAL): (3670,11) dem::records::ParticlePacked::getReferentialCentreOfMass(const dem::records::ParticlePacked *, int) const (isz = 4) (sz = 13)
      -> INLINE (MANUAL): ./dem/records/Particle.h:(14794,120) tarch::la::Vector<3, double>::operator[](const tarch::la::Vector<3, double> *, int) const (isz = 1) (sz = 9)
    -> (3670,52) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
       [[ Called routine is noinline  <2>]]
    -> (3671,5) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
       [[ Called routine is noinline  <2>]]
    -> (3672,5) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
       [[ Called routine is noinline  <2>]]
    -> (3674,11) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) (isz = 1) (sz = 10)
       [[ Called routine is noinline  <2>]]
    -> INLINE (MANUAL): (3674,14) dem::records::ParticlePacked::getVelocity(const dem::records::ParticlePacked *, int) const (isz = 4) (sz = 13)
      -> INLINE (MANUAL): ./dem/records/Particle.h:(14878,105) tarch::la::Vector<3, double>::operator[](const tarch::la::Vector<3, double> *, int) const (isz = 1) (sz = 9)
    -> (3674,29) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
       [[ Called routine is noinline  <2>]]
    -> (3676,8) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) (isz = 1) (sz = 10)
       [[ Called routine is noinline  <2>]]
    -> INLINE (MANUAL): (3676,11) dem::records::ParticlePacked::getVelocity(const dem::records::ParticlePacked *, int) const (isz = 4) (sz = 13)
      -> INLINE (MANUAL): ./dem/records/Particle.h:(14878,105) tarch::la::Vector<3, double>::operator[](const tarch::la::Vector<3, double> *, int) const (isz = 1) (sz = 9)
    -> (3676,37) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
       [[ Called routine is noinline  <2>]]
    -> (3677,5) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
       [[ Called routine is noinline  <2>]]
    -> (3678,5) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
       [[ Called routine is noinline  <2>]]
    -> (3680,11) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) (isz = 1) (sz = 10)
       [[ Called routine is noinline  <2>]]
    -> INLINE (MANUAL): (3680,14) dem::records::ParticlePacked::getAngular(const dem::records::ParticlePacked *, int) const (isz = 4) (sz = 13)
      -> INLINE (MANUAL): ./dem/records/Particle.h:(14962,104) tarch::la::Vector<3, double>::operator[](const tarch::la::Vector<3, double> *, int) const (isz = 1) (sz = 9)
    -> (3680,28) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
       [[ Called routine is noinline  <2>]]
    -> (3682,8) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) (isz = 1) (sz = 10)
       [[ Called routine is noinline  <2>]]
    -> INLINE (MANUAL): (3682,11) dem::records::ParticlePacked::getAngular(const dem::records::ParticlePacked *, int) const (isz = 4) (sz = 13)
      -> INLINE (MANUAL): ./dem/records/Particle.h:(14962,104) tarch::la::Vector<3, double>::operator[](const tarch::la::Vector<3, double> *, int) const (isz = 1) (sz = 9)
    -> (3682,36) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
       [[ Called routine is noinline  <2>]]
    -> (3683,5) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
       [[ Called routine is noinline  <2>]]
    -> (3684,5) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
       [[ Called routine is noinline  <2>]]
    -> (3684,20) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) (isz = 1) (sz = 10)
       [[ Called routine is noinline  <2>]]
    -> INLINE (MANUAL): (3684,23) dem::records::ParticlePacked::getDiameter(const dem::records::ParticlePacked *) const (isz = 0) (sz = 6)
    -> (3685,5) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
       [[ Called routine is noinline  <2>]]
    -> (3686,5) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
       [[ Called routine is noinline  <2>]]
    -> (3686,27) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) (isz = 1) (sz = 10)
       [[ Called routine is noinline  <2>]]
    -> INLINE (MANUAL): (3686,30) dem::records::ParticlePacked::getInfluenceRadius(const dem::records::ParticlePacked *) const (isz = 0) (sz = 6)
    -> (3687,5) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
       [[ Called routine is noinline  <2>]]
    -> (3688,5) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
       [[ Called routine is noinline  <2>]]
    -> (3688,19) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) (isz = 1) (sz = 10)
       [[ Called routine is noinline  <2>]]
    -> INLINE (MANUAL): (3688,22) dem::records::ParticlePacked::getEpsilon(const dem::records::ParticlePacked *) const (isz = 0) (sz = 6)
    -> (3689,5) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
       [[ Called routine is noinline  <2>]]
    -> (3690,5) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
       [[ Called routine is noinline  <2>]]
    -> (3690,16) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) (isz = 1) (sz = 10)
       [[ Called routine is noinline  <2>]]
    -> INLINE (MANUAL): (3690,19) dem::records::ParticlePacked::getMass(const dem::records::ParticlePacked *) const (isz = 0) (sz = 6)
    -> (3691,5) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
       [[ Called routine is noinline  <2>]]
    -> (3692,5) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
       [[ Called routine is noinline  <2>]]
    -> (3692,16) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) (isz = 1) (sz = 10)
       [[ Called routine is noinline  <2>]]
    -> INLINE (MANUAL): (3692,19) dem::records::ParticlePacked::getHMin(const dem::records::ParticlePacked *) const (isz = 0) (sz = 6)
    -> (3693,5) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
       [[ Called routine is noinline  <2>]]
    -> (3694,5) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
       [[ Called routine is noinline  <2>]]
    -> EXTERN: (3694,32) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, int)
    -> INLINE (MANUAL): (3694,35) dem::records::ParticlePacked::getGlobalParticleNumber(const dem::records::ParticlePacked *) const (isz = 0) (sz = 6)
    -> (3695,5) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
       [[ Called routine is noinline  <2>]]
    -> (3696,5) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
       [[ Called routine is noinline  <2>]]
    -> EXTERN: (3696,29) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, int)
    -> INLINE (MANUAL): (3696,32) dem::records::ParticlePacked::getNumberOfTriangles(const dem::records::ParticlePacked *) const (isz = 0) (sz = 6)
    -> (3697,5) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
       [[ Called routine is noinline  <2>]]
    -> (3698,5) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
       [[ Called routine is noinline  <2>]]
    -> EXTERN: (3698,20) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, int)
    -> INLINE (MANUAL): (3698,23) dem::records::ParticlePacked::getMaterial(const dem::records::ParticlePacked *) const (isz = 0) (sz = 6)
    -> (3699,5) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
       [[ Called routine is noinline  <2>]]
  -> INLINE (MANUAL): (3619,1) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::~basic_ostringstream(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *const) (isz = 23) (sz = 28)
    -> INLINE (MANUAL): /usr/include/c++/6/sstream:(576,7) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::~basic_ostringstream(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *, const long *const *) (isz = 53) (sz = 60)
      -> INLINE (MANUAL): (577,9) std::basic_ios<char, std::char_traits<char>>::~basic_ios(std::basic_ios<char, std::char_traits<char>> *const) (isz = 0) (sz = 5)
        -> INLINE (MANUAL): /usr/include/c++/6/bits/basic_ios.h:(282,7) std::basic_ios<char, std::char_traits<char>>::~basic_ios(std::basic_ios<char, std::char_traits<char>> *) (isz = 9) (sz = 14)
          -> EXTERN: (282,20) __cxa_call_unexpected
          -> EXTERN: (282,22) std::ios_base::~ios_base(std::ios_base *const)
      -> INLINE (MANUAL): (577,9) std::basic_ostream<char, std::char_traits<char>>::~basic_ostream(std::basic_ostream<char, std::char_traits<char>> *, const long *const *) (isz = 23) (sz = 30)
        -> INLINE (MANUAL): /usr/include/c++/6/ostream:(93,26) std::basic_ios<char, std::char_traits<char>>::~basic_ios(std::basic_ios<char, std::char_traits<char>> *const) (isz = 0) (sz = 5)
          -> INLINE (MANUAL): /usr/include/c++/6/bits/basic_ios.h:(282,7) std::basic_ios<char, std::char_traits<char>>::~basic_ios(std::basic_ios<char, std::char_traits<char>> *) (isz = 9) (sz = 14)
            -> EXTERN: (282,20) __cxa_call_unexpected
            -> EXTERN: (282,22) std::ios_base::~ios_base(std::ios_base *const)
      -> INLINE (MANUAL): (577,9) std::basic_stringbuf<char, std::char_traits<char>, std::allocator<char>>::~basic_stringbuf(std::basic_stringbuf<char, std::char_traits<char>, std::allocator<char>> *) (isz = 22) (sz = 27)
        -> INLINE (MANUAL): /usr/include/c++/6/iosfwd:(96,11) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *) (isz = 27) (sz = 32)
          -> INLINE (MANUAL): /usr/include/c++/6/bits/basic_string.h:(3062,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_M_rep(const std::basic_string<char, std::char_traits<char>, std::allocator<char>> *) const (isz = 3) (sz = 10)
            -> INLINE (MANUAL): (2817,44) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_M_data(const std::basic_string<char, std::char_traits<char>, std::allocator<char>> *) const (isz = 0) (sz = 7)
          -> INLINE (MANUAL): /usr/include/c++/6/bits/basic_string.h:(3062,19) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep::_M_dispose(std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep *, const std::allocator<char> &) (isz = 37) (sz = 44)
            -> EXTERN: (2746,2) __cxa_call_unexpected
            -> INLINE (MANUAL): (2748,34) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep::_S_empty_rep() (isz = 0) (sz = 4)
            -> INLINE (MANUAL): (2761,12) __gnu_cxx::__exchange_and_add_dispatch(_Atomic_word *, int) (isz = 18) (sz = 28)
              -> INLINE (MANUAL): /usr/include/c++/6/ext/atomicity.h:(81,9) __gthread_active_p() (isz = 1) (sz = 5)
              -> INLINE (MANUAL): /usr/include/c++/6/ext/atomicity.h:(82,14) __gnu_cxx::__exchange_and_add(volatile _Atomic_word *, int) (isz = 4) (sz = 13)
                -> EXTERN: (49,12) __atomic_fetch_add_4(volatile void *, unsigned int, int)
              -> INLINE (MANUAL): /usr/include/c++/6/ext/atomicity.h:(84,14) __gnu_cxx::__exchange_and_add_single(_Atomic_word *, int) (isz = 3) (sz = 12)
            -> EXTERN: (2765,5) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep::_M_destroy(std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep *, const std::allocator<char> &)
          -> INLINE (MANUAL): /usr/include/c++/6/bits/basic_string.h:(3062,36) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::get_allocator(std::basic_string<char, std::char_traits<char>, std::allocator<char>>::allocator_type *, const std::basic_string<char, std::char_traits<char>, std::allocator<char>> *) const (isz = 2) (sz = 9)
            -> INLINE (MANUAL): (4369,16) std::allocator<char>::allocator(std::allocator<char> *, const std::allocator<char> &) (isz = 5) (sz = 12)
              -> DELETED: /usr/include/c++/6/bits/allocator.h:(121,31) __gnu_cxx::new_allocator<char>::new_allocator(__gnu_cxx::new_allocator<char> *const, const __gnu_cxx::new_allocator<char> &) (isz = 0) (sz = 7)
              -> EXTERN: /usr/include/c++/6/bits/allocator.h:(121,36) __cxa_call_unexpected
        -> INLINE (MANUAL): /usr/include/c++/6/iosfwd:(96,11) std::basic_streambuf<char, std::char_traits<char>>::~basic_streambuf(std::basic_streambuf<char, std::char_traits<char>> *const) (isz = 0) (sz = 5)
          -> INLINE (MANUAL): /usr/include/c++/6/streambuf:(197,7) std::basic_streambuf<char, std::char_traits<char>>::~basic_streambuf(std::basic_streambuf<char, std::char_traits<char>> *) (isz = 6) (sz = 11)
            -> EXTERN: (198,9) std::locale::~locale(std::locale *)
  -> INLINE (MANUAL): (3619,18) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::str(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::__string_type *, const std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *) const (isz = 190) (sz = 197)
    -> INLINE (MANUAL): /usr/include/c++/6/sstream:(625,29) std::basic_stringbuf<char, std::char_traits<char>, std::allocator<char>>::str(std::basic_stringbuf<char, std::char_traits<char>, std::allocator<char>>::__string_type *, const std::basic_stringbuf<char, std::char_traits<char>, std::allocator<char>> *) const (isz = 280) (sz = 287)
      -> INLINE (MANUAL): (168,16) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *) (isz = 27) (sz = 32)
        -> INLINE (MANUAL): /usr/include/c++/6/bits/basic_string.h:(3062,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_M_rep(const std::basic_string<char, std::char_traits<char>, std::allocator<char>> *) const (isz = 3) (sz = 10)
          -> INLINE (MANUAL): (2817,44) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_M_data(const std::basic_string<char, std::char_traits<char>, std::allocator<char>> *) const (isz = 0) (sz = 7)
        -> INLINE (MANUAL): /usr/include/c++/6/bits/basic_string.h:(3062,19) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep::_M_dispose(std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep *, const std::allocator<char> &) (isz = 37) (sz = 44)
          -> EXTERN: (2746,2) __cxa_call_unexpected
          -> INLINE (MANUAL): (2748,34) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep::_S_empty_rep() (isz = 0) (sz = 4)
          -> (2761,12) __gnu_cxx::__exchange_and_add_dispatch(_Atomic_word *, int) (isz = 18) (sz = 28)
             [[ Callee not marked with inlining pragma  <1>]]
          -> EXTERN: (2765,5) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep::_M_destroy(std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep *, const std::allocator<char> &)
        -> INLINE (MANUAL): /usr/include/c++/6/bits/basic_string.h:(3062,36) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::get_allocator(std::basic_string<char, std::char_traits<char>, std::allocator<char>>::allocator_type *, const std::basic_string<char, std::char_traits<char>, std::allocator<char>> *) const (isz = 2) (sz = 9)
          -> INLINE (MANUAL): (4369,16) std::allocator<char>::allocator(std::allocator<char> *, const std::allocator<char> &) (isz = 5) (sz = 12)
            -> DELETED: /usr/include/c++/6/bits/allocator.h:(121,31) __gnu_cxx::new_allocator<char>::new_allocator(__gnu_cxx::new_allocator<char> *const, const __gnu_cxx::new_allocator<char> &) (isz = 0) (sz = 7)
            -> EXTERN: /usr/include/c++/6/bits/allocator.h:(121,36) __cxa_call_unexpected
      -> INLINE (MANUAL): (168,16) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *) (isz = 13) (sz = 18)
        -> INLINE (MANUAL): /usr/include/c++/6/bits/basic_string.h:(2959,21) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_S_empty_rep() (isz = 2) (sz = 7)
          -> INLINE (MANUAL): (2947,16) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep::_S_empty_rep() (isz = 0) (sz = 4)
        -> INLINE (MANUAL): /usr/include/c++/6/bits/basic_string.h:(2959,36) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep::_M_refdata(std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep *) (isz = 0) (sz = 7)
        -> INLINE (MANUAL): /usr/include/c++/6/bits/basic_string.h:(2959,36) std::allocator<char>::allocator(std::allocator<char> *) (isz = 5) (sz = 10)
          -> DELETED: /usr/include/c++/6/bits/allocator.h:(118,7) __gnu_cxx::new_allocator<char>::new_allocator(__gnu_cxx::new_allocator<char> *const) (isz = 0) (sz = 5)
          -> EXTERN: /usr/include/c++/6/bits/allocator.h:(118,27) __cxa_call_unexpected
        -> INLINE (MANUAL): /usr/include/c++/6/bits/basic_string.h:(2959,50) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Alloc_hider::_Alloc_hider(std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Alloc_hider *, char *, const std::allocator<char> &) (isz = 1) (sz = 10)
          -> INLINE (MANUAL): (2791,11) std::allocator<char>::allocator(std::allocator<char> *const, const std::allocator<char> &) (isz = 0) (sz = 7)
            -> INLINE (MANUAL): /usr/include/c++/6/bits/allocator.h:(120,7) std::allocator<char>::allocator(std::allocator<char> *, const std::allocator<char> &) (isz = 5) (sz = 12)
              -> DELETED: (121,31) __gnu_cxx::new_allocator<char>::new_allocator(__gnu_cxx::new_allocator<char> *const, const __gnu_cxx::new_allocator<char> &) (isz = 0) (sz = 7)
              -> EXTERN: (121,36) __cxa_call_unexpected
      -> INLINE (MANUAL): (169,12) std::basic_streambuf<char, std::char_traits<char>>::pptr(const std::basic_streambuf<char, std::char_traits<char>> *) const (isz = 0) (sz = 6)
      -> INLINE (MANUAL): (172,16) std::basic_streambuf<char, std::char_traits<char>>::pptr(const std::basic_streambuf<char, std::char_traits<char>> *) const (isz = 0) (sz = 6)
      -> INLINE (MANUAL): (172,31) std::basic_streambuf<char, std::char_traits<char>>::egptr(const std::basic_streambuf<char, std::char_traits<char>> *) const (isz = 0) (sz = 6)
      -> INLINE (MANUAL): (173,14) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *) (isz = 27) (sz = 32)
        -> INLINE (MANUAL): /usr/include/c++/6/bits/basic_string.h:(3062,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_M_rep(const std::basic_string<char, std::char_traits<char>, std::allocator<char>> *) const (isz = 3) (sz = 10)
          -> INLINE (MANUAL): (2817,44) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_M_data(const std::basic_string<char, std::char_traits<char>, std::allocator<char>> *) const (isz = 0) (sz = 7)
        -> INLINE (MANUAL): /usr/include/c++/6/bits/basic_string.h:(3062,19) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep::_M_dispose(std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep *, const std::allocator<char> &) (isz = 37) (sz = 44)
          -> EXTERN: (2746,2) __cxa_call_unexpected
          -> INLINE (MANUAL): (2748,34) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep::_S_empty_rep() (isz = 0) (sz = 4)
          -> INLINE (MANUAL): (2761,12) __gnu_cxx::__exchange_and_add_dispatch(_Atomic_word *, int) (isz = 18) (sz = 28)
            -> INLINE (MANUAL): /usr/include/c++/6/ext/atomicity.h:(81,9) __gthread_active_p() (isz = 1) (sz = 5)
            -> INLINE (MANUAL): /usr/include/c++/6/ext/atomicity.h:(82,14) __gnu_cxx::__exchange_and_add(volatile _Atomic_word *, int) (isz = 4) (sz = 13)
              -> EXTERN: (49,12) __atomic_fetch_add_4(volatile void *, unsigned int, int)
            -> INLINE (MANUAL): /usr/include/c++/6/ext/atomicity.h:(84,14) __gnu_cxx::__exchange_and_add_single(_Atomic_word *, int) (isz = 3) (sz = 12)
          -> EXTERN: (2765,5) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep::_M_destroy(std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep *, const std::allocator<char> &)
        -> INLINE (MANUAL): /usr/include/c++/6/bits/basic_string.h:(3062,36) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::get_allocator(std::basic_string<char, std::char_traits<char>, std::allocator<char>>::allocator_type *, const std::basic_string<char, std::char_traits<char>, std::allocator<char>> *) const (isz = 2) (sz = 9)
          -> INLINE (MANUAL): (4369,16) std::allocator<char>::allocator(std::allocator<char> *, const std::allocator<char> &) (isz = 5) (sz = 12)
            -> DELETED: /usr/include/c++/6/bits/allocator.h:(121,31) __gnu_cxx::new_allocator<char>::new_allocator(__gnu_cxx::new_allocator<char> *const, const __gnu_cxx::new_allocator<char> &) (isz = 0) (sz = 7)
            -> EXTERN: /usr/include/c++/6/bits/allocator.h:(121,36) __cxa_call_unexpected
      -> INLINE (MANUAL): (173,14) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::operator=(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *, std::basic_string<char, std::char_traits<char>, std::allocator<char>> &&) (isz = 0) (sz = 9)
        -> EXTERN: /usr/include/c++/6/bits/basic_string.h:(3107,8) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::swap(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *, std::basic_string<char, std::char_traits<char>, std::allocator<char>> &)
      -> INLINE (MANUAL): (173,36) std::basic_streambuf<char, std::char_traits<char>>::pbase(const std::basic_streambuf<char, std::char_traits<char>> *) const (isz = 0) (sz = 6)
      -> INLINE (MANUAL): (173,51) std::basic_streambuf<char, std::char_traits<char>>::pptr(const std::basic_streambuf<char, std::char_traits<char>> *) const (isz = 0) (sz = 6)
      -> INLINE (MANUAL): (173,51) std::allocator<char>::allocator(std::allocator<char> *) (isz = 5) (sz = 10)
        -> DELETED: /usr/include/c++/6/bits/allocator.h:(118,7) __gnu_cxx::new_allocator<char>::new_allocator(__gnu_cxx::new_allocator<char> *const) (isz = 0) (sz = 5)
        -> EXTERN: /usr/include/c++/6/bits/allocator.h:(118,27) __cxa_call_unexpected
      -> INLINE (MANUAL): (173,51) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *) (isz = 27) (sz = 32)
        -> INLINE (MANUAL): /usr/include/c++/6/bits/basic_string.h:(3062,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_M_rep(const std::basic_string<char, std::char_traits<char>, std::allocator<char>> *) const (isz = 3) (sz = 10)
          -> INLINE (MANUAL): (2817,44) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_M_data(const std::basic_string<char, std::char_traits<char>, std::allocator<char>> *) const (isz = 0) (sz = 7)
        -> INLINE (MANUAL): /usr/include/c++/6/bits/basic_string.h:(3062,19) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep::_M_dispose(std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep *, const std::allocator<char> &) (isz = 37) (sz = 44)
          -> EXTERN: (2746,2) __cxa_call_unexpected
          -> INLINE (MANUAL): (2748,34) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep::_S_empty_rep() (isz = 0) (sz = 4)
          -> (2761,12) __gnu_cxx::__exchange_and_add_dispatch(_Atomic_word *, int) (isz = 18) (sz = 28)
             [[ Callee not marked with inlining pragma  <1>]]
          -> EXTERN: (2765,5) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep::_M_destroy(std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep *, const std::allocator<char> &)
        -> INLINE (MANUAL): /usr/include/c++/6/bits/basic_string.h:(3062,36) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::get_allocator(std::basic_string<char, std::char_traits<char>, std::allocator<char>>::allocator_type *, const std::basic_string<char, std::char_traits<char>, std::allocator<char>> *) const (isz = 2) (sz = 9)
          -> INLINE (MANUAL): (4369,16) std::allocator<char>::allocator(std::allocator<char> *, const std::allocator<char> &) (isz = 5) (sz = 12)
            -> DELETED: /usr/include/c++/6/bits/allocator.h:(121,31) __gnu_cxx::new_allocator<char>::new_allocator(__gnu_cxx::new_allocator<char> *const, const __gnu_cxx::new_allocator<char> &) (isz = 0) (sz = 7)
            -> EXTERN: /usr/include/c++/6/bits/allocator.h:(121,36) __cxa_call_unexpected
      -> INLINE (MANUAL): (173,51) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::basic_string<char *>(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *, char *, char *, const std::allocator<char> &) (isz = 76) (sz = 87)
        -> INLINE (MANUAL): /usr/include/c++/6/bits/basic_string.tcc:(669,19) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_S_construct<char *>(char *, char *, const std::allocator<char> &) (isz = 70) (sz = 81)
          -> INLINE (MANUAL): /usr/include/c++/6/bits/basic_string.h:(4296,11) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_S_construct_aux<char *>(char *, char *, const std::allocator<char> &, std::__false_type) (isz = 68) (sz = 81)
            -> INLINE (MANUAL): (4275,18) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_S_construct<char *>(char *, char *, const std::allocator<char> &, std::forward_iterator_tag) (isz = 65) (sz = 79)
              -> INLINE (MANUAL): /usr/include/c++/6/bits/basic_string.tcc:(568,24) std::allocator<char>::allocator(std::allocator<char> *) (isz = 5) (sz = 10)
                -> DELETED: /usr/include/c++/6/bits/allocator.h:(118,7) __gnu_cxx::new_allocator<char>::new_allocator(__gnu_cxx::new_allocator<char> *const) (isz = 0) (sz = 5)
                -> EXTERN: /usr/include/c++/6/bits/allocator.h:(118,27) __cxa_call_unexpected
              -> DELETED: /usr/include/c++/6/bits/basic_string.tcc:(568,28) std::operator==<char>(const std::allocator<char> &, const std::allocator<char> &) (isz = 0) (sz = 6)
              -> INLINE (MANUAL): /usr/include/c++/6/bits/basic_string.tcc:(569,11) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_S_empty_rep() (isz = 2) (sz = 7)
                -> INLINE (MANUAL): /usr/include/c++/6/bits/basic_string.h:(2947,16) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep::_S_empty_rep() (isz = 0) (sz = 4)
              -> INLINE (MANUAL): /usr/include/c++/6/bits/basic_string.tcc:(569,26) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep::_M_refdata(std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep *) (isz = 0) (sz = 7)
              -> INLINE (MANUAL): /usr/include/c++/6/bits/basic_string.tcc:(572,6) __gnu_cxx::__is_null_pointer<char>(char *) (isz = 1) (sz = 7)
              -> EXTERN: /usr/include/c++/6/bits/basic_string.tcc:(573,4) std::__throw_logic_error(const char *)
              -> INLINE (MANUAL): /usr/include/c++/6/bits/basic_string.tcc:(575,50) std::distance<char *>(char *, char *) (isz = 6) (sz = 15)
                -> INLINE (MANUAL): /usr/include/c++/6/bits/stl_iterator_base_funcs.h:(138,14) std::__distance<char *>(char *, char *, std::random_access_iterator_tag) (isz = 0) (sz = 9)
                -> INLINE (MANUAL): /usr/include/c++/6/bits/stl_iterator_base_funcs.h:(139,34) std::__iterator_category<char *>(char *const &) (isz = 0) (sz = 5)
              -> EXTERN: /usr/include/c++/6/bits/basic_string.tcc:(578,14) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep::_S_create(std::basic_string<char, std::char_traits<char>, std::allocator<char>>::size_type, std::basic_string<char, std::char_traits<char>, std::allocator<char>>::size_type, const std::allocator<char> &)
              -> INLINE (MANUAL): /usr/include/c++/6/bits/basic_string.tcc:(580,6) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_S_copy_chars(char *, char *, char *) (isz = 7) (sz = 16)
                -> INLINE (MANUAL): /usr/include/c++/6/bits/basic_string.h:(2919,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_M_copy(char *, const char *, std::basic_string<char, std::char_traits<char>, std::allocator<char>>::size_type) (isz = 10) (sz = 19)
                  -> INLINE (MANUAL): (2875,4) std::char_traits<char>::assign(std::char_traits<char>::char_type &, const std::char_traits<char>::char_type &) (isz = 0) (sz = 7)
                  -> INLINE (MANUAL): (2877,4) std::char_traits<char>::copy(std::char_traits<char>::char_type *, const std::char_traits<char>::char_type *, std::size_t) (isz = 4) (sz = 16)
                    -> EXTERN: /usr/include/c++/6/bits/char_traits.h:(290,33) __builtin_memcpy(void *, const void *, unsigned long)
              -> INLINE (MANUAL): /usr/include/c++/6/bits/basic_string.tcc:(580,25) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep::_M_refdata(std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep *) (isz = 0) (sz = 7)
              -> INLINE (MANUAL): /usr/include/c++/6/bits/basic_string.tcc:(586,7) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep::_M_set_length_and_sharable(std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep *, std::basic_string<char, std::char_traits<char>, std::allocator<char>>::size_type) (isz = 14) (sz = 21)
                -> INLINE (MANUAL): /usr/include/c++/6/bits/basic_string.h:(2718,34) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep::_S_empty_rep() (isz = 0) (sz = 4)
                -> INLINE (MANUAL): /usr/include/c++/6/bits/basic_string.h:(2721,14) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep::_M_set_sharable(std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep *) (isz = 0) (sz = 5)
                -> INLINE (MANUAL): /usr/include/c++/6/bits/basic_string.h:(2723,8) std::char_traits<char>::assign(std::char_traits<char>::char_type &, const std::char_traits<char>::char_type &) (isz = 0) (sz = 7)
                -> INLINE (MANUAL): /usr/include/c++/6/bits/basic_string.h:(2723,34) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep::_M_refdata(std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep *) (isz = 0) (sz = 7)
              -> INLINE (MANUAL): /usr/include/c++/6/bits/basic_string.tcc:(587,14) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep::_M_refdata(std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep *) (isz = 0) (sz = 7)
        -> INLINE (MANUAL): /usr/include/c++/6/bits/basic_string.tcc:(669,52) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Alloc_hider::_Alloc_hider(std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Alloc_hider *, char *, const std::allocator<char> &) (isz = 1) (sz = 10)
          -> INLINE (MANUAL): /usr/include/c++/6/bits/basic_string.h:(2791,11) std::allocator<char>::allocator(std::allocator<char> *const, const std::allocator<char> &) (isz = 0) (sz = 7)
            -> INLINE (MANUAL): /usr/include/c++/6/bits/allocator.h:(120,7) std::allocator<char>::allocator(std::allocator<char> *, const std::allocator<char> &) (isz = 5) (sz = 12)
              -> DELETED: (121,31) __gnu_cxx::new_allocator<char>::new_allocator(__gnu_cxx::new_allocator<char> *const, const __gnu_cxx::new_allocator<char> &) (isz = 0) (sz = 7)
              -> EXTERN: (121,36) __cxa_call_unexpected
      -> INLINE (MANUAL): (175,15) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *) (isz = 27) (sz = 32)
        -> INLINE (MANUAL): /usr/include/c++/6/bits/basic_string.h:(3062,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_M_rep(const std::basic_string<char, std::char_traits<char>, std::allocator<char>> *) const (isz = 3) (sz = 10)
          -> INLINE (MANUAL): (2817,44) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_M_data(const std::basic_string<char, std::char_traits<char>, std::allocator<char>> *) const (isz = 0) (sz = 7)
        -> INLINE (MANUAL): /usr/include/c++/6/bits/basic_string.h:(3062,19) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep::_M_dispose(std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep *, const std::allocator<char> &) (isz = 37) (sz = 44)
          -> EXTERN: (2746,2) __cxa_call_unexpected
          -> INLINE (MANUAL): (2748,34) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep::_S_empty_rep() (isz = 0) (sz = 4)
          -> INLINE (MANUAL): (2761,12) __gnu_cxx::__exchange_and_add_dispatch(_Atomic_word *, int) (isz = 18) (sz = 28)
            -> INLINE (MANUAL): /usr/include/c++/6/ext/atomicity.h:(81,9) __gthread_active_p() (isz = 1) (sz = 5)
            -> INLINE (MANUAL): /usr/include/c++/6/ext/atomicity.h:(82,14) __gnu_cxx::__exchange_and_add(volatile _Atomic_word *, int) (isz = 4) (sz = 13)
              -> EXTERN: (49,12) __atomic_fetch_add_4(volatile void *, unsigned int, int)
            -> INLINE (MANUAL): /usr/include/c++/6/ext/atomicity.h:(84,14) __gnu_cxx::__exchange_and_add_single(_Atomic_word *, int) (isz = 3) (sz = 12)
          -> EXTERN: (2765,5) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep::_M_destroy(std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep *, const std::allocator<char> &)
        -> INLINE (MANUAL): /usr/include/c++/6/bits/basic_string.h:(3062,36) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::get_allocator(std::basic_string<char, std::char_traits<char>, std::allocator<char>>::allocator_type *, const std::basic_string<char, std::char_traits<char>, std::allocator<char>> *) const (isz = 2) (sz = 9)
          -> INLINE (MANUAL): (4369,16) std::allocator<char>::allocator(std::allocator<char> *, const std::allocator<char> &) (isz = 5) (sz = 12)
            -> DELETED: /usr/include/c++/6/bits/allocator.h:(121,31) __gnu_cxx::new_allocator<char>::new_allocator(__gnu_cxx::new_allocator<char> *const, const __gnu_cxx::new_allocator<char> &) (isz = 0) (sz = 7)
            -> EXTERN: /usr/include/c++/6/bits/allocator.h:(121,36) __cxa_call_unexpected
      -> INLINE (MANUAL): (175,15) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::operator=(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *, std::basic_string<char, std::char_traits<char>, std::allocator<char>> &&) (isz = 0) (sz = 9)
        -> EXTERN: /usr/include/c++/6/bits/basic_string.h:(3107,8) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::swap(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *, std::basic_string<char, std::char_traits<char>, std::allocator<char>> &)
      -> INLINE (MANUAL): (175,37) std::basic_streambuf<char, std::char_traits<char>>::pbase(const std::basic_streambuf<char, std::char_traits<char>> *) const (isz = 0) (sz = 6)
      -> INLINE (MANUAL): (175,52) std::allocator<char>::allocator(std::allocator<char> *) (isz = 5) (sz = 10)
        -> DELETED: /usr/include/c++/6/bits/allocator.h:(118,7) __gnu_cxx::new_allocator<char>::new_allocator(__gnu_cxx::new_allocator<char> *const) (isz = 0) (sz = 5)
        -> EXTERN: /usr/include/c++/6/bits/allocator.h:(118,27) __cxa_call_unexpected
      -> INLINE (MANUAL): (175,52) std::basic_streambuf<char, std::char_traits<char>>::egptr(const std::basic_streambuf<char, std::char_traits<char>> *) const (isz = 0) (sz = 6)
      -> INLINE (MANUAL): (175,52) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *) (isz = 27) (sz = 32)
        -> INLINE (MANUAL): /usr/include/c++/6/bits/basic_string.h:(3062,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_M_rep(const std::basic_string<char, std::char_traits<char>, std::allocator<char>> *) const (isz = 3) (sz = 10)
          -> INLINE (MANUAL): (2817,44) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_M_data(const std::basic_string<char, std::char_traits<char>, std::allocator<char>> *) const (isz = 0) (sz = 7)
        -> INLINE (MANUAL): /usr/include/c++/6/bits/basic_string.h:(3062,19) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep::_M_dispose(std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep *, const std::allocator<char> &) (isz = 37) (sz = 44)
          -> EXTERN: (2746,2) __cxa_call_unexpected
          -> INLINE (MANUAL): (2748,34) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep::_S_empty_rep() (isz = 0) (sz = 4)
          -> (2761,12) __gnu_cxx::__exchange_and_add_dispatch(_Atomic_word *, int) (isz = 18) (sz = 28)
             [[ Callee not marked with inlining pragma  <1>]]
          -> EXTERN: (2765,5) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep::_M_destroy(std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep *, const std::allocator<char> &)
        -> INLINE (MANUAL): /usr/include/c++/6/bits/basic_string.h:(3062,36) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::get_allocator(std::basic_string<char, std::char_traits<char>, std::allocator<char>>::allocator_type *, const std::basic_string<char, std::char_traits<char>, std::allocator<char>> *) const (isz = 2) (sz = 9)
          -> INLINE (MANUAL): (4369,16) std::allocator<char>::allocator(std::allocator<char> *, const std::allocator<char> &) (isz = 5) (sz = 12)
            -> DELETED: /usr/include/c++/6/bits/allocator.h:(121,31) __gnu_cxx::new_allocator<char>::new_allocator(__gnu_cxx::new_allocator<char> *const, const __gnu_cxx::new_allocator<char> &) (isz = 0) (sz = 7)
            -> EXTERN: /usr/include/c++/6/bits/allocator.h:(121,36) __cxa_call_unexpected
      -> INLINE (MANUAL): (175,52) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::basic_string<char *>(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *, char *, char *, const std::allocator<char> &) (isz = 76) (sz = 87)
        -> INLINE (MANUAL): /usr/include/c++/6/bits/basic_string.tcc:(669,19) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_S_construct<char *>(char *, char *, const std::allocator<char> &) (isz = 70) (sz = 81)
          -> INLINE (MANUAL): /usr/include/c++/6/bits/basic_string.h:(4296,11) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_S_construct_aux<char *>(char *, char *, const std::allocator<char> &, std::__false_type) (isz = 68) (sz = 81)
            -> INLINE (MANUAL): (4275,18) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_S_construct<char *>(char *, char *, const std::allocator<char> &, std::forward_iterator_tag) (isz = 65) (sz = 79)
              -> INLINE (MANUAL): /usr/include/c++/6/bits/basic_string.tcc:(568,24) std::allocator<char>::allocator(std::allocator<char> *) (isz = 5) (sz = 10)
                -> DELETED: /usr/include/c++/6/bits/allocator.h:(118,7) __gnu_cxx::new_allocator<char>::new_allocator(__gnu_cxx::new_allocator<char> *const) (isz = 0) (sz = 5)
                -> EXTERN: /usr/include/c++/6/bits/allocator.h:(118,27) __cxa_call_unexpected
              -> DELETED: /usr/include/c++/6/bits/basic_string.tcc:(568,28) std::operator==<char>(const std::allocator<char> &, const std::allocator<char> &) (isz = 0) (sz = 6)
              -> INLINE (MANUAL): /usr/include/c++/6/bits/basic_string.tcc:(569,11) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_S_empty_rep() (isz = 2) (sz = 7)
                -> INLINE (MANUAL): /usr/include/c++/6/bits/basic_string.h:(2947,16) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep::_S_empty_rep() (isz = 0) (sz = 4)
              -> INLINE (MANUAL): /usr/include/c++/6/bits/basic_string.tcc:(569,26) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep::_M_refdata(std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep *) (isz = 0) (sz = 7)
              -> INLINE (MANUAL): /usr/include/c++/6/bits/basic_string.tcc:(572,6) __gnu_cxx::__is_null_pointer<char>(char *) (isz = 1) (sz = 7)
              -> EXTERN: /usr/include/c++/6/bits/basic_string.tcc:(573,4) std::__throw_logic_error(const char *)
              -> INLINE (MANUAL): /usr/include/c++/6/bits/basic_string.tcc:(575,50) std::distance<char *>(char *, char *) (isz = 6) (sz = 15)
                -> INLINE (MANUAL): /usr/include/c++/6/bits/stl_iterator_base_funcs.h:(138,14) std::__distance<char *>(char *, char *, std::random_access_iterator_tag) (isz = 0) (sz = 9)
                -> INLINE (MANUAL): /usr/include/c++/6/bits/stl_iterator_base_funcs.h:(139,34) std::__iterator_category<char *>(char *const &) (isz = 0) (sz = 5)
              -> EXTERN: /usr/include/c++/6/bits/basic_string.tcc:(578,14) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep::_S_create(std::basic_string<char, std::char_traits<char>, std::allocator<char>>::size_type, std::basic_string<char, std::char_traits<char>, std::allocator<char>>::size_type, const std::allocator<char> &)
              -> INLINE (MANUAL): /usr/include/c++/6/bits/basic_string.tcc:(580,6) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_S_copy_chars(char *, char *, char *) (isz = 7) (sz = 16)
                -> INLINE (MANUAL): /usr/include/c++/6/bits/basic_string.h:(2919,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_M_copy(char *, const char *, std::basic_string<char, std::char_traits<char>, std::allocator<char>>::size_type) (isz = 10) (sz = 19)
                  -> INLINE (MANUAL): (2875,4) std::char_traits<char>::assign(std::char_traits<char>::char_type &, const std::char_traits<char>::char_type &) (isz = 0) (sz = 7)
                  -> INLINE (MANUAL): (2877,4) std::char_traits<char>::copy(std::char_traits<char>::char_type *, const std::char_traits<char>::char_type *, std::size_t) (isz = 4) (sz = 16)
                    -> EXTERN: /usr/include/c++/6/bits/char_traits.h:(290,33) __builtin_memcpy(void *, const void *, unsigned long)
              -> INLINE (MANUAL): /usr/include/c++/6/bits/basic_string.tcc:(580,25) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep::_M_refdata(std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep *) (isz = 0) (sz = 7)
              -> INLINE (MANUAL): /usr/include/c++/6/bits/basic_string.tcc:(586,7) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep::_M_set_length_and_sharable(std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep *, std::basic_string<char, std::char_traits<char>, std::allocator<char>>::size_type) (isz = 14) (sz = 21)
                -> INLINE (MANUAL): /usr/include/c++/6/bits/basic_string.h:(2718,34) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep::_S_empty_rep() (isz = 0) (sz = 4)
                -> INLINE (MANUAL): /usr/include/c++/6/bits/basic_string.h:(2721,14) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep::_M_set_sharable(std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep *) (isz = 0) (sz = 5)
                -> INLINE (MANUAL): /usr/include/c++/6/bits/basic_string.h:(2723,8) std::char_traits<char>::assign(std::char_traits<char>::char_type &, const std::char_traits<char>::char_type &) (isz = 0) (sz = 7)
                -> INLINE (MANUAL): /usr/include/c++/6/bits/basic_string.h:(2723,34) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep::_M_refdata(std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep *) (isz = 0) (sz = 7)
              -> INLINE (MANUAL): /usr/include/c++/6/bits/basic_string.tcc:(587,14) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep::_M_refdata(std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep *) (isz = 0) (sz = 7)
        -> INLINE (MANUAL): /usr/include/c++/6/bits/basic_string.tcc:(669,52) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Alloc_hider::_Alloc_hider(std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Alloc_hider *, char *, const std::allocator<char> &) (isz = 1) (sz = 10)
          -> INLINE (MANUAL): /usr/include/c++/6/bits/basic_string.h:(2791,11) std::allocator<char>::allocator(std::allocator<char> *const, const std::allocator<char> &) (isz = 0) (sz = 7)
            -> INLINE (MANUAL): /usr/include/c++/6/bits/allocator.h:(120,7) std::allocator<char>::allocator(std::allocator<char> *, const std::allocator<char> &) (isz = 5) (sz = 12)
              -> DELETED: (121,31) __gnu_cxx::new_allocator<char>::new_allocator(__gnu_cxx::new_allocator<char> *const, const __gnu_cxx::new_allocator<char> &) (isz = 0) (sz = 7)
              -> EXTERN: (121,36) __cxa_call_unexpected
      -> INLINE (MANUAL): (178,10) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::operator=(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *, const std::basic_string<char, std::char_traits<char>, std::allocator<char>> &) (isz = 1) (sz = 10)
        -> EXTERN: /usr/include/c++/6/bits/basic_string.h:(3070,22) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::assign(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *, const std::basic_string<char, std::char_traits<char>, std::allocator<char>> &)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at dem/records/Particle.cpp(3625,4) inlined into dem/records/Particle.cpp(3618,1)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ dem/records/Particle.cpp(3626,11) ]
LOOP END

LOOP BEGIN at dem/records/Particle.cpp(3631,4) inlined into dem/records/Particle.cpp(3618,1)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ dem/records/Particle.cpp(3632,11) ]
LOOP END

LOOP BEGIN at dem/records/Particle.cpp(3637,4) inlined into dem/records/Particle.cpp(3618,1)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ dem/records/Particle.cpp(3638,11) ]
LOOP END

LOOP BEGIN at dem/records/Particle.cpp(3643,4) inlined into dem/records/Particle.cpp(3618,1)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ dem/records/Particle.cpp(3644,11) ]
LOOP END

LOOP BEGIN at dem/records/Particle.cpp(3649,4) inlined into dem/records/Particle.cpp(3618,1)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ dem/records/Particle.cpp(3650,11) ]
   remark #25436: completely unrolled by 2  
LOOP END

LOOP BEGIN at dem/records/Particle.cpp(3655,4) inlined into dem/records/Particle.cpp(3618,1)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ dem/records/Particle.cpp(3656,11) ]
   remark #25436: completely unrolled by 2  
LOOP END

LOOP BEGIN at dem/records/Particle.cpp(3661,4) inlined into dem/records/Particle.cpp(3618,1)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ dem/records/Particle.cpp(3662,11) ]
   remark #25436: completely unrolled by 2  
LOOP END

LOOP BEGIN at dem/records/Particle.cpp(3667,4) inlined into dem/records/Particle.cpp(3618,1)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ dem/records/Particle.cpp(3668,11) ]
   remark #25436: completely unrolled by 2  
LOOP END

LOOP BEGIN at dem/records/Particle.cpp(3673,4) inlined into dem/records/Particle.cpp(3618,1)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ dem/records/Particle.cpp(3674,11) ]
   remark #25436: completely unrolled by 2  
LOOP END

LOOP BEGIN at dem/records/Particle.cpp(3679,4) inlined into dem/records/Particle.cpp(3618,1)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ dem/records/Particle.cpp(3680,11) ]
   remark #25436: completely unrolled by 2  
LOOP END

    Report from: Code generation optimizations [cg]

/usr/include/c++/6/bits/char_traits.h(290,33):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
/usr/include/c++/6/bits/char_traits.h(290,33):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
/usr/include/c++/6/bits/char_traits.h(290,33):remark #34026: call to memcpy implemented as a call to optimized library version
/usr/include/c++/6/bits/char_traits.h(290,33):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
/usr/include/c++/6/bits/char_traits.h(290,33):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
/usr/include/c++/6/bits/char_traits.h(290,33):remark #34026: call to memcpy implemented as a call to optimized library version
dem/records/Particle.cpp(3616,60):remark #34051: REGISTER ALLOCATION : [_ZNK3dem7records14ParticlePacked8toStringEv] dem/records/Particle.cpp:3616

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   13[ rax rdx rcx rbx rbp rsi rdi r8 r12-r15 zmm0]
        
    Routine temporaries
        Total         :     582
            Global    :     132
            Local     :     450
        Regenerable   :     233
        Spilled       :       6
        
    Routine stack
        Variables     :     420 bytes*
            Reads     :      27 [6.06e+00 ~ 1.0%]
            Writes    :      63 [2.61e+01 ~ 4.1%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: dem::records::ParticlePacked::toString(const dem::records::ParticlePacked *, std::ostream &) const

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (dem::records::ParticlePacked::toString(const dem::records::ParticlePacked *, std::ostream &) const) [150/166=90.4%] dem/records/Particle.cpp(3622,71)
  -> (3623,5) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <2>]]
  -> (3624,5) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <2>]]
  -> EXTERN: (3626,11) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, int)
  -> INLINE (MANUAL): (3626,14) dem::records::ParticlePacked::getVertices(const dem::records::ParticlePacked *, int) const (isz = 4) (sz = 13)
    -> INLINE (MANUAL): ./dem/records/Particle.h:(14206,105) tarch::la::Vector<6, int>::operator[](const tarch::la::Vector<6, int> *, int) const (isz = 1) (sz = 9)
  -> (3626,29) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <2>]]
  -> EXTERN: (3628,8) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, int)
  -> INLINE (MANUAL): (3628,11) dem::records::ParticlePacked::getVertices(const dem::records::ParticlePacked *, int) const (isz = 4) (sz = 13)
    -> INLINE (MANUAL): ./dem/records/Particle.h:(14206,105) tarch::la::Vector<6, int>::operator[](const tarch::la::Vector<6, int> *, int) const (isz = 1) (sz = 9)
  -> (3628,28) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <2>]]
  -> (3629,5) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <2>]]
  -> (3630,5) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <2>]]
  -> (3632,11) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) (isz = 1) (sz = 10)
     [[ Called routine is noinline  <2>]]
  -> INLINE (MANUAL): (3632,14) dem::records::ParticlePacked::getOrientation(const dem::records::ParticlePacked *, int) const (isz = 4) (sz = 13)
    -> INLINE (MANUAL): ./dem/records/Particle.h:(14290,108) tarch::la::Vector<9, double>::operator[](const tarch::la::Vector<9, double> *, int) const (isz = 1) (sz = 9)
  -> (3632,32) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <2>]]
  -> (3634,8) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) (isz = 1) (sz = 10)
     [[ Called routine is noinline  <2>]]
  -> INLINE (MANUAL): (3634,11) dem::records::ParticlePacked::getOrientation(const dem::records::ParticlePacked *, int) const (isz = 4) (sz = 13)
    -> INLINE (MANUAL): ./dem/records/Particle.h:(14290,108) tarch::la::Vector<9, double>::operator[](const tarch::la::Vector<9, double> *, int) const (isz = 1) (sz = 9)
  -> (3634,31) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <2>]]
  -> (3635,5) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <2>]]
  -> (3636,5) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <2>]]
  -> (3638,11) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) (isz = 1) (sz = 10)
     [[ Called routine is noinline  <2>]]
  -> INLINE (MANUAL): (3638,14) dem::records::ParticlePacked::getInertia(const dem::records::ParticlePacked *, int) const (isz = 4) (sz = 13)
    -> INLINE (MANUAL): ./dem/records/Particle.h:(14374,104) tarch::la::Vector<9, double>::operator[](const tarch::la::Vector<9, double> *, int) const (isz = 1) (sz = 9)
  -> (3638,28) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <2>]]
  -> (3640,8) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) (isz = 1) (sz = 10)
     [[ Called routine is noinline  <2>]]
  -> INLINE (MANUAL): (3640,11) dem::records::ParticlePacked::getInertia(const dem::records::ParticlePacked *, int) const (isz = 4) (sz = 13)
    -> INLINE (MANUAL): ./dem/records/Particle.h:(14374,104) tarch::la::Vector<9, double>::operator[](const tarch::la::Vector<9, double> *, int) const (isz = 1) (sz = 9)
  -> (3640,27) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <2>]]
  -> (3641,5) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <2>]]
  -> (3642,5) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <2>]]
  -> (3644,11) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) (isz = 1) (sz = 10)
     [[ Called routine is noinline  <2>]]
  -> INLINE (MANUAL): (3644,14) dem::records::ParticlePacked::getInverse(const dem::records::ParticlePacked *, int) const (isz = 4) (sz = 13)
    -> INLINE (MANUAL): ./dem/records/Particle.h:(14458,104) tarch::la::Vector<9, double>::operator[](const tarch::la::Vector<9, double> *, int) const (isz = 1) (sz = 9)
  -> (3644,28) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <2>]]
  -> (3646,8) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) (isz = 1) (sz = 10)
     [[ Called routine is noinline  <2>]]
  -> INLINE (MANUAL): (3646,11) dem::records::ParticlePacked::getInverse(const dem::records::ParticlePacked *, int) const (isz = 4) (sz = 13)
    -> INLINE (MANUAL): ./dem/records/Particle.h:(14458,104) tarch::la::Vector<9, double>::operator[](const tarch::la::Vector<9, double> *, int) const (isz = 1) (sz = 9)
  -> (3646,27) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <2>]]
  -> (3647,5) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <2>]]
  -> (3648,5) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <2>]]
  -> (3650,11) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) (isz = 1) (sz = 10)
     [[ Called routine is noinline  <2>]]
  -> INLINE (MANUAL): (3650,14) dem::records::ParticlePacked::getCentre(const dem::records::ParticlePacked *, int) const (isz = 4) (sz = 13)
    -> INLINE (MANUAL): ./dem/records/Particle.h:(14542,103) tarch::la::Vector<3, double>::operator[](const tarch::la::Vector<3, double> *, int) const (isz = 1) (sz = 9)
  -> (3650,27) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <2>]]
  -> (3652,8) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) (isz = 1) (sz = 10)
     [[ Called routine is noinline  <2>]]
  -> INLINE (MANUAL): (3652,11) dem::records::ParticlePacked::getCentre(const dem::records::ParticlePacked *, int) const (isz = 4) (sz = 13)
    -> INLINE (MANUAL): ./dem/records/Particle.h:(14542,103) tarch::la::Vector<3, double>::operator[](const tarch::la::Vector<3, double> *, int) const (isz = 1) (sz = 9)
  -> (3652,35) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <2>]]
  -> (3653,5) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <2>]]
  -> (3654,5) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <2>]]
  -> (3656,11) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) (isz = 1) (sz = 10)
     [[ Called routine is noinline  <2>]]
  -> INLINE (MANUAL): (3656,14) dem::records::ParticlePacked::getCentreOfMass(const dem::records::ParticlePacked *, int) const (isz = 4) (sz = 13)
    -> INLINE (MANUAL): ./dem/records/Particle.h:(14626,109) tarch::la::Vector<3, double>::operator[](const tarch::la::Vector<3, double> *, int) const (isz = 1) (sz = 9)
  -> (3656,33) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <2>]]
  -> (3658,8) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) (isz = 1) (sz = 10)
     [[ Called routine is noinline  <2>]]
  -> INLINE (MANUAL): (3658,11) dem::records::ParticlePacked::getCentreOfMass(const dem::records::ParticlePacked *, int) const (isz = 4) (sz = 13)
    -> INLINE (MANUAL): ./dem/records/Particle.h:(14626,109) tarch::la::Vector<3, double>::operator[](const tarch::la::Vector<3, double> *, int) const (isz = 1) (sz = 9)
  -> (3658,41) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <2>]]
  -> (3659,5) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <2>]]
  -> (3660,5) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <2>]]
  -> (3662,11) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) (isz = 1) (sz = 10)
     [[ Called routine is noinline  <2>]]
  -> INLINE (MANUAL): (3662,14) dem::records::ParticlePacked::getReferencialAngular(const dem::records::ParticlePacked *, int) const (isz = 4) (sz = 13)
    -> INLINE (MANUAL): ./dem/records/Particle.h:(14710,115) tarch::la::Vector<3, double>::operator[](const tarch::la::Vector<3, double> *, int) const (isz = 1) (sz = 9)
  -> (3662,39) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <2>]]
  -> (3664,8) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) (isz = 1) (sz = 10)
     [[ Called routine is noinline  <2>]]
  -> INLINE (MANUAL): (3664,11) dem::records::ParticlePacked::getReferencialAngular(const dem::records::ParticlePacked *, int) const (isz = 4) (sz = 13)
    -> INLINE (MANUAL): ./dem/records/Particle.h:(14710,115) tarch::la::Vector<3, double>::operator[](const tarch::la::Vector<3, double> *, int) const (isz = 1) (sz = 9)
  -> (3664,47) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <2>]]
  -> (3665,5) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <2>]]
  -> (3666,5) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <2>]]
  -> (3668,11) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) (isz = 1) (sz = 10)
     [[ Called routine is noinline  <2>]]
  -> INLINE (MANUAL): (3668,14) dem::records::ParticlePacked::getReferentialCentreOfMass(const dem::records::ParticlePacked *, int) const (isz = 4) (sz = 13)
    -> INLINE (MANUAL): ./dem/records/Particle.h:(14794,120) tarch::la::Vector<3, double>::operator[](const tarch::la::Vector<3, double> *, int) const (isz = 1) (sz = 9)
  -> (3668,44) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <2>]]
  -> (3670,8) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) (isz = 1) (sz = 10)
     [[ Called routine is noinline  <2>]]
  -> INLINE (MANUAL): (3670,11) dem::records::ParticlePacked::getReferentialCentreOfMass(const dem::records::ParticlePacked *, int) const (isz = 4) (sz = 13)
    -> INLINE (MANUAL): ./dem/records/Particle.h:(14794,120) tarch::la::Vector<3, double>::operator[](const tarch::la::Vector<3, double> *, int) const (isz = 1) (sz = 9)
  -> (3670,52) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <2>]]
  -> (3671,5) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <2>]]
  -> (3672,5) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <2>]]
  -> (3674,11) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) (isz = 1) (sz = 10)
     [[ Called routine is noinline  <2>]]
  -> INLINE (MANUAL): (3674,14) dem::records::ParticlePacked::getVelocity(const dem::records::ParticlePacked *, int) const (isz = 4) (sz = 13)
    -> INLINE (MANUAL): ./dem/records/Particle.h:(14878,105) tarch::la::Vector<3, double>::operator[](const tarch::la::Vector<3, double> *, int) const (isz = 1) (sz = 9)
  -> (3674,29) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <2>]]
  -> (3676,8) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) (isz = 1) (sz = 10)
     [[ Called routine is noinline  <2>]]
  -> INLINE (MANUAL): (3676,11) dem::records::ParticlePacked::getVelocity(const dem::records::ParticlePacked *, int) const (isz = 4) (sz = 13)
    -> INLINE (MANUAL): ./dem/records/Particle.h:(14878,105) tarch::la::Vector<3, double>::operator[](const tarch::la::Vector<3, double> *, int) const (isz = 1) (sz = 9)
  -> (3676,37) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <2>]]
  -> (3677,5) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <2>]]
  -> (3678,5) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <2>]]
  -> (3680,11) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) (isz = 1) (sz = 10)
     [[ Called routine is noinline  <2>]]
  -> INLINE (MANUAL): (3680,14) dem::records::ParticlePacked::getAngular(const dem::records::ParticlePacked *, int) const (isz = 4) (sz = 13)
    -> INLINE (MANUAL): ./dem/records/Particle.h:(14962,104) tarch::la::Vector<3, double>::operator[](const tarch::la::Vector<3, double> *, int) const (isz = 1) (sz = 9)
  -> (3680,28) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <2>]]
  -> (3682,8) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) (isz = 1) (sz = 10)
     [[ Called routine is noinline  <2>]]
  -> INLINE (MANUAL): (3682,11) dem::records::ParticlePacked::getAngular(const dem::records::ParticlePacked *, int) const (isz = 4) (sz = 13)
    -> INLINE (MANUAL): ./dem/records/Particle.h:(14962,104) tarch::la::Vector<3, double>::operator[](const tarch::la::Vector<3, double> *, int) const (isz = 1) (sz = 9)
  -> (3682,36) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <2>]]
  -> (3683,5) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <2>]]
  -> (3684,5) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <2>]]
  -> (3684,20) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) (isz = 1) (sz = 10)
     [[ Called routine is noinline  <2>]]
  -> INLINE (MANUAL): (3684,23) dem::records::ParticlePacked::getDiameter(const dem::records::ParticlePacked *) const (isz = 0) (sz = 6)
  -> (3685,5) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <2>]]
  -> (3686,5) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <2>]]
  -> (3686,27) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) (isz = 1) (sz = 10)
     [[ Called routine is noinline  <2>]]
  -> INLINE (MANUAL): (3686,30) dem::records::ParticlePacked::getInfluenceRadius(const dem::records::ParticlePacked *) const (isz = 0) (sz = 6)
  -> (3687,5) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <2>]]
  -> (3688,5) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <2>]]
  -> (3688,19) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) (isz = 1) (sz = 10)
     [[ Called routine is noinline  <2>]]
  -> INLINE (MANUAL): (3688,22) dem::records::ParticlePacked::getEpsilon(const dem::records::ParticlePacked *) const (isz = 0) (sz = 6)
  -> (3689,5) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <2>]]
  -> (3690,5) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <2>]]
  -> (3690,16) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) (isz = 1) (sz = 10)
     [[ Called routine is noinline  <2>]]
  -> INLINE (MANUAL): (3690,19) dem::records::ParticlePacked::getMass(const dem::records::ParticlePacked *) const (isz = 0) (sz = 6)
  -> (3691,5) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <2>]]
  -> (3692,5) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <2>]]
  -> (3692,16) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) (isz = 1) (sz = 10)
     [[ Called routine is noinline  <2>]]
  -> INLINE (MANUAL): (3692,19) dem::records::ParticlePacked::getHMin(const dem::records::ParticlePacked *) const (isz = 0) (sz = 6)
  -> (3693,5) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <2>]]
  -> (3694,5) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <2>]]
  -> EXTERN: (3694,32) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, int)
  -> INLINE (MANUAL): (3694,35) dem::records::ParticlePacked::getGlobalParticleNumber(const dem::records::ParticlePacked *) const (isz = 0) (sz = 6)
  -> (3695,5) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <2>]]
  -> (3696,5) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <2>]]
  -> EXTERN: (3696,29) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, int)
  -> INLINE (MANUAL): (3696,32) dem::records::ParticlePacked::getNumberOfTriangles(const dem::records::ParticlePacked *) const (isz = 0) (sz = 6)
  -> (3697,5) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <2>]]
  -> (3698,5) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <2>]]
  -> EXTERN: (3698,20) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, int)
  -> INLINE (MANUAL): (3698,23) dem::records::ParticlePacked::getMaterial(const dem::records::ParticlePacked *) const (isz = 0) (sz = 6)
  -> (3699,5) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at dem/records/Particle.cpp(3625,4)
   remark #15382: vectorization support: call to function std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, int) cannot be vectorized   [ dem/records/Particle.cpp(3626,11) ]
   remark #15382: vectorization support: call to function std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) cannot be vectorized   [ dem/records/Particle.cpp(3626,29) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END

LOOP BEGIN at dem/records/Particle.cpp(3631,4)
   remark #15382: vectorization support: call to function std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) cannot be vectorized   [ dem/records/Particle.cpp(3632,11) ]
   remark #15382: vectorization support: call to function std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) cannot be vectorized   [ dem/records/Particle.cpp(3632,32) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END

LOOP BEGIN at dem/records/Particle.cpp(3637,4)
   remark #15382: vectorization support: call to function std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) cannot be vectorized   [ dem/records/Particle.cpp(3638,11) ]
   remark #15382: vectorization support: call to function std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) cannot be vectorized   [ dem/records/Particle.cpp(3638,28) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END

LOOP BEGIN at dem/records/Particle.cpp(3643,4)
   remark #15382: vectorization support: call to function std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) cannot be vectorized   [ dem/records/Particle.cpp(3644,11) ]
   remark #15382: vectorization support: call to function std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) cannot be vectorized   [ dem/records/Particle.cpp(3644,28) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END

LOOP BEGIN at dem/records/Particle.cpp(3649,4)
   remark #15382: vectorization support: call to function std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) cannot be vectorized   [ dem/records/Particle.cpp(3650,11) ]
   remark #15382: vectorization support: call to function std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) cannot be vectorized   [ dem/records/Particle.cpp(3650,27) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #25436: completely unrolled by 2  
LOOP END

LOOP BEGIN at dem/records/Particle.cpp(3655,4)
   remark #15382: vectorization support: call to function std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) cannot be vectorized   [ dem/records/Particle.cpp(3656,11) ]
   remark #15382: vectorization support: call to function std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) cannot be vectorized   [ dem/records/Particle.cpp(3656,33) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #25436: completely unrolled by 2  
LOOP END

LOOP BEGIN at dem/records/Particle.cpp(3661,4)
   remark #15382: vectorization support: call to function std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) cannot be vectorized   [ dem/records/Particle.cpp(3662,11) ]
   remark #15382: vectorization support: call to function std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) cannot be vectorized   [ dem/records/Particle.cpp(3662,39) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #25436: completely unrolled by 2  
LOOP END

LOOP BEGIN at dem/records/Particle.cpp(3667,4)
   remark #15382: vectorization support: call to function std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) cannot be vectorized   [ dem/records/Particle.cpp(3668,11) ]
   remark #15382: vectorization support: call to function std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) cannot be vectorized   [ dem/records/Particle.cpp(3668,44) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #25436: completely unrolled by 2  
LOOP END

LOOP BEGIN at dem/records/Particle.cpp(3673,4)
   remark #15382: vectorization support: call to function std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) cannot be vectorized   [ dem/records/Particle.cpp(3674,11) ]
   remark #15382: vectorization support: call to function std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) cannot be vectorized   [ dem/records/Particle.cpp(3674,29) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #25436: completely unrolled by 2  
LOOP END

LOOP BEGIN at dem/records/Particle.cpp(3679,4)
   remark #15382: vectorization support: call to function std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) cannot be vectorized   [ dem/records/Particle.cpp(3680,11) ]
   remark #15382: vectorization support: call to function std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) cannot be vectorized   [ dem/records/Particle.cpp(3680,28) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #25436: completely unrolled by 2  
LOOP END

    Report from: Code generation optimizations [cg]

dem/records/Particle.cpp(3622,71):remark #34051: REGISTER ALLOCATION : [_ZNK3dem7records14ParticlePacked8toStringERSo] dem/records/Particle.cpp:3622

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    7[ rax rsi rdi r12-r14 zmm0]
        
    Routine temporaries
        Total         :     333
            Global    :      83
            Local     :     250
        Regenerable   :      86
        Spilled       :       3
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: dem::records::ParticlePacked::getPersistentRecords(dem::records::ParticlePacked::PersistentRecords *, const dem::records::ParticlePacked *) const

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (dem::records::ParticlePacked::getPersistentRecords(dem::records::ParticlePacked::PersistentRecords *, const dem::records::ParticlePacked *) const) [151/166=91.0%] dem/records/Particle.cpp(3703,108)
  -> INLINE (MANUAL): (3704,8) dem::records::ParticlePacked::PersistentRecords::PersistentRecords(dem::records::ParticlePacked::PersistentRecords *, const dem::records::ParticlePacked::PersistentRecords &) (isz = 261) (sz = 268)
    -> INLINE (MANUAL): ./dem/records/Particle.h:(13344,74) tarch::la::Vector<6, int>::Vector(tarch::la::Vector<6, int> *, const tarch::la::Vector<6, int> &) (isz = 17) (sz = 24)
      -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()
    -> INLINE (MANUAL): ./dem/records/Particle.h:(13344,74) tarch::la::Vector<9, double>::Vector(tarch::la::Vector<9, double> *, const tarch::la::Vector<9, double> &) (isz = 17) (sz = 24)
      -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()
    -> INLINE (MANUAL): ./dem/records/Particle.h:(13344,74) tarch::la::Vector<9, double>::Vector(tarch::la::Vector<9, double> *, const tarch::la::Vector<9, double> &) (isz = 17) (sz = 24)
      -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()
    -> INLINE (MANUAL): ./dem/records/Particle.h:(13344,74) tarch::la::Vector<9, double>::Vector(tarch::la::Vector<9, double> *, const tarch::la::Vector<9, double> &) (isz = 17) (sz = 24)
      -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()
    -> INLINE (MANUAL): ./dem/records/Particle.h:(13344,74) tarch::la::Vector<3, double>::Vector(tarch::la::Vector<3, double> *, const tarch::la::Vector<3, double> &) (isz = 17) (sz = 24)
      -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()
    -> INLINE (MANUAL): ./dem/records/Particle.h:(13344,74) tarch::la::Vector<3, double>::Vector(tarch::la::Vector<3, double> *, const tarch::la::Vector<3, double> &) (isz = 17) (sz = 24)
      -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()
    -> INLINE (MANUAL): ./dem/records/Particle.h:(13344,74) tarch::la::Vector<3, double>::Vector(tarch::la::Vector<3, double> *, const tarch::la::Vector<3, double> &) (isz = 17) (sz = 24)
      -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()
    -> INLINE (MANUAL): ./dem/records/Particle.h:(13344,74) tarch::la::Vector<3, double>::Vector(tarch::la::Vector<3, double> *, const tarch::la::Vector<3, double> &) (isz = 17) (sz = 24)
      -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()
    -> INLINE (MANUAL): ./dem/records/Particle.h:(13344,74) tarch::la::Vector<3, double>::Vector(tarch::la::Vector<3, double> *, const tarch::la::Vector<3, double> &) (isz = 17) (sz = 24)
      -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()
    -> INLINE (MANUAL): ./dem/records/Particle.h:(13344,74) tarch::la::Vector<3, double>::Vector(tarch::la::Vector<3, double> *, const tarch::la::Vector<3, double> &) (isz = 17) (sz = 24)
      -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3704,8)
   remark #15389: vectorization support: reference this->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15389: vectorization support: reference toCopy->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 1.000
   remark #15300: LOOP WAS VECTORIZED
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.200 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3704,8)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 2  
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3704,8)
<Peeled loop for vectorization>
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3704,8)
   remark #15388: vectorization support: reference this->_values[i] has aligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15389: vectorization support: reference toCopy->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 3.333
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.200 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=4
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3704,8)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3704,8)
<Peeled loop for vectorization>
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3704,8)
   remark #15388: vectorization support: reference this->_values[i] has aligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15389: vectorization support: reference toCopy->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 3.333
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.200 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=4
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3704,8)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3704,8)
<Peeled loop for vectorization>
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3704,8)
   remark #15388: vectorization support: reference this->_values[i] has aligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15389: vectorization support: reference toCopy->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 3.333
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.200 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=4
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3704,8)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3704,8)
   remark #15389: vectorization support: reference this->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15389: vectorization support: reference toCopy->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 1.000
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.750 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3704,8)
   remark #15389: vectorization support: reference this->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15389: vectorization support: reference toCopy->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 1.000
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.750 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3704,8)
   remark #15389: vectorization support: reference this->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15389: vectorization support: reference toCopy->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 1.000
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.750 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3704,8)
   remark #15389: vectorization support: reference this->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15389: vectorization support: reference toCopy->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 1.000
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.750 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3704,8)
   remark #15389: vectorization support: reference this->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15389: vectorization support: reference toCopy->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 1.000
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.750 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3704,8)
   remark #15389: vectorization support: reference this->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15389: vectorization support: reference toCopy->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 1.000
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.750 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at ./dem/records/Particle.h(13344,74) inlined into dem/records/Particle.cpp(3704,8)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between *(__p1+_2*8+384) (13344:74) and *(__p2+_2*8+384) (13344:74)
   remark #15346: vector dependence: assumed ANTI dependence between *(__p2+_2*8+384) (13344:74) and *(__p1+_2*8+384) (13344:74)
   remark #25436: completely unrolled by 5  
LOOP END

    Report from: Code generation optimizations [cg]

./tarch/la/Vector.cpph(63,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(63,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(63,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(63,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(63,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(63,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(63,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(63,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(63,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(63,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
dem/records/Particle.cpp(3703,108):remark #34051: REGISTER ALLOCATION : [_ZNK3dem7records14ParticlePacked20getPersistentRecordsEv] dem/records/Particle.cpp:3703

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   11[ rax rdx rcx rsi rdi r8-r11 zmm0-zmm1]
        
    Routine temporaries
        Total         :      82
            Global    :      21
            Local     :      61
        Regenerable   :       1
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: dem::records::ParticlePacked::convert(dem::records::Particle *, const dem::records::ParticlePacked *) const

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (dem::records::ParticlePacked::convert(dem::records::Particle *, const dem::records::ParticlePacked *) const) [152/166=91.6%] dem/records/Particle.cpp(3707,69)
  -> INLINE (MANUAL): (3709,4) dem::records::ParticlePacked::getVertices(tarch::la::Vector<6, int> *, const dem::records::ParticlePacked *) const (isz = 19) (sz = 26)
    -> INLINE (MANUAL): ./dem/records/Particle.h:(14165,77) tarch::la::Vector<6, int>::Vector(tarch::la::Vector<6, int> *, const tarch::la::Vector<6, int> &) (isz = 17) (sz = 24)
      -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()
  -> INLINE (MANUAL): (3710,4) dem::records::ParticlePacked::getOrientation(tarch::la::Vector<9, double> *, const dem::records::ParticlePacked *) const (isz = 19) (sz = 26)
    -> INLINE (MANUAL): ./dem/records/Particle.h:(14249,77) tarch::la::Vector<9, double>::Vector(tarch::la::Vector<9, double> *, const tarch::la::Vector<9, double> &) (isz = 17) (sz = 24)
      -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()
  -> INLINE (MANUAL): (3711,4) dem::records::ParticlePacked::getInertia(tarch::la::Vector<9, double> *, const dem::records::ParticlePacked *) const (isz = 19) (sz = 26)
    -> INLINE (MANUAL): ./dem/records/Particle.h:(14333,77) tarch::la::Vector<9, double>::Vector(tarch::la::Vector<9, double> *, const tarch::la::Vector<9, double> &) (isz = 17) (sz = 24)
      -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()
  -> INLINE (MANUAL): (3712,4) dem::records::ParticlePacked::getInverse(tarch::la::Vector<9, double> *, const dem::records::ParticlePacked *) const (isz = 19) (sz = 26)
    -> INLINE (MANUAL): ./dem/records/Particle.h:(14417,77) tarch::la::Vector<9, double>::Vector(tarch::la::Vector<9, double> *, const tarch::la::Vector<9, double> &) (isz = 17) (sz = 24)
      -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()
  -> INLINE (MANUAL): (3713,4) dem::records::ParticlePacked::getCentre(tarch::la::Vector<3, double> *, const dem::records::ParticlePacked *) const (isz = 19) (sz = 26)
    -> INLINE (MANUAL): ./dem/records/Particle.h:(14501,77) tarch::la::Vector<3, double>::Vector(tarch::la::Vector<3, double> *, const tarch::la::Vector<3, double> &) (isz = 17) (sz = 24)
      -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()
  -> INLINE (MANUAL): (3714,4) dem::records::ParticlePacked::getCentreOfMass(tarch::la::Vector<3, double> *, const dem::records::ParticlePacked *) const (isz = 19) (sz = 26)
    -> INLINE (MANUAL): ./dem/records/Particle.h:(14585,77) tarch::la::Vector<3, double>::Vector(tarch::la::Vector<3, double> *, const tarch::la::Vector<3, double> &) (isz = 17) (sz = 24)
      -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()
  -> INLINE (MANUAL): (3715,4) dem::records::ParticlePacked::getReferencialAngular(tarch::la::Vector<3, double> *, const dem::records::ParticlePacked *) const (isz = 19) (sz = 26)
    -> INLINE (MANUAL): ./dem/records/Particle.h:(14669,77) tarch::la::Vector<3, double>::Vector(tarch::la::Vector<3, double> *, const tarch::la::Vector<3, double> &) (isz = 17) (sz = 24)
      -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()
  -> INLINE (MANUAL): (3716,4) dem::records::ParticlePacked::getReferentialCentreOfMass(tarch::la::Vector<3, double> *, const dem::records::ParticlePacked *) const (isz = 19) (sz = 26)
    -> INLINE (MANUAL): ./dem/records/Particle.h:(14753,77) tarch::la::Vector<3, double>::Vector(tarch::la::Vector<3, double> *, const tarch::la::Vector<3, double> &) (isz = 17) (sz = 24)
      -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()
  -> INLINE (MANUAL): (3717,4) dem::records::ParticlePacked::getVelocity(tarch::la::Vector<3, double> *, const dem::records::ParticlePacked *) const (isz = 19) (sz = 26)
    -> INLINE (MANUAL): ./dem/records/Particle.h:(14837,77) tarch::la::Vector<3, double>::Vector(tarch::la::Vector<3, double> *, const tarch::la::Vector<3, double> &) (isz = 17) (sz = 24)
      -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()
  -> INLINE (MANUAL): (3718,4) dem::records::ParticlePacked::getAngular(tarch::la::Vector<3, double> *, const dem::records::ParticlePacked *) const (isz = 19) (sz = 26)
    -> INLINE (MANUAL): ./dem/records/Particle.h:(14921,77) tarch::la::Vector<3, double>::Vector(tarch::la::Vector<3, double> *, const tarch::la::Vector<3, double> &) (isz = 17) (sz = 24)
      -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()
  -> INLINE (MANUAL): (3719,4) dem::records::ParticlePacked::getDiameter(const dem::records::ParticlePacked *) const (isz = 0) (sz = 6)
  -> INLINE (MANUAL): (3720,4) dem::records::ParticlePacked::getInfluenceRadius(const dem::records::ParticlePacked *) const (isz = 0) (sz = 6)
  -> INLINE (MANUAL): (3721,4) dem::records::ParticlePacked::getEpsilon(const dem::records::ParticlePacked *) const (isz = 0) (sz = 6)
  -> INLINE (MANUAL): (3722,4) dem::records::ParticlePacked::getMass(const dem::records::ParticlePacked *) const (isz = 0) (sz = 6)
  -> INLINE (MANUAL): (3723,4) dem::records::ParticlePacked::getHMin(const dem::records::ParticlePacked *) const (isz = 0) (sz = 6)
  -> INLINE (MANUAL): (3724,4) dem::records::ParticlePacked::getGlobalParticleNumber(const dem::records::ParticlePacked *) const (isz = 0) (sz = 6)
  -> INLINE (MANUAL): (3725,4) dem::records::ParticlePacked::getNumberOfTriangles(const dem::records::ParticlePacked *) const (isz = 0) (sz = 6)
  -> INLINE: (3726,4) dem::records::Particle::Particle(dem::records::Particle *, const tarch::la::Vector<6, int> &, const tarch::la::Vector<9, double> &, const tarch::la::Vector<9, double> &, const tarch::la::Vector<9, double> &, const tarch::la::Vector<3, double> &, const tarch::la::Vector<3, double> &, const tarch::la::Vector<3, double> &, const tarch::la::Vector<3, double> &, const tarch::la::Vector<3, double> &, const tarch::la::Vector<3, double> &, const double &, const double &, const double &, const double &, const double &, const int &, const int &, const int &) (isz = 226) (sz = 267)
    -> INLINE: (3099,236) dem::records::Particle::PersistentRecords::PersistentRecords(dem::records::Particle::PersistentRecords *, const tarch::la::Vector<6, int> &, const tarch::la::Vector<9, double> &, const tarch::la::Vector<9, double> &, const tarch::la::Vector<9, double> &, const tarch::la::Vector<3, double> &, const tarch::la::Vector<3, double> &, const tarch::la::Vector<3, double> &, const tarch::la::Vector<3, double> &, const tarch::la::Vector<3, double> &, const tarch::la::Vector<3, double> &, const double &, const double &, const double &, const double &, const double &, const int &, const int &, const int &) (isz = 224) (sz = 265)
      -> INLINE (MANUAL): (3066,11) tarch::la::Vector<6, int>::Vector(tarch::la::Vector<6, int> *, const tarch::la::Vector<6, int> &) (isz = 17) (sz = 24)
        -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()
      -> INLINE (MANUAL): (3067,14) tarch::la::Vector<9, double>::Vector(tarch::la::Vector<9, double> *, const tarch::la::Vector<9, double> &) (isz = 17) (sz = 24)
        -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()
      -> INLINE (MANUAL): (3068,10) tarch::la::Vector<9, double>::Vector(tarch::la::Vector<9, double> *, const tarch::la::Vector<9, double> &) (isz = 17) (sz = 24)
        -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()
      -> INLINE (MANUAL): (3069,10) tarch::la::Vector<9, double>::Vector(tarch::la::Vector<9, double> *, const tarch::la::Vector<9, double> &) (isz = 17) (sz = 24)
        -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()
      -> INLINE (MANUAL): (3070,9) tarch::la::Vector<3, double>::Vector(tarch::la::Vector<3, double> *, const tarch::la::Vector<3, double> &) (isz = 17) (sz = 24)
        -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()
      -> INLINE (MANUAL): (3071,15) tarch::la::Vector<3, double>::Vector(tarch::la::Vector<3, double> *, const tarch::la::Vector<3, double> &) (isz = 17) (sz = 24)
        -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()
      -> INLINE (MANUAL): (3072,21) tarch::la::Vector<3, double>::Vector(tarch::la::Vector<3, double> *, const tarch::la::Vector<3, double> &) (isz = 17) (sz = 24)
        -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()
      -> INLINE (MANUAL): (3073,26) tarch::la::Vector<3, double>::Vector(tarch::la::Vector<3, double> *, const tarch::la::Vector<3, double> &) (isz = 17) (sz = 24)
        -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()
      -> INLINE (MANUAL): (3074,11) tarch::la::Vector<3, double>::Vector(tarch::la::Vector<3, double> *, const tarch::la::Vector<3, double> &) (isz = 17) (sz = 24)
        -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()
      -> INLINE (MANUAL): (3075,10) tarch::la::Vector<3, double>::Vector(tarch::la::Vector<3, double> *, const tarch::la::Vector<3, double> &) (isz = 17) (sz = 24)
        -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()
  -> INLINE (MANUAL): (3726,4) dem::records::ParticlePacked::getMaterial(const dem::records::ParticlePacked *) const (isz = 0) (sz = 6)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3709,4)
   remark #15388: vectorization support: reference U29_V._values[i] has aligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15389: vectorization support: reference toCopy->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.750
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.000 
   remark #15478: estimated potential speedup: 1.600 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3709,4)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 2  
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3710,4)
   remark #15388: vectorization support: reference U2a_V._values[i] has aligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15389: vectorization support: reference toCopy->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.188
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.000 
   remark #15478: estimated potential speedup: 1.560 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3710,4)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 1  
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3711,4)
   remark #15388: vectorization support: reference U2b_V._values[i] has aligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15389: vectorization support: reference toCopy->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.188
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.000 
   remark #15478: estimated potential speedup: 1.560 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3711,4)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 1  
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3712,4)
   remark #15388: vectorization support: reference U2c_V._values[i] has aligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15389: vectorization support: reference toCopy->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.188
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.000 
   remark #15478: estimated potential speedup: 1.560 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3712,4)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 1  
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3713,4)
   remark #15388: vectorization support: reference U2d_V._values[i] has aligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15389: vectorization support: reference toCopy->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.750
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.000 
   remark #15478: estimated potential speedup: 1.090 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3713,4)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 1  
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3714,4)
   remark #15388: vectorization support: reference U2e_V._values[i] has aligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15389: vectorization support: reference toCopy->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.750
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.000 
   remark #15478: estimated potential speedup: 1.090 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3714,4)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 1  
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3715,4)
   remark #15388: vectorization support: reference U2f_V._values[i] has aligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15389: vectorization support: reference toCopy->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.750
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.000 
   remark #15478: estimated potential speedup: 1.090 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3715,4)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 1  
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3716,4)
   remark #15388: vectorization support: reference U30_V._values[i] has aligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15389: vectorization support: reference toCopy->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.750
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.000 
   remark #15478: estimated potential speedup: 1.090 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3716,4)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 1  
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3717,4)
   remark #15388: vectorization support: reference U31_V._values[i] has aligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15389: vectorization support: reference toCopy->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.750
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.000 
   remark #15478: estimated potential speedup: 1.090 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3717,4)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 1  
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3718,4)
   remark #15388: vectorization support: reference U32_V._values[i] has aligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15389: vectorization support: reference toCopy->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.750
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.000 
   remark #15478: estimated potential speedup: 1.090 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3718,4)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 1  
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3726,4)
   remark #15389: vectorization support: reference this->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15388: vectorization support: reference U29_V._values[i] has aligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.600
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.250 
   remark #15478: estimated potential speedup: 1.490 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3726,4)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 2  
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3726,4)
   remark #15389: vectorization support: reference this->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15388: vectorization support: reference U2a_V._values[i] has aligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.150
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.330 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3726,4)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 1  
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3726,4)
   remark #15389: vectorization support: reference this->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15388: vectorization support: reference U2b_V._values[i] has aligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.150
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.330 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3726,4)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 1  
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3726,4)
   remark #15389: vectorization support: reference this->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15388: vectorization support: reference U2c_V._values[i] has aligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.150
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.330 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3726,4)
   remark #15389: vectorization support: reference this->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15388: vectorization support: reference U2d_V._values[i] has aligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.600
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.000 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3726,4)
   remark #15389: vectorization support: reference this->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15388: vectorization support: reference U2e_V._values[i] has aligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.600
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.000 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3726,4)
   remark #15389: vectorization support: reference this->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15388: vectorization support: reference U2f_V._values[i] has aligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.600
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.000 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3726,4)
   remark #15389: vectorization support: reference this->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15388: vectorization support: reference U30_V._values[i] has aligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.600
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.000 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3726,4)
   remark #15389: vectorization support: reference this->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15388: vectorization support: reference U31_V._values[i] has aligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.600
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.000 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3726,4)
   remark #15389: vectorization support: reference this->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15388: vectorization support: reference U32_V._values[i] has aligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.600
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.000 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3726,4)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 1  
LOOP END

    Report from: Code generation optimizations [cg]

./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (16, 0)
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (16, 0)
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (16, 0)
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (16, 0)
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (16, 0)
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (16, 0)
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (16, 0)
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (16, 0)
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (16, 0)
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (16, 0)
./tarch/la/Vector.cpph(63,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(63,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(63,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(63,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(63,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(63,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(63,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(63,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(63,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(63,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
dem/records/Particle.cpp(3707,69):remark #34051: REGISTER ALLOCATION : [_ZNK3dem7records14ParticlePacked7convertEv] dem/records/Particle.cpp:3707

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   15[ rax rdx rcx rsi rdi r8-r11 r15 zmm0-zmm4]
        
    Routine temporaries
        Total         :      85
            Global    :      17
            Local     :      68
        Regenerable   :       1
        Spilled       :       1
        
    Routine stack
        Variables     :     384 bytes*
            Reads     :      36 [3.60e+01 ~ 16.0%]
            Writes    :      59 [5.90e+01 ~ 26.2%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: dem::records::ParticlePacked::PersistentRecords::PersistentRecords(dem::records::ParticlePacked::PersistentRecords *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (dem::records::ParticlePacked::PersistentRecords::PersistentRecords(dem::records::ParticlePacked::PersistentRecords *)) [153/166=92.2%] dem/records/Particle.cpp(3568,70)
  -> INLINE (MANUAL): (3568,50) tarch::la::Vector<3, double>::Vector(tarch::la::Vector<3, double> *) (isz = 5) (sz = 10)
    -> EXTERN: ./tarch/la/Vector.cpph:(6,13) memset()
  -> INLINE (MANUAL): (3568,50) tarch::la::Vector<3, double>::Vector(tarch::la::Vector<3, double> *) (isz = 5) (sz = 10)
    -> EXTERN: ./tarch/la/Vector.cpph:(6,13) memset()
  -> INLINE (MANUAL): (3568,50) tarch::la::Vector<3, double>::Vector(tarch::la::Vector<3, double> *) (isz = 5) (sz = 10)
    -> EXTERN: ./tarch/la/Vector.cpph:(6,13) memset()
  -> INLINE (MANUAL): (3568,50) tarch::la::Vector<3, double>::Vector(tarch::la::Vector<3, double> *) (isz = 5) (sz = 10)
    -> EXTERN: ./tarch/la/Vector.cpph:(6,13) memset()
  -> INLINE (MANUAL): (3568,50) tarch::la::Vector<3, double>::Vector(tarch::la::Vector<3, double> *) (isz = 5) (sz = 10)
    -> EXTERN: ./tarch/la/Vector.cpph:(6,13) memset()
  -> INLINE (MANUAL): (3568,50) tarch::la::Vector<3, double>::Vector(tarch::la::Vector<3, double> *) (isz = 5) (sz = 10)
    -> EXTERN: ./tarch/la/Vector.cpph:(6,13) memset()
  -> INLINE (MANUAL): (3568,50) tarch::la::Vector<9, double>::Vector(tarch::la::Vector<9, double> *) (isz = 5) (sz = 10)
    -> EXTERN: ./tarch/la/Vector.cpph:(6,13) memset()
  -> INLINE (MANUAL): (3568,50) tarch::la::Vector<9, double>::Vector(tarch::la::Vector<9, double> *) (isz = 5) (sz = 10)
    -> EXTERN: ./tarch/la/Vector.cpph:(6,13) memset()
  -> INLINE (MANUAL): (3568,50) tarch::la::Vector<9, double>::Vector(tarch::la::Vector<9, double> *) (isz = 5) (sz = 10)
    -> EXTERN: ./tarch/la/Vector.cpph:(6,13) memset()
  -> INLINE (MANUAL): (3568,50) tarch::la::Vector<6, int>::Vector(tarch::la::Vector<6, int> *) (isz = 5) (sz = 10)
    -> EXTERN: ./tarch/la/Vector.cpph:(6,13) memset()


    Report from: Code generation optimizations [cg]

./tarch/la/Vector.cpph(6,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(6,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(6,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(6,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(6,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(6,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(6,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(6,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(6,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(6,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(6,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(6,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(6,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(6,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(6,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(6,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(6,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(6,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(6,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(6,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
dem/records/Particle.cpp(3568,70):remark #34051: REGISTER ALLOCATION : [_ZN3dem7records14ParticlePacked17PersistentRecordsC1Ev] dem/records/Particle.cpp:3568

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    2[ rdi zmm0]
        
    Routine temporaries
        Total         :       9
            Global    :       8
            Local     :       1
        Regenerable   :       1
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: dem::records::ParticlePacked::PersistentRecords::PersistentRecords(dem::records::ParticlePacked::PersistentRecords *const)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (dem::records::ParticlePacked::PersistentRecords::PersistentRecords(dem::records::ParticlePacked::PersistentRecords *const)) [154/166=92.8%] dem/records/Particle.cpp(3568,50)
  -> INLINE: (3568,50) dem::records::ParticlePacked::PersistentRecords::PersistentRecords(dem::records::ParticlePacked::PersistentRecords *) (isz = 88) (sz = 93)
    -> INLINE (MANUAL): (3568,50) tarch::la::Vector<6, int>::Vector(tarch::la::Vector<6, int> *) (isz = 5) (sz = 10)
      -> EXTERN: ./tarch/la/Vector.cpph:(6,13) memset()
    -> INLINE (MANUAL): (3568,50) tarch::la::Vector<9, double>::Vector(tarch::la::Vector<9, double> *) (isz = 5) (sz = 10)
      -> EXTERN: ./tarch/la/Vector.cpph:(6,13) memset()
    -> INLINE (MANUAL): (3568,50) tarch::la::Vector<9, double>::Vector(tarch::la::Vector<9, double> *) (isz = 5) (sz = 10)
      -> EXTERN: ./tarch/la/Vector.cpph:(6,13) memset()
    -> INLINE (MANUAL): (3568,50) tarch::la::Vector<9, double>::Vector(tarch::la::Vector<9, double> *) (isz = 5) (sz = 10)
      -> EXTERN: ./tarch/la/Vector.cpph:(6,13) memset()
    -> INLINE (MANUAL): (3568,50) tarch::la::Vector<3, double>::Vector(tarch::la::Vector<3, double> *) (isz = 5) (sz = 10)
      -> EXTERN: ./tarch/la/Vector.cpph:(6,13) memset()
    -> INLINE (MANUAL): (3568,50) tarch::la::Vector<3, double>::Vector(tarch::la::Vector<3, double> *) (isz = 5) (sz = 10)
      -> EXTERN: ./tarch/la/Vector.cpph:(6,13) memset()
    -> INLINE (MANUAL): (3568,50) tarch::la::Vector<3, double>::Vector(tarch::la::Vector<3, double> *) (isz = 5) (sz = 10)
      -> EXTERN: ./tarch/la/Vector.cpph:(6,13) memset()
    -> INLINE (MANUAL): (3568,50) tarch::la::Vector<3, double>::Vector(tarch::la::Vector<3, double> *) (isz = 5) (sz = 10)
      -> EXTERN: ./tarch/la/Vector.cpph:(6,13) memset()
    -> INLINE (MANUAL): (3568,50) tarch::la::Vector<3, double>::Vector(tarch::la::Vector<3, double> *) (isz = 5) (sz = 10)
      -> EXTERN: ./tarch/la/Vector.cpph:(6,13) memset()
    -> INLINE (MANUAL): (3568,50) tarch::la::Vector<3, double>::Vector(tarch::la::Vector<3, double> *) (isz = 5) (sz = 10)
      -> EXTERN: ./tarch/la/Vector.cpph:(6,13) memset()


    Report from: Code generation optimizations [cg]

./tarch/la/Vector.cpph(6,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(6,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(6,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(6,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(6,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(6,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(6,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(6,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(6,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(6,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(6,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(6,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(6,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(6,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(6,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(6,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(6,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(6,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(6,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(6,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
dem/records/Particle.cpp(3568,50):remark #34051: REGISTER ALLOCATION : [_ZN3dem7records14ParticlePacked17PersistentRecordsC2Ev] dem/records/Particle.cpp:3568

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    2[ rdi zmm0]
        
    Routine temporaries
        Total         :       9
            Global    :       8
            Local     :       1
        Regenerable   :       1
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: dem::records::ParticlePacked::PersistentRecords::PersistentRecords(dem::records::ParticlePacked::PersistentRecords *, const tarch::la::Vector<6, int> &, const tarch::la::Vector<9, double> &, const tarch::la::Vector<9, double> &, const tarch::la::Vector<9, double> &, const tarch::la::Vector<3, double> &, const tarch::la::Vector<3, double> &, const tarch::la::Vector<3, double> &, const tarch::la::Vector<3, double> &, const tarch::la::Vector<3, double> &, const tarch::la::Vector<3, double> &, const double &, const double &, const double &, const double &, const double &, const int &, const int &, const int &)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (dem::records::ParticlePacked::PersistentRecords::PersistentRecords(dem::records::ParticlePacked::PersistentRecords *, const tarch::la::Vector<6, int> &, const tarch::la::Vector<9, double> &, const tarch::la::Vector<9, double> &, const tarch::la::Vector<9, double> &, const tarch::la::Vector<3, double> &, const tarch::la::Vector<3, double> &, const tarch::la::Vector<3, double> &, const tarch::la::Vector<3, double> &, const tarch::la::Vector<3, double> &, const tarch::la::Vector<3, double> &, const double &, const double &, const double &, const double &, const double &, const int &, const int &, const int &)) [155/166=93.4%] dem/records/Particle.cpp(3591,21)
  -> INLINE (MANUAL): (3574,11) tarch::la::Vector<6, int>::Vector(tarch::la::Vector<6, int> *, const tarch::la::Vector<6, int> &) (isz = 17) (sz = 24)
    -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()
  -> INLINE (MANUAL): (3575,14) tarch::la::Vector<9, double>::Vector(tarch::la::Vector<9, double> *, const tarch::la::Vector<9, double> &) (isz = 17) (sz = 24)
    -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()
  -> INLINE (MANUAL): (3576,10) tarch::la::Vector<9, double>::Vector(tarch::la::Vector<9, double> *, const tarch::la::Vector<9, double> &) (isz = 17) (sz = 24)
    -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()
  -> INLINE (MANUAL): (3577,10) tarch::la::Vector<9, double>::Vector(tarch::la::Vector<9, double> *, const tarch::la::Vector<9, double> &) (isz = 17) (sz = 24)
    -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()
  -> INLINE (MANUAL): (3578,9) tarch::la::Vector<3, double>::Vector(tarch::la::Vector<3, double> *, const tarch::la::Vector<3, double> &) (isz = 17) (sz = 24)
    -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()
  -> INLINE (MANUAL): (3579,15) tarch::la::Vector<3, double>::Vector(tarch::la::Vector<3, double> *, const tarch::la::Vector<3, double> &) (isz = 17) (sz = 24)
    -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()
  -> INLINE (MANUAL): (3580,21) tarch::la::Vector<3, double>::Vector(tarch::la::Vector<3, double> *, const tarch::la::Vector<3, double> &) (isz = 17) (sz = 24)
    -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()
  -> INLINE (MANUAL): (3581,26) tarch::la::Vector<3, double>::Vector(tarch::la::Vector<3, double> *, const tarch::la::Vector<3, double> &) (isz = 17) (sz = 24)
    -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()
  -> INLINE (MANUAL): (3582,11) tarch::la::Vector<3, double>::Vector(tarch::la::Vector<3, double> *, const tarch::la::Vector<3, double> &) (isz = 17) (sz = 24)
    -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()
  -> INLINE (MANUAL): (3583,10) tarch::la::Vector<3, double>::Vector(tarch::la::Vector<3, double> *, const tarch::la::Vector<3, double> &) (isz = 17) (sz = 24)
    -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3574,11)
   remark #15389: vectorization support: reference this->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15389: vectorization support: reference vertices->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 1.000
   remark #15300: LOOP WAS VECTORIZED
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.200 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3574,11)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 2  
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3575,14)
<Peeled loop for vectorization>
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3575,14)
   remark #15388: vectorization support: reference this->_values[i] has aligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15389: vectorization support: reference orientation->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 3.333
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.200 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=4
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3575,14)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3576,10)
<Peeled loop for vectorization>
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3576,10)
   remark #15388: vectorization support: reference this->_values[i] has aligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15389: vectorization support: reference inertia->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 3.333
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.200 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=4
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3576,10)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3577,10)
<Peeled loop for vectorization>
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3577,10)
   remark #15388: vectorization support: reference this->_values[i] has aligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15389: vectorization support: reference inverse->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 3.333
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.200 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=4
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3577,10)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3578,9)
   remark #15389: vectorization support: reference this->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15389: vectorization support: reference centre->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 1.000
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.750 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3579,15)
   remark #15389: vectorization support: reference this->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15389: vectorization support: reference centreOfMass->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 1.000
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.750 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3580,21)
   remark #15389: vectorization support: reference this->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15389: vectorization support: reference referencialAngular->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 1.000
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.750 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3581,26)
   remark #15389: vectorization support: reference this->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15389: vectorization support: reference referentialCentreOfMass->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 1.000
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.750 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3582,11)
   remark #15389: vectorization support: reference this->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15389: vectorization support: reference velocity->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 1.000
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.750 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3583,10)
   remark #15389: vectorization support: reference this->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15389: vectorization support: reference angular->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 1.000
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.750 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

    Report from: Code generation optimizations [cg]

./tarch/la/Vector.cpph(63,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(63,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(63,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(63,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(63,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(63,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(63,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(63,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(63,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(63,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
dem/records/Particle.cpp(3591,21):remark #34051: REGISTER ALLOCATION : [_ZN3dem7records14ParticlePacked17PersistentRecordsC1ERKN5tarch2la6VectorILi6EiEERKNS5_ILi9EdEESB_SB_RKNS5_ILi3EdEESE_SE_SE_SE_SE_RKdSG_SG_SG_SG_RKiSI_SI_] dem/records/Particle.cpp:3591

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   11[ rax rdx rcx rsi rdi r8-r11 zmm0-zmm1]
        
    Routine temporaries
        Total         :     103
            Global    :      25
            Local     :      78
        Regenerable   :       1
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: dem::records::ParticlePacked::PersistentRecords::PersistentRecords(dem::records::ParticlePacked::PersistentRecords *const, const tarch::la::Vector<6, int> &, const tarch::la::Vector<9, double> &, const tarch::la::Vector<9, double> &, const tarch::la::Vector<9, double> &, const tarch::la::Vector<3, double> &, const tarch::la::Vector<3, double> &, const tarch::la::Vector<3, double> &, const tarch::la::Vector<3, double> &, const tarch::la::Vector<3, double> &, const tarch::la::Vector<3, double> &, const double &, const double &, const double &, const double &, const double &, const int &, const int &, const int &)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (dem::records::ParticlePacked::PersistentRecords::PersistentRecords(dem::records::ParticlePacked::PersistentRecords *const, const tarch::la::Vector<6, int> &, const tarch::la::Vector<9, double> &, const tarch::la::Vector<9, double> &, const tarch::la::Vector<9, double> &, const tarch::la::Vector<3, double> &, const tarch::la::Vector<3, double> &, const tarch::la::Vector<3, double> &, const tarch::la::Vector<3, double> &, const tarch::la::Vector<3, double> &, const tarch::la::Vector<3, double> &, const double &, const double &, const double &, const double &, const double &, const int &, const int &, const int &)) [156/166=94.0%] dem/records/Particle.cpp(3573,50)
  -> INLINE: (3573,50) dem::records::ParticlePacked::PersistentRecords::PersistentRecords(dem::records::ParticlePacked::PersistentRecords *, const tarch::la::Vector<6, int> &, const tarch::la::Vector<9, double> &, const tarch::la::Vector<9, double> &, const tarch::la::Vector<9, double> &, const tarch::la::Vector<3, double> &, const tarch::la::Vector<3, double> &, const tarch::la::Vector<3, double> &, const tarch::la::Vector<3, double> &, const tarch::la::Vector<3, double> &, const tarch::la::Vector<3, double> &, const double &, const double &, const double &, const double &, const double &, const int &, const int &, const int &) (isz = 224) (sz = 265)
    -> INLINE (MANUAL): (3574,11) tarch::la::Vector<6, int>::Vector(tarch::la::Vector<6, int> *, const tarch::la::Vector<6, int> &) (isz = 17) (sz = 24)
      -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()
    -> INLINE (MANUAL): (3575,14) tarch::la::Vector<9, double>::Vector(tarch::la::Vector<9, double> *, const tarch::la::Vector<9, double> &) (isz = 17) (sz = 24)
      -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()
    -> INLINE (MANUAL): (3576,10) tarch::la::Vector<9, double>::Vector(tarch::la::Vector<9, double> *, const tarch::la::Vector<9, double> &) (isz = 17) (sz = 24)
      -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()
    -> INLINE (MANUAL): (3577,10) tarch::la::Vector<9, double>::Vector(tarch::la::Vector<9, double> *, const tarch::la::Vector<9, double> &) (isz = 17) (sz = 24)
      -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()
    -> INLINE (MANUAL): (3578,9) tarch::la::Vector<3, double>::Vector(tarch::la::Vector<3, double> *, const tarch::la::Vector<3, double> &) (isz = 17) (sz = 24)
      -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()
    -> INLINE (MANUAL): (3579,15) tarch::la::Vector<3, double>::Vector(tarch::la::Vector<3, double> *, const tarch::la::Vector<3, double> &) (isz = 17) (sz = 24)
      -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()
    -> INLINE (MANUAL): (3580,21) tarch::la::Vector<3, double>::Vector(tarch::la::Vector<3, double> *, const tarch::la::Vector<3, double> &) (isz = 17) (sz = 24)
      -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()
    -> INLINE (MANUAL): (3581,26) tarch::la::Vector<3, double>::Vector(tarch::la::Vector<3, double> *, const tarch::la::Vector<3, double> &) (isz = 17) (sz = 24)
      -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()
    -> INLINE (MANUAL): (3582,11) tarch::la::Vector<3, double>::Vector(tarch::la::Vector<3, double> *, const tarch::la::Vector<3, double> &) (isz = 17) (sz = 24)
      -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()
    -> INLINE (MANUAL): (3583,10) tarch::la::Vector<3, double>::Vector(tarch::la::Vector<3, double> *, const tarch::la::Vector<3, double> &) (isz = 17) (sz = 24)
      -> EXTERN: ./tarch/la/Vector.cpph:(63,13) memset()


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3573,50)
   remark #15389: vectorization support: reference this->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15389: vectorization support: reference __p2->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 1.000
   remark #15300: LOOP WAS VECTORIZED
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.200 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3573,50)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 2  
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3573,50)
<Peeled loop for vectorization>
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3573,50)
   remark #15388: vectorization support: reference this->_values[i] has aligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15389: vectorization support: reference __p3->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 3.333
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.200 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=4
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3573,50)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3573,50)
<Peeled loop for vectorization>
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3573,50)
   remark #15388: vectorization support: reference this->_values[i] has aligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15389: vectorization support: reference __p4->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 3.333
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.200 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=4
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3573,50)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3573,50)
<Peeled loop for vectorization>
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3573,50)
   remark #15388: vectorization support: reference this->_values[i] has aligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15389: vectorization support: reference __p5->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 3.333
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.200 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=4
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3573,50)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3573,50)
   remark #15389: vectorization support: reference this->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15389: vectorization support: reference __p6->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 1.000
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.750 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3573,50)
   remark #15389: vectorization support: reference this->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15389: vectorization support: reference __p7->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 1.000
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.750 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3573,50)
   remark #15389: vectorization support: reference this->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15389: vectorization support: reference __p8->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 1.000
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.750 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3573,50)
   remark #15389: vectorization support: reference this->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15389: vectorization support: reference __p9->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 1.000
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.750 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3573,50)
   remark #15389: vectorization support: reference this->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15389: vectorization support: reference __p10->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 1.000
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.750 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at ./tarch/la/Vector.cpph(68,3) inlined into dem/records/Particle.cpp(3573,50)
   remark #15389: vectorization support: reference this->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,5) ]
   remark #15389: vectorization support: reference __p11->_values[i] has unaligned access   [ ./tarch/la/Vector.cpph(69,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 1.000
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.750 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

    Report from: Code generation optimizations [cg]

./tarch/la/Vector.cpph(63,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(63,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(63,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(63,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(63,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(63,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(63,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(63,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(63,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
./tarch/la/Vector.cpph(63,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
./tarch/la/Vector.cpph(63,13):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
dem/records/Particle.cpp(3573,50):remark #34051: REGISTER ALLOCATION : [_ZN3dem7records14ParticlePacked17PersistentRecordsC2ERKN5tarch2la6VectorILi6EiEERKNS5_ILi9EdEESB_SB_RKNS5_ILi3EdEESE_SE_SE_SE_SE_RKdSG_SG_SG_SG_RKiSI_SI_] dem/records/Particle.cpp:3573

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   11[ rax rdx rcx rsi rdi r8-r11 zmm0-zmm1]
        
    Routine temporaries
        Total         :     103
            Global    :      25
            Local     :      78
        Regenerable   :       1
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: dem::records::ParticlePacked::PersistentRecords::PersistentRecords(dem::records::ParticlePacked::PersistentRecords *, const dem::records::ParticlePacked::PersistentRecords &)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (dem::records::ParticlePacked::PersistentRecords::PersistentRecords(dem::records::ParticlePacked::PersistentRecords *, const dem::records::ParticlePacked::PersistentRecords &)) ./dem/records/Particle.h(13344,74)

===========================================================================

Begin optimization report for: std::operator|(std::_Ios_Openmode, std::_Ios_Openmode)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (std::operator|(std::_Ios_Openmode, std::_Ios_Openmode)) /usr/include/c++/6/bits/ios_base.h(130,3)

===========================================================================

Begin optimization report for: std::operator|(std::_Ios_Iostate, std::_Ios_Iostate)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (std::operator|(std::_Ios_Iostate, std::_Ios_Iostate)) /usr/include/c++/6/bits/ios_base.h(170,3)

===========================================================================

Begin optimization report for: std::distance<char *>(char *, char *)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (std::distance<char *>(char *, char *)) /usr/include/c++/6/bits/stl_iterator_base_funcs.h(136,5)

===========================================================================

Begin optimization report for: std::__iterator_category<char *>(char *const &)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (std::__iterator_category<char *>(char *const &)) /usr/include/c++/6/bits/stl_iterator_base_types.h(205,5)

===========================================================================

Begin optimization report for: std::__distance<char *>(char *, char *, std::random_access_iterator_tag)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (std::__distance<char *>(char *, char *, std::random_access_iterator_tag)) /usr/include/c++/6/bits/stl_iterator_base_funcs.h(98,5)

===========================================================================

Begin optimization report for: __gnu_cxx::__exchange_and_add(volatile _Atomic_word *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (__gnu_cxx::__exchange_and_add(volatile _Atomic_word *, int)) /usr/include/c++/6/ext/atomicity.h(49,3)

===========================================================================

Begin optimization report for: __gnu_cxx::__exchange_and_add_single(_Atomic_word *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (__gnu_cxx::__exchange_and_add_single(_Atomic_word *, int)) /usr/include/c++/6/ext/atomicity.h(66,3)

===========================================================================

Begin optimization report for: __gnu_cxx::__is_null_pointer<char>(char *)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (__gnu_cxx::__is_null_pointer<char>(char *)) /usr/include/c++/6/ext/type_traits.h(153,5)

===========================================================================

Begin optimization report for: __sti__$E()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (__sti__$E()) [166/166=100.0%] <compiler generated>
  -> EXTERN: /usr/include/c++/6/iostream:(74,25) __cxa_atexit()
  -> EXTERN: /usr/include/c++/6/iostream:(74,25) std::ios_base::Init::Init(std::ios_base::Init *)


    Report from: Code generation optimizations [cg]

<compiler generated>:remark #34051: REGISTER ALLOCATION : [__sti__$E] (null):0

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    3[ rdx rsi rdi]
        
    Routine temporaries
        Total         :      13
            Global    :       7
            Local     :       6
        Regenerable   :       7
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

    Report from: Interprocedural optimizations [ipo]

INLINING FOOTNOTES:

<1> The compiler's heuristics indicate that the function is not profitable to 
    inline.  Override this decision by adding "inline 
    __attribute__((always_inline))" to the declaration of the called function, 
    or add "#pragma forceinline" before the call site.

<2> The routine declaration is annotated with "__attribute__((noinline))".  
    Remove this annotation to permit the compiler to inline this routine.

