#ifndef _PEANO_GRID_TESTS_RECORDS_TESTCELL_H
#define _PEANO_GRID_TESTS_RECORDS_TESTCELL_H

#include "tarch/multicore/MulticoreDefinitions.h"
#include "peano/utils/Globals.h"
#include "tarch/compiler/CompilerSpecificSettings.h"
#include "peano/utils/PeanoOptimisations.h"
#ifdef Parallel
	#include "tarch/parallel/Node.h"
#endif
#ifdef Parallel
	#include <mpi.h>
#endif
#include "tarch/logging/Log.h"
#include "tarch/la/Vector.h"
#include <bitset>
#include <complex>
#include <string>
#include <iostream>

namespace peano {
   namespace grid {
      namespace tests {
         namespace records {
            class TestCell;
            class TestCellPacked;
         }
      }
   }
}

#if !defined(Debug) && !defined(Parallel) && defined(SharedMemoryParallelisation)
   /**
    * @author This class is generated by DaStGen
    * 		   DataStructureGenerator (DaStGen)
    * 		   2007-2009 Wolfgang Eckhardt
    * 		   2012      Tobias Weinzierl
    *
    * 		   build date: 09-02-2014 14:40
    *
    * @date   19/02/2016 12:36
    */
   class peano::grid::tests::records::TestCell { 
      
      public:
         
         typedef peano::grid::tests::records::TestCellPacked Packed;
         
         enum State {
            Leaf = 0, Refined = 1, Root = 2
         };
         
         struct PersistentRecords {
            bool _isInside;
            State _state;
            std::bitset<DIMENSIONS> _evenFlags;
            tarch::la::Vector<DIMENSIONS_TIMES_TWO,short int> _accessNumber;
            int _numberOfLoadsFromInputStream;
            int _numberOfStoresToOutputStream;
            /**
             * Generated
             */
            PersistentRecords();
            
            /**
             * Generated
             */
            PersistentRecords(const bool& isInside, const State& state, const std::bitset<DIMENSIONS>& evenFlags, const tarch::la::Vector<DIMENSIONS_TIMES_TWO,short int>& accessNumber, const int& numberOfLoadsFromInputStream, const int& numberOfStoresToOutputStream);
            
            /**
             * Generated
             */
             bool getIsInside() const ;
            
            /**
             * Generated
             */
             void setIsInside(const bool& isInside) ;
            
            /**
             * Generated
             */
             State getState() const ;
            
            /**
             * Generated
             */
             void setState(const State& state) ;
            
             std::bitset<DIMENSIONS> getEvenFlags() const ;
            
             void setEvenFlags(const std::bitset<DIMENSIONS>& evenFlags) ;
            
             tarch::la::Vector<DIMENSIONS_TIMES_TWO,short int> getAccessNumber() const ;
            
             void setAccessNumber(const tarch::la::Vector<DIMENSIONS_TIMES_TWO,short int>& accessNumber) ;
            
            /**
             * Generated
             */
             int getNumberOfLoadsFromInputStream() const ;
            
            /**
             * Generated
             */
             void setNumberOfLoadsFromInputStream(const int& numberOfLoadsFromInputStream) ;
            
            /**
             * Generated
             */
             int getNumberOfStoresToOutputStream() const ;
            
            /**
             * Generated
             */
             void setNumberOfStoresToOutputStream(const int& numberOfStoresToOutputStream) ;
            
            
         };
         
      private: 
         PersistentRecords _persistentRecords;
         
      public:
         /**
          * Generated
          */
         TestCell();
         
         /**
          * Generated
          */
         TestCell(const PersistentRecords& persistentRecords);
         
         /**
          * Generated
          */
         TestCell(const bool& isInside, const State& state, const std::bitset<DIMENSIONS>& evenFlags, const tarch::la::Vector<DIMENSIONS_TIMES_TWO,short int>& accessNumber, const int& numberOfLoadsFromInputStream, const int& numberOfStoresToOutputStream);
         
         /**
          * Generated
          */
         virtual ~TestCell();
         
         /**
          * Generated
          */
          bool getIsInside() const ;
         
         /**
          * Generated
          */
          void setIsInside(const bool& isInside) ;
         
         /**
          * Generated
          */
          State getState() const ;
         
         /**
          * Generated
          */
          void setState(const State& state) ;
         
          std::bitset<DIMENSIONS> getEvenFlags() const ;
         
          void setEvenFlags(const std::bitset<DIMENSIONS>& evenFlags) ;
         
          bool getEvenFlags(int elementIndex) const ;
         
          void setEvenFlags(int elementIndex, const bool& evenFlags) ;
         
          void flipEvenFlags(int elementIndex) ;
         
          tarch::la::Vector<DIMENSIONS_TIMES_TWO,short int> getAccessNumber() const ;
         
          void setAccessNumber(const tarch::la::Vector<DIMENSIONS_TIMES_TWO,short int>& accessNumber) ;
         
          short int getAccessNumber(int elementIndex) const ;
         
          void setAccessNumber(int elementIndex, const short int& accessNumber) ;
         
         /**
          * Generated
          */
          int getNumberOfLoadsFromInputStream() const ;
         
         /**
          * Generated
          */
          void setNumberOfLoadsFromInputStream(const int& numberOfLoadsFromInputStream) ;
         
         /**
          * Generated
          */
          int getNumberOfStoresToOutputStream() const ;
         
         /**
          * Generated
          */
          void setNumberOfStoresToOutputStream(const int& numberOfStoresToOutputStream) ;
         
         /**
          * Generated
          */
         static std::string toString(const State& param);
         
         /**
          * Generated
          */
         static std::string getStateMapping();
         
         /**
          * Generated
          */
         std::string toString() const;
         
         /**
          * Generated
          */
         void toString(std::ostream& out) const;
         
         
         PersistentRecords getPersistentRecords() const;
         /**
          * Generated
          */
         TestCellPacked convert() const;
         
         
      #ifdef Parallel
         protected:
            static tarch::logging::Log _log;
            
            int _senderDestinationRank;
            
         public:
            
            /**
             * Global that represents the mpi datatype.
             * There are two variants: Datatype identifies only those attributes marked with
             * parallelise. FullDatatype instead identifies the whole record with all fields.
             */
            static MPI_Datatype Datatype;
            static MPI_Datatype FullDatatype;
            
            /**
             * Initializes the data type for the mpi operations. Has to be called
             * before the very first send or receive operation is called.
             */
            static void initDatatype();
            
            static void shutdownDatatype();
            
            /**
             * @param communicateSleep -1 Data exchange through blocking mpi
             * @param communicateSleep  0 Data exchange through non-blocking mpi, i.e. pending messages are received via polling until MPI_Test succeeds
             * @param communicateSleep >0 Same as 0 but in addition, each unsuccessful MPI_Test is follows by an usleep
             */
            void send(int destination, int tag, bool exchangeOnlyAttributesMarkedWithParallelise, int communicateSleep);
            
            void receive(int source, int tag, bool exchangeOnlyAttributesMarkedWithParallelise, int communicateSleep);
            
            static bool isMessageInQueue(int tag, bool exchangeOnlyAttributesMarkedWithParallelise);
            
            int getSenderRank() const;
            
      #endif
         
      };
      
      /**
       * @author This class is generated by DaStGen
       * 		   DataStructureGenerator (DaStGen)
       * 		   2007-2009 Wolfgang Eckhardt
       * 		   2012      Tobias Weinzierl
       *
       * 		   build date: 09-02-2014 14:40
       *
       * @date   19/02/2016 12:36
       */
      class peano::grid::tests::records::TestCellPacked { 
         
         public:
            
            typedef peano::grid::tests::records::TestCell::State State;
            
            struct PersistentRecords {
               tarch::la::Vector<DIMENSIONS_TIMES_TWO,short int> _accessNumber;
               int _numberOfLoadsFromInputStream;
               int _numberOfStoresToOutputStream;
               
               /** mapping of records:
               || Member 	|| startbit 	|| length
                |  isInside	| startbit 0	| #bits 1
                |  state	| startbit 1	| #bits 2
                |  evenFlags	| startbit 3	| #bits DIMENSIONS
                */
               int _packedRecords0;
               
               /**
                * Generated
                */
               PersistentRecords();
               
               /**
                * Generated
                */
               PersistentRecords(const bool& isInside, const State& state, const std::bitset<DIMENSIONS>& evenFlags, const tarch::la::Vector<DIMENSIONS_TIMES_TWO,short int>& accessNumber, const int& numberOfLoadsFromInputStream, const int& numberOfStoresToOutputStream);
               
               /**
                * Generated
                */
                bool getIsInside() const ;
               
               /**
                * Generated
                */
                void setIsInside(const bool& isInside) ;
               
               /**
                * Generated
                */
                State getState() const ;
               
               /**
                * Generated
                */
                void setState(const State& state) ;
               
                std::bitset<DIMENSIONS> getEvenFlags() const ;
               
                void setEvenFlags(const std::bitset<DIMENSIONS>& evenFlags) ;
               
                tarch::la::Vector<DIMENSIONS_TIMES_TWO,short int> getAccessNumber() const ;
               
                void setAccessNumber(const tarch::la::Vector<DIMENSIONS_TIMES_TWO,short int>& accessNumber) ;
               
               /**
                * Generated
                */
                int getNumberOfLoadsFromInputStream() const ;
               
               /**
                * Generated
                */
                void setNumberOfLoadsFromInputStream(const int& numberOfLoadsFromInputStream) ;
               
               /**
                * Generated
                */
                int getNumberOfStoresToOutputStream() const ;
               
               /**
                * Generated
                */
                void setNumberOfStoresToOutputStream(const int& numberOfStoresToOutputStream) ;
               
               
            };
            
         private: 
            PersistentRecords _persistentRecords;
            
         public:
            /**
             * Generated
             */
            TestCellPacked();
            
            /**
             * Generated
             */
            TestCellPacked(const PersistentRecords& persistentRecords);
            
            /**
             * Generated
             */
            TestCellPacked(const bool& isInside, const State& state, const std::bitset<DIMENSIONS>& evenFlags, const tarch::la::Vector<DIMENSIONS_TIMES_TWO,short int>& accessNumber, const int& numberOfLoadsFromInputStream, const int& numberOfStoresToOutputStream);
            
            /**
             * Generated
             */
            virtual ~TestCellPacked();
            
            /**
             * Generated
             */
             bool getIsInside() const ;
            
            /**
             * Generated
             */
             void setIsInside(const bool& isInside) ;
            
            /**
             * Generated
             */
             State getState() const ;
            
            /**
             * Generated
             */
             void setState(const State& state) ;
            
             std::bitset<DIMENSIONS> getEvenFlags() const ;
            
             void setEvenFlags(const std::bitset<DIMENSIONS>& evenFlags) ;
            
             bool getEvenFlags(int elementIndex) const ;
            
             void setEvenFlags(int elementIndex, const bool& evenFlags) ;
            
             void flipEvenFlags(int elementIndex) ;
            
             tarch::la::Vector<DIMENSIONS_TIMES_TWO,short int> getAccessNumber() const ;
            
             void setAccessNumber(const tarch::la::Vector<DIMENSIONS_TIMES_TWO,short int>& accessNumber) ;
            
             short int getAccessNumber(int elementIndex) const ;
            
             void setAccessNumber(int elementIndex, const short int& accessNumber) ;
            
            /**
             * Generated
             */
             int getNumberOfLoadsFromInputStream() const ;
            
            /**
             * Generated
             */
             void setNumberOfLoadsFromInputStream(const int& numberOfLoadsFromInputStream) ;
            
            /**
             * Generated
             */
             int getNumberOfStoresToOutputStream() const ;
            
            /**
             * Generated
             */
             void setNumberOfStoresToOutputStream(const int& numberOfStoresToOutputStream) ;
            
            /**
             * Generated
             */
            static std::string toString(const State& param);
            
            /**
             * Generated
             */
            static std::string getStateMapping();
            
            /**
             * Generated
             */
            std::string toString() const;
            
            /**
             * Generated
             */
            void toString(std::ostream& out) const;
            
            
            PersistentRecords getPersistentRecords() const;
            /**
             * Generated
             */
            TestCell convert() const;
            
            
         #ifdef Parallel
            protected:
               static tarch::logging::Log _log;
               
               int _senderDestinationRank;
               
            public:
               
               /**
                * Global that represents the mpi datatype.
                * There are two variants: Datatype identifies only those attributes marked with
                * parallelise. FullDatatype instead identifies the whole record with all fields.
                */
               static MPI_Datatype Datatype;
               static MPI_Datatype FullDatatype;
               
               /**
                * Initializes the data type for the mpi operations. Has to be called
                * before the very first send or receive operation is called.
                */
               static void initDatatype();
               
               static void shutdownDatatype();
               
               /**
                * @param communicateSleep -1 Data exchange through blocking mpi
                * @param communicateSleep  0 Data exchange through non-blocking mpi, i.e. pending messages are received via polling until MPI_Test succeeds
                * @param communicateSleep >0 Same as 0 but in addition, each unsuccessful MPI_Test is follows by an usleep
                */
               void send(int destination, int tag, bool exchangeOnlyAttributesMarkedWithParallelise, int communicateSleep);
               
               void receive(int source, int tag, bool exchangeOnlyAttributesMarkedWithParallelise, int communicateSleep);
               
               static bool isMessageInQueue(int tag, bool exchangeOnlyAttributesMarkedWithParallelise);
               
               int getSenderRank() const;
               
         #endif
            
         };
         
         
      #elif !defined(Parallel) && defined(Debug) && !defined(SharedMemoryParallelisation)
         /**
          * @author This class is generated by DaStGen
          * 		   DataStructureGenerator (DaStGen)
          * 		   2007-2009 Wolfgang Eckhardt
          * 		   2012      Tobias Weinzierl
          *
          * 		   build date: 09-02-2014 14:40
          *
          * @date   19/02/2016 12:36
          */
         class peano::grid::tests::records::TestCell { 
            
            public:
               
               typedef peano::grid::tests::records::TestCellPacked Packed;
               
               enum State {
                  Leaf = 0, Refined = 1, Root = 2
               };
               
               struct PersistentRecords {
                  bool _isInside;
                  State _state;
                  int _level;
                  std::bitset<DIMENSIONS> _evenFlags;
                  tarch::la::Vector<DIMENSIONS_TIMES_TWO,short int> _accessNumber;
                  /**
                   * Generated
                   */
                  PersistentRecords();
                  
                  /**
                   * Generated
                   */
                  PersistentRecords(const bool& isInside, const State& state, const int& level, const std::bitset<DIMENSIONS>& evenFlags, const tarch::la::Vector<DIMENSIONS_TIMES_TWO,short int>& accessNumber);
                  
                  /**
                   * Generated
                   */
                   bool getIsInside() const ;
                  
                  /**
                   * Generated
                   */
                   void setIsInside(const bool& isInside) ;
                  
                  /**
                   * Generated
                   */
                   State getState() const ;
                  
                  /**
                   * Generated
                   */
                   void setState(const State& state) ;
                  
                  /**
                   * Generated
                   */
                   int getLevel() const ;
                  
                  /**
                   * Generated
                   */
                   void setLevel(const int& level) ;
                  
                   std::bitset<DIMENSIONS> getEvenFlags() const ;
                  
                   void setEvenFlags(const std::bitset<DIMENSIONS>& evenFlags) ;
                  
                   tarch::la::Vector<DIMENSIONS_TIMES_TWO,short int> getAccessNumber() const ;
                  
                   void setAccessNumber(const tarch::la::Vector<DIMENSIONS_TIMES_TWO,short int>& accessNumber) ;
                  
                  
               };
               
            private: 
               PersistentRecords _persistentRecords;
               
            public:
               /**
                * Generated
                */
               TestCell();
               
               /**
                * Generated
                */
               TestCell(const PersistentRecords& persistentRecords);
               
               /**
                * Generated
                */
               TestCell(const bool& isInside, const State& state, const int& level, const std::bitset<DIMENSIONS>& evenFlags, const tarch::la::Vector<DIMENSIONS_TIMES_TWO,short int>& accessNumber);
               
               /**
                * Generated
                */
               virtual ~TestCell();
               
               /**
                * Generated
                */
                bool getIsInside() const ;
               
               /**
                * Generated
                */
                void setIsInside(const bool& isInside) ;
               
               /**
                * Generated
                */
                State getState() const ;
               
               /**
                * Generated
                */
                void setState(const State& state) ;
               
               /**
                * Generated
                */
                int getLevel() const ;
               
               /**
                * Generated
                */
                void setLevel(const int& level) ;
               
                std::bitset<DIMENSIONS> getEvenFlags() const ;
               
                void setEvenFlags(const std::bitset<DIMENSIONS>& evenFlags) ;
               
                bool getEvenFlags(int elementIndex) const ;
               
                void setEvenFlags(int elementIndex, const bool& evenFlags) ;
               
                void flipEvenFlags(int elementIndex) ;
               
                tarch::la::Vector<DIMENSIONS_TIMES_TWO,short int> getAccessNumber() const ;
               
                void setAccessNumber(const tarch::la::Vector<DIMENSIONS_TIMES_TWO,short int>& accessNumber) ;
               
                short int getAccessNumber(int elementIndex) const ;
               
                void setAccessNumber(int elementIndex, const short int& accessNumber) ;
               
               /**
                * Generated
                */
               static std::string toString(const State& param);
               
               /**
                * Generated
                */
               static std::string getStateMapping();
               
               /**
                * Generated
                */
               std::string toString() const;
               
               /**
                * Generated
                */
               void toString(std::ostream& out) const;
               
               
               PersistentRecords getPersistentRecords() const;
               /**
                * Generated
                */
               TestCellPacked convert() const;
               
               
            #ifdef Parallel
               protected:
                  static tarch::logging::Log _log;
                  
                  int _senderDestinationRank;
                  
               public:
                  
                  /**
                   * Global that represents the mpi datatype.
                   * There are two variants: Datatype identifies only those attributes marked with
                   * parallelise. FullDatatype instead identifies the whole record with all fields.
                   */
                  static MPI_Datatype Datatype;
                  static MPI_Datatype FullDatatype;
                  
                  /**
                   * Initializes the data type for the mpi operations. Has to be called
                   * before the very first send or receive operation is called.
                   */
                  static void initDatatype();
                  
                  static void shutdownDatatype();
                  
                  /**
                   * @param communicateSleep -1 Data exchange through blocking mpi
                   * @param communicateSleep  0 Data exchange through non-blocking mpi, i.e. pending messages are received via polling until MPI_Test succeeds
                   * @param communicateSleep >0 Same as 0 but in addition, each unsuccessful MPI_Test is follows by an usleep
                   */
                  void send(int destination, int tag, bool exchangeOnlyAttributesMarkedWithParallelise, int communicateSleep);
                  
                  void receive(int source, int tag, bool exchangeOnlyAttributesMarkedWithParallelise, int communicateSleep);
                  
                  static bool isMessageInQueue(int tag, bool exchangeOnlyAttributesMarkedWithParallelise);
                  
                  int getSenderRank() const;
                  
            #endif
               
            };
            
            /**
             * @author This class is generated by DaStGen
             * 		   DataStructureGenerator (DaStGen)
             * 		   2007-2009 Wolfgang Eckhardt
             * 		   2012      Tobias Weinzierl
             *
             * 		   build date: 09-02-2014 14:40
             *
             * @date   19/02/2016 12:36
             */
            class peano::grid::tests::records::TestCellPacked { 
               
               public:
                  
                  typedef peano::grid::tests::records::TestCell::State State;
                  
                  struct PersistentRecords {
                     int _level;
                     tarch::la::Vector<DIMENSIONS_TIMES_TWO,short int> _accessNumber;
                     
                     /** mapping of records:
                     || Member 	|| startbit 	|| length
                      |  isInside	| startbit 0	| #bits 1
                      |  state	| startbit 1	| #bits 2
                      |  evenFlags	| startbit 3	| #bits DIMENSIONS
                      */
                     int _packedRecords0;
                     
                     /**
                      * Generated
                      */
                     PersistentRecords();
                     
                     /**
                      * Generated
                      */
                     PersistentRecords(const bool& isInside, const State& state, const int& level, const std::bitset<DIMENSIONS>& evenFlags, const tarch::la::Vector<DIMENSIONS_TIMES_TWO,short int>& accessNumber);
                     
                     /**
                      * Generated
                      */
                      bool getIsInside() const ;
                     
                     /**
                      * Generated
                      */
                      void setIsInside(const bool& isInside) ;
                     
                     /**
                      * Generated
                      */
                      State getState() const ;
                     
                     /**
                      * Generated
                      */
                      void setState(const State& state) ;
                     
                     /**
                      * Generated
                      */
                      int getLevel() const ;
                     
                     /**
                      * Generated
                      */
                      void setLevel(const int& level) ;
                     
                      std::bitset<DIMENSIONS> getEvenFlags() const ;
                     
                      void setEvenFlags(const std::bitset<DIMENSIONS>& evenFlags) ;
                     
                      tarch::la::Vector<DIMENSIONS_TIMES_TWO,short int> getAccessNumber() const ;
                     
                      void setAccessNumber(const tarch::la::Vector<DIMENSIONS_TIMES_TWO,short int>& accessNumber) ;
                     
                     
                  };
                  
               private: 
                  PersistentRecords _persistentRecords;
                  
               public:
                  /**
                   * Generated
                   */
                  TestCellPacked();
                  
                  /**
                   * Generated
                   */
                  TestCellPacked(const PersistentRecords& persistentRecords);
                  
                  /**
                   * Generated
                   */
                  TestCellPacked(const bool& isInside, const State& state, const int& level, const std::bitset<DIMENSIONS>& evenFlags, const tarch::la::Vector<DIMENSIONS_TIMES_TWO,short int>& accessNumber);
                  
                  /**
                   * Generated
                   */
                  virtual ~TestCellPacked();
                  
                  /**
                   * Generated
                   */
                   bool getIsInside() const ;
                  
                  /**
                   * Generated
                   */
                   void setIsInside(const bool& isInside) ;
                  
                  /**
                   * Generated
                   */
                   State getState() const ;
                  
                  /**
                   * Generated
                   */
                   void setState(const State& state) ;
                  
                  /**
                   * Generated
                   */
                   int getLevel() const ;
                  
                  /**
                   * Generated
                   */
                   void setLevel(const int& level) ;
                  
                   std::bitset<DIMENSIONS> getEvenFlags() const ;
                  
                   void setEvenFlags(const std::bitset<DIMENSIONS>& evenFlags) ;
                  
                   bool getEvenFlags(int elementIndex) const ;
                  
                   void setEvenFlags(int elementIndex, const bool& evenFlags) ;
                  
                   void flipEvenFlags(int elementIndex) ;
                  
                   tarch::la::Vector<DIMENSIONS_TIMES_TWO,short int> getAccessNumber() const ;
                  
                   void setAccessNumber(const tarch::la::Vector<DIMENSIONS_TIMES_TWO,short int>& accessNumber) ;
                  
                   short int getAccessNumber(int elementIndex) const ;
                  
                   void setAccessNumber(int elementIndex, const short int& accessNumber) ;
                  
                  /**
                   * Generated
                   */
                  static std::string toString(const State& param);
                  
                  /**
                   * Generated
                   */
                  static std::string getStateMapping();
                  
                  /**
                   * Generated
                   */
                  std::string toString() const;
                  
                  /**
                   * Generated
                   */
                  void toString(std::ostream& out) const;
                  
                  
                  PersistentRecords getPersistentRecords() const;
                  /**
                   * Generated
                   */
                  TestCell convert() const;
                  
                  
               #ifdef Parallel
                  protected:
                     static tarch::logging::Log _log;
                     
                     int _senderDestinationRank;
                     
                  public:
                     
                     /**
                      * Global that represents the mpi datatype.
                      * There are two variants: Datatype identifies only those attributes marked with
                      * parallelise. FullDatatype instead identifies the whole record with all fields.
                      */
                     static MPI_Datatype Datatype;
                     static MPI_Datatype FullDatatype;
                     
                     /**
                      * Initializes the data type for the mpi operations. Has to be called
                      * before the very first send or receive operation is called.
                      */
                     static void initDatatype();
                     
                     static void shutdownDatatype();
                     
                     /**
                      * @param communicateSleep -1 Data exchange through blocking mpi
                      * @param communicateSleep  0 Data exchange through non-blocking mpi, i.e. pending messages are received via polling until MPI_Test succeeds
                      * @param communicateSleep >0 Same as 0 but in addition, each unsuccessful MPI_Test is follows by an usleep
                      */
                     void send(int destination, int tag, bool exchangeOnlyAttributesMarkedWithParallelise, int communicateSleep);
                     
                     void receive(int source, int tag, bool exchangeOnlyAttributesMarkedWithParallelise, int communicateSleep);
                     
                     static bool isMessageInQueue(int tag, bool exchangeOnlyAttributesMarkedWithParallelise);
                     
                     int getSenderRank() const;
                     
               #endif
                  
               };
               
               
            
         #elif defined(Parallel) && !defined(Debug) && !defined(SharedMemoryParallelisation)
            /**
             * @author This class is generated by DaStGen
             * 		   DataStructureGenerator (DaStGen)
             * 		   2007-2009 Wolfgang Eckhardt
             * 		   2012      Tobias Weinzierl
             *
             * 		   build date: 09-02-2014 14:40
             *
             * @date   19/02/2016 12:36
             */
            class peano::grid::tests::records::TestCell { 
               
               public:
                  
                  typedef peano::grid::tests::records::TestCellPacked Packed;
                  
                  enum State {
                     Leaf = 0, Refined = 1, Root = 2
                  };
                  
                  struct PersistentRecords {
                     bool _isInside;
                     State _state;
                     std::bitset<DIMENSIONS> _evenFlags;
                     tarch::la::Vector<DIMENSIONS_TIMES_TWO,short int> _accessNumber;
                     int _responsibleRank;
                     double _nodeWorkload;
                     double _localWorkload;
                     double _totalWorkload;
                     double _maxWorkload;
                     double _minWorkload;
                     bool _subtreeHoldsWorker;
                     bool _cellIsAForkCandidate;
                     /**
                      * Generated
                      */
                     PersistentRecords();
                     
                     /**
                      * Generated
                      */
                     PersistentRecords(const bool& isInside, const State& state, const std::bitset<DIMENSIONS>& evenFlags, const tarch::la::Vector<DIMENSIONS_TIMES_TWO,short int>& accessNumber, const int& responsibleRank, const double& nodeWorkload, const double& localWorkload, const double& totalWorkload, const double& maxWorkload, const double& minWorkload, const bool& subtreeHoldsWorker, const bool& cellIsAForkCandidate);
                     
                     /**
                      * Generated
                      */
                      bool getIsInside() const ;
                     
                     /**
                      * Generated
                      */
                      void setIsInside(const bool& isInside) ;
                     
                     /**
                      * Generated
                      */
                      State getState() const ;
                     
                     /**
                      * Generated
                      */
                      void setState(const State& state) ;
                     
                      std::bitset<DIMENSIONS> getEvenFlags() const ;
                     
                      void setEvenFlags(const std::bitset<DIMENSIONS>& evenFlags) ;
                     
                      tarch::la::Vector<DIMENSIONS_TIMES_TWO,short int> getAccessNumber() const ;
                     
                      void setAccessNumber(const tarch::la::Vector<DIMENSIONS_TIMES_TWO,short int>& accessNumber) ;
                     
                     /**
                      * Generated
                      */
                      int getResponsibleRank() const ;
                     
                     /**
                      * Generated
                      */
                      void setResponsibleRank(const int& responsibleRank) ;
                     
                     /**
                      * Generated
                      */
                      double getNodeWorkload() const ;
                     
                     /**
                      * Generated
                      */
                      void setNodeWorkload(const double& nodeWorkload) ;
                     
                     /**
                      * Generated
                      */
                      double getLocalWorkload() const ;
                     
                     /**
                      * Generated
                      */
                      void setLocalWorkload(const double& localWorkload) ;
                     
                     /**
                      * Generated
                      */
                      double getTotalWorkload() const ;
                     
                     /**
                      * Generated
                      */
                      void setTotalWorkload(const double& totalWorkload) ;
                     
                     /**
                      * Generated
                      */
                      double getMaxWorkload() const ;
                     
                     /**
                      * Generated
                      */
                      void setMaxWorkload(const double& maxWorkload) ;
                     
                     /**
                      * Generated
                      */
                      double getMinWorkload() const ;
                     
                     /**
                      * Generated
                      */
                      void setMinWorkload(const double& minWorkload) ;
                     
                     /**
                      * Generated
                      */
                      bool getSubtreeHoldsWorker() const ;
                     
                     /**
                      * Generated
                      */
                      void setSubtreeHoldsWorker(const bool& subtreeHoldsWorker) ;
                     
                     /**
                      * Generated
                      */
                      bool getCellIsAForkCandidate() const ;
                     
                     /**
                      * Generated
                      */
                      void setCellIsAForkCandidate(const bool& cellIsAForkCandidate) ;
                     
                     
                  };
                  
               private: 
                  PersistentRecords _persistentRecords;
                  
               public:
                  /**
                   * Generated
                   */
                  TestCell();
                  
                  /**
                   * Generated
                   */
                  TestCell(const PersistentRecords& persistentRecords);
                  
                  /**
                   * Generated
                   */
                  TestCell(const bool& isInside, const State& state, const std::bitset<DIMENSIONS>& evenFlags, const tarch::la::Vector<DIMENSIONS_TIMES_TWO,short int>& accessNumber, const int& responsibleRank, const double& nodeWorkload, const double& localWorkload, const double& totalWorkload, const double& maxWorkload, const double& minWorkload, const bool& subtreeHoldsWorker, const bool& cellIsAForkCandidate);
                  
                  /**
                   * Generated
                   */
                  virtual ~TestCell();
                  
                  /**
                   * Generated
                   */
                   bool getIsInside() const ;
                  
                  /**
                   * Generated
                   */
                   void setIsInside(const bool& isInside) ;
                  
                  /**
                   * Generated
                   */
                   State getState() const ;
                  
                  /**
                   * Generated
                   */
                   void setState(const State& state) ;
                  
                   std::bitset<DIMENSIONS> getEvenFlags() const ;
                  
                   void setEvenFlags(const std::bitset<DIMENSIONS>& evenFlags) ;
                  
                   bool getEvenFlags(int elementIndex) const ;
                  
                   void setEvenFlags(int elementIndex, const bool& evenFlags) ;
                  
                   void flipEvenFlags(int elementIndex) ;
                  
                   tarch::la::Vector<DIMENSIONS_TIMES_TWO,short int> getAccessNumber() const ;
                  
                   void setAccessNumber(const tarch::la::Vector<DIMENSIONS_TIMES_TWO,short int>& accessNumber) ;
                  
                   short int getAccessNumber(int elementIndex) const ;
                  
                   void setAccessNumber(int elementIndex, const short int& accessNumber) ;
                  
                  /**
                   * Generated
                   */
                   int getResponsibleRank() const ;
                  
                  /**
                   * Generated
                   */
                   void setResponsibleRank(const int& responsibleRank) ;
                  
                  /**
                   * Generated
                   */
                   double getNodeWorkload() const ;
                  
                  /**
                   * Generated
                   */
                   void setNodeWorkload(const double& nodeWorkload) ;
                  
                  /**
                   * Generated
                   */
                   double getLocalWorkload() const ;
                  
                  /**
                   * Generated
                   */
                   void setLocalWorkload(const double& localWorkload) ;
                  
                  /**
                   * Generated
                   */
                   double getTotalWorkload() const ;
                  
                  /**
                   * Generated
                   */
                   void setTotalWorkload(const double& totalWorkload) ;
                  
                  /**
                   * Generated
                   */
                   double getMaxWorkload() const ;
                  
                  /**
                   * Generated
                   */
                   void setMaxWorkload(const double& maxWorkload) ;
                  
                  /**
                   * Generated
                   */
                   double getMinWorkload() const ;
                  
                  /**
                   * Generated
                   */
                   void setMinWorkload(const double& minWorkload) ;
                  
                  /**
                   * Generated
                   */
                   bool getSubtreeHoldsWorker() const ;
                  
                  /**
                   * Generated
                   */
                   void setSubtreeHoldsWorker(const bool& subtreeHoldsWorker) ;
                  
                  /**
                   * Generated
                   */
                   bool getCellIsAForkCandidate() const ;
                  
                  /**
                   * Generated
                   */
                   void setCellIsAForkCandidate(const bool& cellIsAForkCandidate) ;
                  
                  /**
                   * Generated
                   */
                  static std::string toString(const State& param);
                  
                  /**
                   * Generated
                   */
                  static std::string getStateMapping();
                  
                  /**
                   * Generated
                   */
                  std::string toString() const;
                  
                  /**
                   * Generated
                   */
                  void toString(std::ostream& out) const;
                  
                  
                  PersistentRecords getPersistentRecords() const;
                  /**
                   * Generated
                   */
                  TestCellPacked convert() const;
                  
                  
               #ifdef Parallel
                  protected:
                     static tarch::logging::Log _log;
                     
                     int _senderDestinationRank;
                     
                  public:
                     
                     /**
                      * Global that represents the mpi datatype.
                      * There are two variants: Datatype identifies only those attributes marked with
                      * parallelise. FullDatatype instead identifies the whole record with all fields.
                      */
                     static MPI_Datatype Datatype;
                     static MPI_Datatype FullDatatype;
                     
                     /**
                      * Initializes the data type for the mpi operations. Has to be called
                      * before the very first send or receive operation is called.
                      */
                     static void initDatatype();
                     
                     static void shutdownDatatype();
                     
                     /**
                      * @param communicateSleep -1 Data exchange through blocking mpi
                      * @param communicateSleep  0 Data exchange through non-blocking mpi, i.e. pending messages are received via polling until MPI_Test succeeds
                      * @param communicateSleep >0 Same as 0 but in addition, each unsuccessful MPI_Test is follows by an usleep
                      */
                     void send(int destination, int tag, bool exchangeOnlyAttributesMarkedWithParallelise, int communicateSleep);
                     
                     void receive(int source, int tag, bool exchangeOnlyAttributesMarkedWithParallelise, int communicateSleep);
                     
                     static bool isMessageInQueue(int tag, bool exchangeOnlyAttributesMarkedWithParallelise);
                     
                     int getSenderRank() const;
                     
               #endif
                  
               };
               
               /**
                * @author This class is generated by DaStGen
                * 		   DataStructureGenerator (DaStGen)
                * 		   2007-2009 Wolfgang Eckhardt
                * 		   2012      Tobias Weinzierl
                *
                * 		   build date: 09-02-2014 14:40
                *
                * @date   19/02/2016 12:36
                */
               class peano::grid::tests::records::TestCellPacked { 
                  
                  public:
                     
                     typedef peano::grid::tests::records::TestCell::State State;
                     
                     struct PersistentRecords {
                        tarch::la::Vector<DIMENSIONS_TIMES_TWO,short int> _accessNumber;
                        int _responsibleRank;
                        double _nodeWorkload;
                        double _localWorkload;
                        double _totalWorkload;
                        double _maxWorkload;
                        double _minWorkload;
                        bool _subtreeHoldsWorker;
                        
                        /** mapping of records:
                        || Member 	|| startbit 	|| length
                         |  isInside	| startbit 0	| #bits 1
                         |  state	| startbit 1	| #bits 2
                         |  evenFlags	| startbit 3	| #bits DIMENSIONS
                         |  cellIsAForkCandidate	| startbit DIMENSIONS + 3	| #bits 1
                         */
                        int _packedRecords0;
                        
                        /**
                         * Generated
                         */
                        PersistentRecords();
                        
                        /**
                         * Generated
                         */
                        PersistentRecords(const bool& isInside, const State& state, const std::bitset<DIMENSIONS>& evenFlags, const tarch::la::Vector<DIMENSIONS_TIMES_TWO,short int>& accessNumber, const int& responsibleRank, const double& nodeWorkload, const double& localWorkload, const double& totalWorkload, const double& maxWorkload, const double& minWorkload, const bool& subtreeHoldsWorker, const bool& cellIsAForkCandidate);
                        
                        /**
                         * Generated
                         */
                         bool getIsInside() const ;
                        
                        /**
                         * Generated
                         */
                         void setIsInside(const bool& isInside) ;
                        
                        /**
                         * Generated
                         */
                         State getState() const ;
                        
                        /**
                         * Generated
                         */
                         void setState(const State& state) ;
                        
                         std::bitset<DIMENSIONS> getEvenFlags() const ;
                        
                         void setEvenFlags(const std::bitset<DIMENSIONS>& evenFlags) ;
                        
                         tarch::la::Vector<DIMENSIONS_TIMES_TWO,short int> getAccessNumber() const ;
                        
                         void setAccessNumber(const tarch::la::Vector<DIMENSIONS_TIMES_TWO,short int>& accessNumber) ;
                        
                        /**
                         * Generated
                         */
                         int getResponsibleRank() const ;
                        
                        /**
                         * Generated
                         */
                         void setResponsibleRank(const int& responsibleRank) ;
                        
                        /**
                         * Generated
                         */
                         double getNodeWorkload() const ;
                        
                        /**
                         * Generated
                         */
                         void setNodeWorkload(const double& nodeWorkload) ;
                        
                        /**
                         * Generated
                         */
                         double getLocalWorkload() const ;
                        
                        /**
                         * Generated
                         */
                         void setLocalWorkload(const double& localWorkload) ;
                        
                        /**
                         * Generated
                         */
                         double getTotalWorkload() const ;
                        
                        /**
                         * Generated
                         */
                         void setTotalWorkload(const double& totalWorkload) ;
                        
                        /**
                         * Generated
                         */
                         double getMaxWorkload() const ;
                        
                        /**
                         * Generated
                         */
                         void setMaxWorkload(const double& maxWorkload) ;
                        
                        /**
                         * Generated
                         */
                         double getMinWorkload() const ;
                        
                        /**
                         * Generated
                         */
                         void setMinWorkload(const double& minWorkload) ;
                        
                        /**
                         * Generated
                         */
                         bool getSubtreeHoldsWorker() const ;
                        
                        /**
                         * Generated
                         */
                         void setSubtreeHoldsWorker(const bool& subtreeHoldsWorker) ;
                        
                        /**
                         * Generated
                         */
                         bool getCellIsAForkCandidate() const ;
                        
                        /**
                         * Generated
                         */
                         void setCellIsAForkCandidate(const bool& cellIsAForkCandidate) ;
                        
                        
                     };
                     
                  private: 
                     PersistentRecords _persistentRecords;
                     
                  public:
                     /**
                      * Generated
                      */
                     TestCellPacked();
                     
                     /**
                      * Generated
                      */
                     TestCellPacked(const PersistentRecords& persistentRecords);
                     
                     /**
                      * Generated
                      */
                     TestCellPacked(const bool& isInside, const State& state, const std::bitset<DIMENSIONS>& evenFlags, const tarch::la::Vector<DIMENSIONS_TIMES_TWO,short int>& accessNumber, const int& responsibleRank, const double& nodeWorkload, const double& localWorkload, const double& totalWorkload, const double& maxWorkload, const double& minWorkload, const bool& subtreeHoldsWorker, const bool& cellIsAForkCandidate);
                     
                     /**
                      * Generated
                      */
                     virtual ~TestCellPacked();
                     
                     /**
                      * Generated
                      */
                      bool getIsInside() const ;
                     
                     /**
                      * Generated
                      */
                      void setIsInside(const bool& isInside) ;
                     
                     /**
                      * Generated
                      */
                      State getState() const ;
                     
                     /**
                      * Generated
                      */
                      void setState(const State& state) ;
                     
                      std::bitset<DIMENSIONS> getEvenFlags() const ;
                     
                      void setEvenFlags(const std::bitset<DIMENSIONS>& evenFlags) ;
                     
                      bool getEvenFlags(int elementIndex) const ;
                     
                      void setEvenFlags(int elementIndex, const bool& evenFlags) ;
                     
                      void flipEvenFlags(int elementIndex) ;
                     
                      tarch::la::Vector<DIMENSIONS_TIMES_TWO,short int> getAccessNumber() const ;
                     
                      void setAccessNumber(const tarch::la::Vector<DIMENSIONS_TIMES_TWO,short int>& accessNumber) ;
                     
                      short int getAccessNumber(int elementIndex) const ;
                     
                      void setAccessNumber(int elementIndex, const short int& accessNumber) ;
                     
                     /**
                      * Generated
                      */
                      int getResponsibleRank() const ;
                     
                     /**
                      * Generated
                      */
                      void setResponsibleRank(const int& responsibleRank) ;
                     
                     /**
                      * Generated
                      */
                      double getNodeWorkload() const ;
                     
                     /**
                      * Generated
                      */
                      void setNodeWorkload(const double& nodeWorkload) ;
                     
                     /**
                      * Generated
                      */
                      double getLocalWorkload() const ;
                     
                     /**
                      * Generated
                      */
                      void setLocalWorkload(const double& localWorkload) ;
                     
                     /**
                      * Generated
                      */
                      double getTotalWorkload() const ;
                     
                     /**
                      * Generated
                      */
                      void setTotalWorkload(const double& totalWorkload) ;
                     
                     /**
                      * Generated
                      */
                      double getMaxWorkload() const ;
                     
                     /**
                      * Generated
                      */
                      void setMaxWorkload(const double& maxWorkload) ;
                     
                     /**
                      * Generated
                      */
                      double getMinWorkload() const ;
                     
                     /**
                      * Generated
                      */
                      void setMinWorkload(const double& minWorkload) ;
                     
                     /**
                      * Generated
                      */
                      bool getSubtreeHoldsWorker() const ;
                     
                     /**
                      * Generated
                      */
                      void setSubtreeHoldsWorker(const bool& subtreeHoldsWorker) ;
                     
                     /**
                      * Generated
                      */
                      bool getCellIsAForkCandidate() const ;
                     
                     /**
                      * Generated
                      */
                      void setCellIsAForkCandidate(const bool& cellIsAForkCandidate) ;
                     
                     /**
                      * Generated
                      */
                     static std::string toString(const State& param);
                     
                     /**
                      * Generated
                      */
                     static std::string getStateMapping();
                     
                     /**
                      * Generated
                      */
                     std::string toString() const;
                     
                     /**
                      * Generated
                      */
                     void toString(std::ostream& out) const;
                     
                     
                     PersistentRecords getPersistentRecords() const;
                     /**
                      * Generated
                      */
                     TestCell convert() const;
                     
                     
                  #ifdef Parallel
                     protected:
                        static tarch::logging::Log _log;
                        
                        int _senderDestinationRank;
                        
                     public:
                        
                        /**
                         * Global that represents the mpi datatype.
                         * There are two variants: Datatype identifies only those attributes marked with
                         * parallelise. FullDatatype instead identifies the whole record with all fields.
                         */
                        static MPI_Datatype Datatype;
                        static MPI_Datatype FullDatatype;
                        
                        /**
                         * Initializes the data type for the mpi operations. Has to be called
                         * before the very first send or receive operation is called.
                         */
                        static void initDatatype();
                        
                        static void shutdownDatatype();
                        
                        /**
                         * @param communicateSleep -1 Data exchange through blocking mpi
                         * @param communicateSleep  0 Data exchange through non-blocking mpi, i.e. pending messages are received via polling until MPI_Test succeeds
                         * @param communicateSleep >0 Same as 0 but in addition, each unsuccessful MPI_Test is follows by an usleep
                         */
                        void send(int destination, int tag, bool exchangeOnlyAttributesMarkedWithParallelise, int communicateSleep);
                        
                        void receive(int source, int tag, bool exchangeOnlyAttributesMarkedWithParallelise, int communicateSleep);
                        
                        static bool isMessageInQueue(int tag, bool exchangeOnlyAttributesMarkedWithParallelise);
                        
                        int getSenderRank() const;
                        
                  #endif
                     
                  };
                  
                  
               
            #elif !defined(Debug) && !defined(Parallel) && !defined(SharedMemoryParallelisation)
               /**
                * @author This class is generated by DaStGen
                * 		   DataStructureGenerator (DaStGen)
                * 		   2007-2009 Wolfgang Eckhardt
                * 		   2012      Tobias Weinzierl
                *
                * 		   build date: 09-02-2014 14:40
                *
                * @date   19/02/2016 12:36
                */
               class peano::grid::tests::records::TestCell { 
                  
                  public:
                     
                     typedef peano::grid::tests::records::TestCellPacked Packed;
                     
                     enum State {
                        Leaf = 0, Refined = 1, Root = 2
                     };
                     
                     struct PersistentRecords {
                        bool _isInside;
                        State _state;
                        std::bitset<DIMENSIONS> _evenFlags;
                        tarch::la::Vector<DIMENSIONS_TIMES_TWO,short int> _accessNumber;
                        /**
                         * Generated
                         */
                        PersistentRecords();
                        
                        /**
                         * Generated
                         */
                        PersistentRecords(const bool& isInside, const State& state, const std::bitset<DIMENSIONS>& evenFlags, const tarch::la::Vector<DIMENSIONS_TIMES_TWO,short int>& accessNumber);
                        
                        /**
                         * Generated
                         */
                         bool getIsInside() const ;
                        
                        /**
                         * Generated
                         */
                         void setIsInside(const bool& isInside) ;
                        
                        /**
                         * Generated
                         */
                         State getState() const ;
                        
                        /**
                         * Generated
                         */
                         void setState(const State& state) ;
                        
                         std::bitset<DIMENSIONS> getEvenFlags() const ;
                        
                         void setEvenFlags(const std::bitset<DIMENSIONS>& evenFlags) ;
                        
                         tarch::la::Vector<DIMENSIONS_TIMES_TWO,short int> getAccessNumber() const ;
                        
                         void setAccessNumber(const tarch::la::Vector<DIMENSIONS_TIMES_TWO,short int>& accessNumber) ;
                        
                        
                     };
                     
                  private: 
                     PersistentRecords _persistentRecords;
                     
                  public:
                     /**
                      * Generated
                      */
                     TestCell();
                     
                     /**
                      * Generated
                      */
                     TestCell(const PersistentRecords& persistentRecords);
                     
                     /**
                      * Generated
                      */
                     TestCell(const bool& isInside, const State& state, const std::bitset<DIMENSIONS>& evenFlags, const tarch::la::Vector<DIMENSIONS_TIMES_TWO,short int>& accessNumber);
                     
                     /**
                      * Generated
                      */
                     virtual ~TestCell();
                     
                     /**
                      * Generated
                      */
                      bool getIsInside() const ;
                     
                     /**
                      * Generated
                      */
                      void setIsInside(const bool& isInside) ;
                     
                     /**
                      * Generated
                      */
                      State getState() const ;
                     
                     /**
                      * Generated
                      */
                      void setState(const State& state) ;
                     
                      std::bitset<DIMENSIONS> getEvenFlags() const ;
                     
                      void setEvenFlags(const std::bitset<DIMENSIONS>& evenFlags) ;
                     
                      bool getEvenFlags(int elementIndex) const ;
                     
                      void setEvenFlags(int elementIndex, const bool& evenFlags) ;
                     
                      void flipEvenFlags(int elementIndex) ;
                     
                      tarch::la::Vector<DIMENSIONS_TIMES_TWO,short int> getAccessNumber() const ;
                     
                      void setAccessNumber(const tarch::la::Vector<DIMENSIONS_TIMES_TWO,short int>& accessNumber) ;
                     
                      short int getAccessNumber(int elementIndex) const ;
                     
                      void setAccessNumber(int elementIndex, const short int& accessNumber) ;
                     
                     /**
                      * Generated
                      */
                     static std::string toString(const State& param);
                     
                     /**
                      * Generated
                      */
                     static std::string getStateMapping();
                     
                     /**
                      * Generated
                      */
                     std::string toString() const;
                     
                     /**
                      * Generated
                      */
                     void toString(std::ostream& out) const;
                     
                     
                     PersistentRecords getPersistentRecords() const;
                     /**
                      * Generated
                      */
                     TestCellPacked convert() const;
                     
                     
                  #ifdef Parallel
                     protected:
                        static tarch::logging::Log _log;
                        
                        int _senderDestinationRank;
                        
                     public:
                        
                        /**
                         * Global that represents the mpi datatype.
                         * There are two variants: Datatype identifies only those attributes marked with
                         * parallelise. FullDatatype instead identifies the whole record with all fields.
                         */
                        static MPI_Datatype Datatype;
                        static MPI_Datatype FullDatatype;
                        
                        /**
                         * Initializes the data type for the mpi operations. Has to be called
                         * before the very first send or receive operation is called.
                         */
                        static void initDatatype();
                        
                        static void shutdownDatatype();
                        
                        /**
                         * @param communicateSleep -1 Data exchange through blocking mpi
                         * @param communicateSleep  0 Data exchange through non-blocking mpi, i.e. pending messages are received via polling until MPI_Test succeeds
                         * @param communicateSleep >0 Same as 0 but in addition, each unsuccessful MPI_Test is follows by an usleep
                         */
                        void send(int destination, int tag, bool exchangeOnlyAttributesMarkedWithParallelise, int communicateSleep);
                        
                        void receive(int source, int tag, bool exchangeOnlyAttributesMarkedWithParallelise, int communicateSleep);
                        
                        static bool isMessageInQueue(int tag, bool exchangeOnlyAttributesMarkedWithParallelise);
                        
                        int getSenderRank() const;
                        
                  #endif
                     
                  };
                  
                  /**
                   * @author This class is generated by DaStGen
                   * 		   DataStructureGenerator (DaStGen)
                   * 		   2007-2009 Wolfgang Eckhardt
                   * 		   2012      Tobias Weinzierl
                   *
                   * 		   build date: 09-02-2014 14:40
                   *
                   * @date   19/02/2016 12:36
                   */
                  class peano::grid::tests::records::TestCellPacked { 
                     
                     public:
                        
                        typedef peano::grid::tests::records::TestCell::State State;
                        
                        struct PersistentRecords {
                           tarch::la::Vector<DIMENSIONS_TIMES_TWO,short int> _accessNumber;
                           
                           /** mapping of records:
                           || Member 	|| startbit 	|| length
                            |  isInside	| startbit 0	| #bits 1
                            |  state	| startbit 1	| #bits 2
                            |  evenFlags	| startbit 3	| #bits DIMENSIONS
                            */
                           int _packedRecords0;
                           
                           /**
                            * Generated
                            */
                           PersistentRecords();
                           
                           /**
                            * Generated
                            */
                           PersistentRecords(const bool& isInside, const State& state, const std::bitset<DIMENSIONS>& evenFlags, const tarch::la::Vector<DIMENSIONS_TIMES_TWO,short int>& accessNumber);
                           
                           /**
                            * Generated
                            */
                            bool getIsInside() const ;
                           
                           /**
                            * Generated
                            */
                            void setIsInside(const bool& isInside) ;
                           
                           /**
                            * Generated
                            */
                            State getState() const ;
                           
                           /**
                            * Generated
                            */
                            void setState(const State& state) ;
                           
                            std::bitset<DIMENSIONS> getEvenFlags() const ;
                           
                            void setEvenFlags(const std::bitset<DIMENSIONS>& evenFlags) ;
                           
                            tarch::la::Vector<DIMENSIONS_TIMES_TWO,short int> getAccessNumber() const ;
                           
                            void setAccessNumber(const tarch::la::Vector<DIMENSIONS_TIMES_TWO,short int>& accessNumber) ;
                           
                           
                        };
                        
                     private: 
                        PersistentRecords _persistentRecords;
                        
                     public:
                        /**
                         * Generated
                         */
                        TestCellPacked();
                        
                        /**
                         * Generated
                         */
                        TestCellPacked(const PersistentRecords& persistentRecords);
                        
                        /**
                         * Generated
                         */
                        TestCellPacked(const bool& isInside, const State& state, const std::bitset<DIMENSIONS>& evenFlags, const tarch::la::Vector<DIMENSIONS_TIMES_TWO,short int>& accessNumber);
                        
                        /**
                         * Generated
                         */
                        virtual ~TestCellPacked();
                        
                        /**
                         * Generated
                         */
                         bool getIsInside() const ;
                        
                        /**
                         * Generated
                         */
                         void setIsInside(const bool& isInside) ;
                        
                        /**
                         * Generated
                         */
                         State getState() const ;
                        
                        /**
                         * Generated
                         */
                         void setState(const State& state) ;
                        
                         std::bitset<DIMENSIONS> getEvenFlags() const ;
                        
                         void setEvenFlags(const std::bitset<DIMENSIONS>& evenFlags) ;
                        
                         bool getEvenFlags(int elementIndex) const ;
                        
                         void setEvenFlags(int elementIndex, const bool& evenFlags) ;
                        
                         void flipEvenFlags(int elementIndex) ;
                        
                         tarch::la::Vector<DIMENSIONS_TIMES_TWO,short int> getAccessNumber() const ;
                        
                         void setAccessNumber(const tarch::la::Vector<DIMENSIONS_TIMES_TWO,short int>& accessNumber) ;
                        
                         short int getAccessNumber(int elementIndex) const ;
                        
                         void setAccessNumber(int elementIndex, const short int& accessNumber) ;
                        
                        /**
                         * Generated
                         */
                        static std::string toString(const State& param);
                        
                        /**
                         * Generated
                         */
                        static std::string getStateMapping();
                        
                        /**
                         * Generated
                         */
                        std::string toString() const;
                        
                        /**
                         * Generated
                         */
                        void toString(std::ostream& out) const;
                        
                        
                        PersistentRecords getPersistentRecords() const;
                        /**
                         * Generated
                         */
                        TestCell convert() const;
                        
                        
                     #ifdef Parallel
                        protected:
                           static tarch::logging::Log _log;
                           
                           int _senderDestinationRank;
                           
                        public:
                           
                           /**
                            * Global that represents the mpi datatype.
                            * There are two variants: Datatype identifies only those attributes marked with
                            * parallelise. FullDatatype instead identifies the whole record with all fields.
                            */
                           static MPI_Datatype Datatype;
                           static MPI_Datatype FullDatatype;
                           
                           /**
                            * Initializes the data type for the mpi operations. Has to be called
                            * before the very first send or receive operation is called.
                            */
                           static void initDatatype();
                           
                           static void shutdownDatatype();
                           
                           /**
                            * @param communicateSleep -1 Data exchange through blocking mpi
                            * @param communicateSleep  0 Data exchange through non-blocking mpi, i.e. pending messages are received via polling until MPI_Test succeeds
                            * @param communicateSleep >0 Same as 0 but in addition, each unsuccessful MPI_Test is follows by an usleep
                            */
                           void send(int destination, int tag, bool exchangeOnlyAttributesMarkedWithParallelise, int communicateSleep);
                           
                           void receive(int source, int tag, bool exchangeOnlyAttributesMarkedWithParallelise, int communicateSleep);
                           
                           static bool isMessageInQueue(int tag, bool exchangeOnlyAttributesMarkedWithParallelise);
                           
                           int getSenderRank() const;
                           
                     #endif
                        
                     };
                     
                     
                  
               #elif defined(Parallel) && defined(SharedMemoryParallelisation) && defined(Debug)
                  /**
                   * @author This class is generated by DaStGen
                   * 		   DataStructureGenerator (DaStGen)
                   * 		   2007-2009 Wolfgang Eckhardt
                   * 		   2012      Tobias Weinzierl
                   *
                   * 		   build date: 09-02-2014 14:40
                   *
                   * @date   19/02/2016 12:36
                   */
                  class peano::grid::tests::records::TestCell { 
                     
                     public:
                        
                        typedef peano::grid::tests::records::TestCellPacked Packed;
                        
                        enum State {
                           Leaf = 0, Refined = 1, Root = 2
                        };
                        
                        struct PersistentRecords {
                           bool _isInside;
                           State _state;
                           int _level;
                           std::bitset<DIMENSIONS> _evenFlags;
                           tarch::la::Vector<DIMENSIONS_TIMES_TWO,short int> _accessNumber;
                           int _responsibleRank;
                           double _nodeWorkload;
                           double _localWorkload;
                           double _totalWorkload;
                           double _maxWorkload;
                           double _minWorkload;
                           bool _subtreeHoldsWorker;
                           bool _cellIsAForkCandidate;
                           int _numberOfLoadsFromInputStream;
                           int _numberOfStoresToOutputStream;
                           /**
                            * Generated
                            */
                           PersistentRecords();
                           
                           /**
                            * Generated
                            */
                           PersistentRecords(const bool& isInside, const State& state, const int& level, const std::bitset<DIMENSIONS>& evenFlags, const tarch::la::Vector<DIMENSIONS_TIMES_TWO,short int>& accessNumber, const int& responsibleRank, const double& nodeWorkload, const double& localWorkload, const double& totalWorkload, const double& maxWorkload, const double& minWorkload, const bool& subtreeHoldsWorker, const bool& cellIsAForkCandidate, const int& numberOfLoadsFromInputStream, const int& numberOfStoresToOutputStream);
                           
                           /**
                            * Generated
                            */
                            bool getIsInside() const ;
                           
                           /**
                            * Generated
                            */
                            void setIsInside(const bool& isInside) ;
                           
                           /**
                            * Generated
                            */
                            State getState() const ;
                           
                           /**
                            * Generated
                            */
                            void setState(const State& state) ;
                           
                           /**
                            * Generated
                            */
                            int getLevel() const ;
                           
                           /**
                            * Generated
                            */
                            void setLevel(const int& level) ;
                           
                            std::bitset<DIMENSIONS> getEvenFlags() const ;
                           
                            void setEvenFlags(const std::bitset<DIMENSIONS>& evenFlags) ;
                           
                            tarch::la::Vector<DIMENSIONS_TIMES_TWO,short int> getAccessNumber() const ;
                           
                            void setAccessNumber(const tarch::la::Vector<DIMENSIONS_TIMES_TWO,short int>& accessNumber) ;
                           
                           /**
                            * Generated
                            */
                            int getResponsibleRank() const ;
                           
                           /**
                            * Generated
                            */
                            void setResponsibleRank(const int& responsibleRank) ;
                           
                           /**
                            * Generated
                            */
                            double getNodeWorkload() const ;
                           
                           /**
                            * Generated
                            */
                            void setNodeWorkload(const double& nodeWorkload) ;
                           
                           /**
                            * Generated
                            */
                            double getLocalWorkload() const ;
                           
                           /**
                            * Generated
                            */
                            void setLocalWorkload(const double& localWorkload) ;
                           
                           /**
                            * Generated
                            */
                            double getTotalWorkload() const ;
                           
                           /**
                            * Generated
                            */
                            void setTotalWorkload(const double& totalWorkload) ;
                           
                           /**
                            * Generated
                            */
                            double getMaxWorkload() const ;
                           
                           /**
                            * Generated
                            */
                            void setMaxWorkload(const double& maxWorkload) ;
                           
                           /**
                            * Generated
                            */
                            double getMinWorkload() const ;
                           
                           /**
                            * Generated
                            */
                            void setMinWorkload(const double& minWorkload) ;
                           
                           /**
                            * Generated
                            */
                            bool getSubtreeHoldsWorker() const ;
                           
                           /**
                            * Generated
                            */
                            void setSubtreeHoldsWorker(const bool& subtreeHoldsWorker) ;
                           
                           /**
                            * Generated
                            */
                            bool getCellIsAForkCandidate() const ;
                           
                           /**
                            * Generated
                            */
                            void setCellIsAForkCandidate(const bool& cellIsAForkCandidate) ;
                           
                           /**
                            * Generated
                            */
                            int getNumberOfLoadsFromInputStream() const ;
                           
                           /**
                            * Generated
                            */
                            void setNumberOfLoadsFromInputStream(const int& numberOfLoadsFromInputStream) ;
                           
                           /**
                            * Generated
                            */
                            int getNumberOfStoresToOutputStream() const ;
                           
                           /**
                            * Generated
                            */
                            void setNumberOfStoresToOutputStream(const int& numberOfStoresToOutputStream) ;
                           
                           
                        };
                        
                     private: 
                        PersistentRecords _persistentRecords;
                        
                     public:
                        /**
                         * Generated
                         */
                        TestCell();
                        
                        /**
                         * Generated
                         */
                        TestCell(const PersistentRecords& persistentRecords);
                        
                        /**
                         * Generated
                         */
                        TestCell(const bool& isInside, const State& state, const int& level, const std::bitset<DIMENSIONS>& evenFlags, const tarch::la::Vector<DIMENSIONS_TIMES_TWO,short int>& accessNumber, const int& responsibleRank, const double& nodeWorkload, const double& localWorkload, const double& totalWorkload, const double& maxWorkload, const double& minWorkload, const bool& subtreeHoldsWorker, const bool& cellIsAForkCandidate, const int& numberOfLoadsFromInputStream, const int& numberOfStoresToOutputStream);
                        
                        /**
                         * Generated
                         */
                        virtual ~TestCell();
                        
                        /**
                         * Generated
                         */
                         bool getIsInside() const ;
                        
                        /**
                         * Generated
                         */
                         void setIsInside(const bool& isInside) ;
                        
                        /**
                         * Generated
                         */
                         State getState() const ;
                        
                        /**
                         * Generated
                         */
                         void setState(const State& state) ;
                        
                        /**
                         * Generated
                         */
                         int getLevel() const ;
                        
                        /**
                         * Generated
                         */
                         void setLevel(const int& level) ;
                        
                         std::bitset<DIMENSIONS> getEvenFlags() const ;
                        
                         void setEvenFlags(const std::bitset<DIMENSIONS>& evenFlags) ;
                        
                         bool getEvenFlags(int elementIndex) const ;
                        
                         void setEvenFlags(int elementIndex, const bool& evenFlags) ;
                        
                         void flipEvenFlags(int elementIndex) ;
                        
                         tarch::la::Vector<DIMENSIONS_TIMES_TWO,short int> getAccessNumber() const ;
                        
                         void setAccessNumber(const tarch::la::Vector<DIMENSIONS_TIMES_TWO,short int>& accessNumber) ;
                        
                         short int getAccessNumber(int elementIndex) const ;
                        
                         void setAccessNumber(int elementIndex, const short int& accessNumber) ;
                        
                        /**
                         * Generated
                         */
                         int getResponsibleRank() const ;
                        
                        /**
                         * Generated
                         */
                         void setResponsibleRank(const int& responsibleRank) ;
                        
                        /**
                         * Generated
                         */
                         double getNodeWorkload() const ;
                        
                        /**
                         * Generated
                         */
                         void setNodeWorkload(const double& nodeWorkload) ;
                        
                        /**
                         * Generated
                         */
                         double getLocalWorkload() const ;
                        
                        /**
                         * Generated
                         */
                         void setLocalWorkload(const double& localWorkload) ;
                        
                        /**
                         * Generated
                         */
                         double getTotalWorkload() const ;
                        
                        /**
                         * Generated
                         */
                         void setTotalWorkload(const double& totalWorkload) ;
                        
                        /**
                         * Generated
                         */
                         double getMaxWorkload() const ;
                        
                        /**
                         * Generated
                         */
                         void setMaxWorkload(const double& maxWorkload) ;
                        
                        /**
                         * Generated
                         */
                         double getMinWorkload() const ;
                        
                        /**
                         * Generated
                         */
                         void setMinWorkload(const double& minWorkload) ;
                        
                        /**
                         * Generated
                         */
                         bool getSubtreeHoldsWorker() const ;
                        
                        /**
                         * Generated
                         */
                         void setSubtreeHoldsWorker(const bool& subtreeHoldsWorker) ;
                        
                        /**
                         * Generated
                         */
                         bool getCellIsAForkCandidate() const ;
                        
                        /**
                         * Generated
                         */
                         void setCellIsAForkCandidate(const bool& cellIsAForkCandidate) ;
                        
                        /**
                         * Generated
                         */
                         int getNumberOfLoadsFromInputStream() const ;
                        
                        /**
                         * Generated
                         */
                         void setNumberOfLoadsFromInputStream(const int& numberOfLoadsFromInputStream) ;
                        
                        /**
                         * Generated
                         */
                         int getNumberOfStoresToOutputStream() const ;
                        
                        /**
                         * Generated
                         */
                         void setNumberOfStoresToOutputStream(const int& numberOfStoresToOutputStream) ;
                        
                        /**
                         * Generated
                         */
                        static std::string toString(const State& param);
                        
                        /**
                         * Generated
                         */
                        static std::string getStateMapping();
                        
                        /**
                         * Generated
                         */
                        std::string toString() const;
                        
                        /**
                         * Generated
                         */
                        void toString(std::ostream& out) const;
                        
                        
                        PersistentRecords getPersistentRecords() const;
                        /**
                         * Generated
                         */
                        TestCellPacked convert() const;
                        
                        
                     #ifdef Parallel
                        protected:
                           static tarch::logging::Log _log;
                           
                           int _senderDestinationRank;
                           
                        public:
                           
                           /**
                            * Global that represents the mpi datatype.
                            * There are two variants: Datatype identifies only those attributes marked with
                            * parallelise. FullDatatype instead identifies the whole record with all fields.
                            */
                           static MPI_Datatype Datatype;
                           static MPI_Datatype FullDatatype;
                           
                           /**
                            * Initializes the data type for the mpi operations. Has to be called
                            * before the very first send or receive operation is called.
                            */
                           static void initDatatype();
                           
                           static void shutdownDatatype();
                           
                           /**
                            * @param communicateSleep -1 Data exchange through blocking mpi
                            * @param communicateSleep  0 Data exchange through non-blocking mpi, i.e. pending messages are received via polling until MPI_Test succeeds
                            * @param communicateSleep >0 Same as 0 but in addition, each unsuccessful MPI_Test is follows by an usleep
                            */
                           void send(int destination, int tag, bool exchangeOnlyAttributesMarkedWithParallelise, int communicateSleep);
                           
                           void receive(int source, int tag, bool exchangeOnlyAttributesMarkedWithParallelise, int communicateSleep);
                           
                           static bool isMessageInQueue(int tag, bool exchangeOnlyAttributesMarkedWithParallelise);
                           
                           int getSenderRank() const;
                           
                     #endif
                        
                     };
                     
                     /**
                      * @author This class is generated by DaStGen
                      * 		   DataStructureGenerator (DaStGen)
                      * 		   2007-2009 Wolfgang Eckhardt
                      * 		   2012      Tobias Weinzierl
                      *
                      * 		   build date: 09-02-2014 14:40
                      *
                      * @date   19/02/2016 12:36
                      */
                     class peano::grid::tests::records::TestCellPacked { 
                        
                        public:
                           
                           typedef peano::grid::tests::records::TestCell::State State;
                           
                           struct PersistentRecords {
                              int _level;
                              tarch::la::Vector<DIMENSIONS_TIMES_TWO,short int> _accessNumber;
                              int _responsibleRank;
                              double _nodeWorkload;
                              double _localWorkload;
                              double _totalWorkload;
                              double _maxWorkload;
                              double _minWorkload;
                              bool _subtreeHoldsWorker;
                              int _numberOfLoadsFromInputStream;
                              int _numberOfStoresToOutputStream;
                              
                              /** mapping of records:
                              || Member 	|| startbit 	|| length
                               |  isInside	| startbit 0	| #bits 1
                               |  state	| startbit 1	| #bits 2
                               |  evenFlags	| startbit 3	| #bits DIMENSIONS
                               |  cellIsAForkCandidate	| startbit DIMENSIONS + 3	| #bits 1
                               */
                              int _packedRecords0;
                              
                              /**
                               * Generated
                               */
                              PersistentRecords();
                              
                              /**
                               * Generated
                               */
                              PersistentRecords(const bool& isInside, const State& state, const int& level, const std::bitset<DIMENSIONS>& evenFlags, const tarch::la::Vector<DIMENSIONS_TIMES_TWO,short int>& accessNumber, const int& responsibleRank, const double& nodeWorkload, const double& localWorkload, const double& totalWorkload, const double& maxWorkload, const double& minWorkload, const bool& subtreeHoldsWorker, const bool& cellIsAForkCandidate, const int& numberOfLoadsFromInputStream, const int& numberOfStoresToOutputStream);
                              
                              /**
                               * Generated
                               */
                               bool getIsInside() const ;
                              
                              /**
                               * Generated
                               */
                               void setIsInside(const bool& isInside) ;
                              
                              /**
                               * Generated
                               */
                               State getState() const ;
                              
                              /**
                               * Generated
                               */
                               void setState(const State& state) ;
                              
                              /**
                               * Generated
                               */
                               int getLevel() const ;
                              
                              /**
                               * Generated
                               */
                               void setLevel(const int& level) ;
                              
                               std::bitset<DIMENSIONS> getEvenFlags() const ;
                              
                               void setEvenFlags(const std::bitset<DIMENSIONS>& evenFlags) ;
                              
                               tarch::la::Vector<DIMENSIONS_TIMES_TWO,short int> getAccessNumber() const ;
                              
                               void setAccessNumber(const tarch::la::Vector<DIMENSIONS_TIMES_TWO,short int>& accessNumber) ;
                              
                              /**
                               * Generated
                               */
                               int getResponsibleRank() const ;
                              
                              /**
                               * Generated
                               */
                               void setResponsibleRank(const int& responsibleRank) ;
                              
                              /**
                               * Generated
                               */
                               double getNodeWorkload() const ;
                              
                              /**
                               * Generated
                               */
                               void setNodeWorkload(const double& nodeWorkload) ;
                              
                              /**
                               * Generated
                               */
                               double getLocalWorkload() const ;
                              
                              /**
                               * Generated
                               */
                               void setLocalWorkload(const double& localWorkload) ;
                              
                              /**
                               * Generated
                               */
                               double getTotalWorkload() const ;
                              
                              /**
                               * Generated
                               */
                               void setTotalWorkload(const double& totalWorkload) ;
                              
                              /**
                               * Generated
                               */
                               double getMaxWorkload() const ;
                              
                              /**
                               * Generated
                               */
                               void setMaxWorkload(const double& maxWorkload) ;
                              
                              /**
                               * Generated
                               */
                               double getMinWorkload() const ;
                              
                              /**
                               * Generated
                               */
                               void setMinWorkload(const double& minWorkload) ;
                              
                              /**
                               * Generated
                               */
                               bool getSubtreeHoldsWorker() const ;
                              
                              /**
                               * Generated
                               */
                               void setSubtreeHoldsWorker(const bool& subtreeHoldsWorker) ;
                              
                              /**
                               * Generated
                               */
                               bool getCellIsAForkCandidate() const ;
                              
                              /**
                               * Generated
                               */
                               void setCellIsAForkCandidate(const bool& cellIsAForkCandidate) ;
                              
                              /**
                               * Generated
                               */
                               int getNumberOfLoadsFromInputStream() const ;
                              
                              /**
                               * Generated
                               */
                               void setNumberOfLoadsFromInputStream(const int& numberOfLoadsFromInputStream) ;
                              
                              /**
                               * Generated
                               */
                               int getNumberOfStoresToOutputStream() const ;
                              
                              /**
                               * Generated
                               */
                               void setNumberOfStoresToOutputStream(const int& numberOfStoresToOutputStream) ;
                              
                              
                           };
                           
                        private: 
                           PersistentRecords _persistentRecords;
                           
                        public:
                           /**
                            * Generated
                            */
                           TestCellPacked();
                           
                           /**
                            * Generated
                            */
                           TestCellPacked(const PersistentRecords& persistentRecords);
                           
                           /**
                            * Generated
                            */
                           TestCellPacked(const bool& isInside, const State& state, const int& level, const std::bitset<DIMENSIONS>& evenFlags, const tarch::la::Vector<DIMENSIONS_TIMES_TWO,short int>& accessNumber, const int& responsibleRank, const double& nodeWorkload, const double& localWorkload, const double& totalWorkload, const double& maxWorkload, const double& minWorkload, const bool& subtreeHoldsWorker, const bool& cellIsAForkCandidate, const int& numberOfLoadsFromInputStream, const int& numberOfStoresToOutputStream);
                           
                           /**
                            * Generated
                            */
                           virtual ~TestCellPacked();
                           
                           /**
                            * Generated
                            */
                            bool getIsInside() const ;
                           
                           /**
                            * Generated
                            */
                            void setIsInside(const bool& isInside) ;
                           
                           /**
                            * Generated
                            */
                            State getState() const ;
                           
                           /**
                            * Generated
                            */
                            void setState(const State& state) ;
                           
                           /**
                            * Generated
                            */
                            int getLevel() const ;
                           
                           /**
                            * Generated
                            */
                            void setLevel(const int& level) ;
                           
                            std::bitset<DIMENSIONS> getEvenFlags() const ;
                           
                            void setEvenFlags(const std::bitset<DIMENSIONS>& evenFlags) ;
                           
                            bool getEvenFlags(int elementIndex) const ;
                           
                            void setEvenFlags(int elementIndex, const bool& evenFlags) ;
                           
                            void flipEvenFlags(int elementIndex) ;
                           
                            tarch::la::Vector<DIMENSIONS_TIMES_TWO,short int> getAccessNumber() const ;
                           
                            void setAccessNumber(const tarch::la::Vector<DIMENSIONS_TIMES_TWO,short int>& accessNumber) ;
                           
                            short int getAccessNumber(int elementIndex) const ;
                           
                            void setAccessNumber(int elementIndex, const short int& accessNumber) ;
                           
                           /**
                            * Generated
                            */
                            int getResponsibleRank() const ;
                           
                           /**
                            * Generated
                            */
                            void setResponsibleRank(const int& responsibleRank) ;
                           
                           /**
                            * Generated
                            */
                            double getNodeWorkload() const ;
                           
                           /**
                            * Generated
                            */
                            void setNodeWorkload(const double& nodeWorkload) ;
                           
                           /**
                            * Generated
                            */
                            double getLocalWorkload() const ;
                           
                           /**
                            * Generated
                            */
                            void setLocalWorkload(const double& localWorkload) ;
                           
                           /**
                            * Generated
                            */
                            double getTotalWorkload() const ;
                           
                           /**
                            * Generated
                            */
                            void setTotalWorkload(const double& totalWorkload) ;
                           
                           /**
                            * Generated
                            */
                            double getMaxWorkload() const ;
                           
                           /**
                            * Generated
                            */
                            void setMaxWorkload(const double& maxWorkload) ;
                           
                           /**
                            * Generated
                            */
                            double getMinWorkload() const ;
                           
                           /**
                            * Generated
                            */
                            void setMinWorkload(const double& minWorkload) ;
                           
                           /**
                            * Generated
                            */
                            bool getSubtreeHoldsWorker() const ;
                           
                           /**
                            * Generated
                            */
                            void setSubtreeHoldsWorker(const bool& subtreeHoldsWorker) ;
                           
                           /**
                            * Generated
                            */
                            bool getCellIsAForkCandidate() const ;
                           
                           /**
                            * Generated
                            */
                            void setCellIsAForkCandidate(const bool& cellIsAForkCandidate) ;
                           
                           /**
                            * Generated
                            */
                            int getNumberOfLoadsFromInputStream() const ;
                           
                           /**
                            * Generated
                            */
                            void setNumberOfLoadsFromInputStream(const int& numberOfLoadsFromInputStream) ;
                           
                           /**
                            * Generated
                            */
                            int getNumberOfStoresToOutputStream() const ;
                           
                           /**
                            * Generated
                            */
                            void setNumberOfStoresToOutputStream(const int& numberOfStoresToOutputStream) ;
                           
                           /**
                            * Generated
                            */
                           static std::string toString(const State& param);
                           
                           /**
                            * Generated
                            */
                           static std::string getStateMapping();
                           
                           /**
                            * Generated
                            */
                           std::string toString() const;
                           
                           /**
                            * Generated
                            */
                           void toString(std::ostream& out) const;
                           
                           
                           PersistentRecords getPersistentRecords() const;
                           /**
                            * Generated
                            */
                           TestCell convert() const;
                           
                           
                        #ifdef Parallel
                           protected:
                              static tarch::logging::Log _log;
                              
                              int _senderDestinationRank;
                              
                           public:
                              
                              /**
                               * Global that represents the mpi datatype.
                               * There are two variants: Datatype identifies only those attributes marked with
                               * parallelise. FullDatatype instead identifies the whole record with all fields.
                               */
                              static MPI_Datatype Datatype;
                              static MPI_Datatype FullDatatype;
                              
                              /**
                               * Initializes the data type for the mpi operations. Has to be called
                               * before the very first send or receive operation is called.
                               */
                              static void initDatatype();
                              
                              static void shutdownDatatype();
                              
                              /**
                               * @param communicateSleep -1 Data exchange through blocking mpi
                               * @param communicateSleep  0 Data exchange through non-blocking mpi, i.e. pending messages are received via polling until MPI_Test succeeds
                               * @param communicateSleep >0 Same as 0 but in addition, each unsuccessful MPI_Test is follows by an usleep
                               */
                              void send(int destination, int tag, bool exchangeOnlyAttributesMarkedWithParallelise, int communicateSleep);
                              
                              void receive(int source, int tag, bool exchangeOnlyAttributesMarkedWithParallelise, int communicateSleep);
                              
                              static bool isMessageInQueue(int tag, bool exchangeOnlyAttributesMarkedWithParallelise);
                              
                              int getSenderRank() const;
                              
                        #endif
                           
                        };
                        
                        
                     
                  #elif defined(Parallel) && defined(Debug) && !defined(SharedMemoryParallelisation)
                     /**
                      * @author This class is generated by DaStGen
                      * 		   DataStructureGenerator (DaStGen)
                      * 		   2007-2009 Wolfgang Eckhardt
                      * 		   2012      Tobias Weinzierl
                      *
                      * 		   build date: 09-02-2014 14:40
                      *
                      * @date   19/02/2016 12:36
                      */
                     class peano::grid::tests::records::TestCell { 
                        
                        public:
                           
                           typedef peano::grid::tests::records::TestCellPacked Packed;
                           
                           enum State {
                              Leaf = 0, Refined = 1, Root = 2
                           };
                           
                           struct PersistentRecords {
                              bool _isInside;
                              State _state;
                              int _level;
                              std::bitset<DIMENSIONS> _evenFlags;
                              tarch::la::Vector<DIMENSIONS_TIMES_TWO,short int> _accessNumber;
                              int _responsibleRank;
                              double _nodeWorkload;
                              double _localWorkload;
                              double _totalWorkload;
                              double _maxWorkload;
                              double _minWorkload;
                              bool _subtreeHoldsWorker;
                              bool _cellIsAForkCandidate;
                              /**
                               * Generated
                               */
                              PersistentRecords();
                              
                              /**
                               * Generated
                               */
                              PersistentRecords(const bool& isInside, const State& state, const int& level, const std::bitset<DIMENSIONS>& evenFlags, const tarch::la::Vector<DIMENSIONS_TIMES_TWO,short int>& accessNumber, const int& responsibleRank, const double& nodeWorkload, const double& localWorkload, const double& totalWorkload, const double& maxWorkload, const double& minWorkload, const bool& subtreeHoldsWorker, const bool& cellIsAForkCandidate);
                              
                              /**
                               * Generated
                               */
                               bool getIsInside() const ;
                              
                              /**
                               * Generated
                               */
                               void setIsInside(const bool& isInside) ;
                              
                              /**
                               * Generated
                               */
                               State getState() const ;
                              
                              /**
                               * Generated
                               */
                               void setState(const State& state) ;
                              
                              /**
                               * Generated
                               */
                               int getLevel() const ;
                              
                              /**
                               * Generated
                               */
                               void setLevel(const int& level) ;
                              
                               std::bitset<DIMENSIONS> getEvenFlags() const ;
                              
                               void setEvenFlags(const std::bitset<DIMENSIONS>& evenFlags) ;
                              
                               tarch::la::Vector<DIMENSIONS_TIMES_TWO,short int> getAccessNumber() const ;
                              
                               void setAccessNumber(const tarch::la::Vector<DIMENSIONS_TIMES_TWO,short int>& accessNumber) ;
                              
                              /**
                               * Generated
                               */
                               int getResponsibleRank() const ;
                              
                              /**
                               * Generated
                               */
                               void setResponsibleRank(const int& responsibleRank) ;
                              
                              /**
                               * Generated
                               */
                               double getNodeWorkload() const ;
                              
                              /**
                               * Generated
                               */
                               void setNodeWorkload(const double& nodeWorkload) ;
                              
                              /**
                               * Generated
                               */
                               double getLocalWorkload() const ;
                              
                              /**
                               * Generated
                               */
                               void setLocalWorkload(const double& localWorkload) ;
                              
                              /**
                               * Generated
                               */
                               double getTotalWorkload() const ;
                              
                              /**
                               * Generated
                               */
                               void setTotalWorkload(const double& totalWorkload) ;
                              
                              /**
                               * Generated
                               */
                               double getMaxWorkload() const ;
                              
                              /**
                               * Generated
                               */
                               void setMaxWorkload(const double& maxWorkload) ;
                              
                              /**
                               * Generated
                               */
                               double getMinWorkload() const ;
                              
                              /**
                               * Generated
                               */
                               void setMinWorkload(const double& minWorkload) ;
                              
                              /**
                               * Generated
                               */
                               bool getSubtreeHoldsWorker() const ;
                              
                              /**
                               * Generated
                               */
                               void setSubtreeHoldsWorker(const bool& subtreeHoldsWorker) ;
                              
                              /**
                               * Generated
                               */
                               bool getCellIsAForkCandidate() const ;
                              
                              /**
                               * Generated
                               */
                               void setCellIsAForkCandidate(const bool& cellIsAForkCandidate) ;
                              
                              
                           };
                           
                        private: 
                           PersistentRecords _persistentRecords;
                           
                        public:
                           /**
                            * Generated
                            */
                           TestCell();
                           
                           /**
                            * Generated
                            */
                           TestCell(const PersistentRecords& persistentRecords);
                           
                           /**
                            * Generated
                            */
                           TestCell(const bool& isInside, const State& state, const int& level, const std::bitset<DIMENSIONS>& evenFlags, const tarch::la::Vector<DIMENSIONS_TIMES_TWO,short int>& accessNumber, const int& responsibleRank, const double& nodeWorkload, const double& localWorkload, const double& totalWorkload, const double& maxWorkload, const double& minWorkload, const bool& subtreeHoldsWorker, const bool& cellIsAForkCandidate);
                           
                           /**
                            * Generated
                            */
                           virtual ~TestCell();
                           
                           /**
                            * Generated
                            */
                            bool getIsInside() const ;
                           
                           /**
                            * Generated
                            */
                            void setIsInside(const bool& isInside) ;
                           
                           /**
                            * Generated
                            */
                            State getState() const ;
                           
                           /**
                            * Generated
                            */
                            void setState(const State& state) ;
                           
                           /**
                            * Generated
                            */
                            int getLevel() const ;
                           
                           /**
                            * Generated
                            */
                            void setLevel(const int& level) ;
                           
                            std::bitset<DIMENSIONS> getEvenFlags() const ;
                           
                            void setEvenFlags(const std::bitset<DIMENSIONS>& evenFlags) ;
                           
                            bool getEvenFlags(int elementIndex) const ;
                           
                            void setEvenFlags(int elementIndex, const bool& evenFlags) ;
                           
                            void flipEvenFlags(int elementIndex) ;
                           
                            tarch::la::Vector<DIMENSIONS_TIMES_TWO,short int> getAccessNumber() const ;
                           
                            void setAccessNumber(const tarch::la::Vector<DIMENSIONS_TIMES_TWO,short int>& accessNumber) ;
                           
                            short int getAccessNumber(int elementIndex) const ;
                           
                            void setAccessNumber(int elementIndex, const short int& accessNumber) ;
                           
                           /**
                            * Generated
                            */
                            int getResponsibleRank() const ;
                           
                           /**
                            * Generated
                            */
                            void setResponsibleRank(const int& responsibleRank) ;
                           
                           /**
                            * Generated
                            */
                            double getNodeWorkload() const ;
                           
                           /**
                            * Generated
                            */
                            void setNodeWorkload(const double& nodeWorkload) ;
                           
                           /**
                            * Generated
                            */
                            double getLocalWorkload() const ;
                           
                           /**
                            * Generated
                            */
                            void setLocalWorkload(const double& localWorkload) ;
                           
                           /**
                            * Generated
                            */
                            double getTotalWorkload() const ;
                           
                           /**
                            * Generated
                            */
                            void setTotalWorkload(const double& totalWorkload) ;
                           
                           /**
                            * Generated
                            */
                            double getMaxWorkload() const ;
                           
                           /**
                            * Generated
                            */
                            void setMaxWorkload(const double& maxWorkload) ;
                           
                           /**
                            * Generated
                            */
                            double getMinWorkload() const ;
                           
                           /**
                            * Generated
                            */
                            void setMinWorkload(const double& minWorkload) ;
                           
                           /**
                            * Generated
                            */
                            bool getSubtreeHoldsWorker() const ;
                           
                           /**
                            * Generated
                            */
                            void setSubtreeHoldsWorker(const bool& subtreeHoldsWorker) ;
                           
                           /**
                            * Generated
                            */
                            bool getCellIsAForkCandidate() const ;
                           
                           /**
                            * Generated
                            */
                            void setCellIsAForkCandidate(const bool& cellIsAForkCandidate) ;
                           
                           /**
                            * Generated
                            */
                           static std::string toString(const State& param);
                           
                           /**
                            * Generated
                            */
                           static std::string getStateMapping();
                           
                           /**
                            * Generated
                            */
                           std::string toString() const;
                           
                           /**
                            * Generated
                            */
                           void toString(std::ostream& out) const;
                           
                           
                           PersistentRecords getPersistentRecords() const;
                           /**
                            * Generated
                            */
                           TestCellPacked convert() const;
                           
                           
                        #ifdef Parallel
                           protected:
                              static tarch::logging::Log _log;
                              
                              int _senderDestinationRank;
                              
                           public:
                              
                              /**
                               * Global that represents the mpi datatype.
                               * There are two variants: Datatype identifies only those attributes marked with
                               * parallelise. FullDatatype instead identifies the whole record with all fields.
                               */
                              static MPI_Datatype Datatype;
                              static MPI_Datatype FullDatatype;
                              
                              /**
                               * Initializes the data type for the mpi operations. Has to be called
                               * before the very first send or receive operation is called.
                               */
                              static void initDatatype();
                              
                              static void shutdownDatatype();
                              
                              /**
                               * @param communicateSleep -1 Data exchange through blocking mpi
                               * @param communicateSleep  0 Data exchange through non-blocking mpi, i.e. pending messages are received via polling until MPI_Test succeeds
                               * @param communicateSleep >0 Same as 0 but in addition, each unsuccessful MPI_Test is follows by an usleep
                               */
                              void send(int destination, int tag, bool exchangeOnlyAttributesMarkedWithParallelise, int communicateSleep);
                              
                              void receive(int source, int tag, bool exchangeOnlyAttributesMarkedWithParallelise, int communicateSleep);
                              
                              static bool isMessageInQueue(int tag, bool exchangeOnlyAttributesMarkedWithParallelise);
                              
                              int getSenderRank() const;
                              
                        #endif
                           
                        };
                        
                        /**
                         * @author This class is generated by DaStGen
                         * 		   DataStructureGenerator (DaStGen)
                         * 		   2007-2009 Wolfgang Eckhardt
                         * 		   2012      Tobias Weinzierl
                         *
                         * 		   build date: 09-02-2014 14:40
                         *
                         * @date   19/02/2016 12:36
                         */
                        class peano::grid::tests::records::TestCellPacked { 
                           
                           public:
                              
                              typedef peano::grid::tests::records::TestCell::State State;
                              
                              struct PersistentRecords {
                                 int _level;
                                 tarch::la::Vector<DIMENSIONS_TIMES_TWO,short int> _accessNumber;
                                 int _responsibleRank;
                                 double _nodeWorkload;
                                 double _localWorkload;
                                 double _totalWorkload;
                                 double _maxWorkload;
                                 double _minWorkload;
                                 bool _subtreeHoldsWorker;
                                 
                                 /** mapping of records:
                                 || Member 	|| startbit 	|| length
                                  |  isInside	| startbit 0	| #bits 1
                                  |  state	| startbit 1	| #bits 2
                                  |  evenFlags	| startbit 3	| #bits DIMENSIONS
                                  |  cellIsAForkCandidate	| startbit DIMENSIONS + 3	| #bits 1
                                  */
                                 int _packedRecords0;
                                 
                                 /**
                                  * Generated
                                  */
                                 PersistentRecords();
                                 
                                 /**
                                  * Generated
                                  */
                                 PersistentRecords(const bool& isInside, const State& state, const int& level, const std::bitset<DIMENSIONS>& evenFlags, const tarch::la::Vector<DIMENSIONS_TIMES_TWO,short int>& accessNumber, const int& responsibleRank, const double& nodeWorkload, const double& localWorkload, const double& totalWorkload, const double& maxWorkload, const double& minWorkload, const bool& subtreeHoldsWorker, const bool& cellIsAForkCandidate);
                                 
                                 /**
                                  * Generated
                                  */
                                  bool getIsInside() const ;
                                 
                                 /**
                                  * Generated
                                  */
                                  void setIsInside(const bool& isInside) ;
                                 
                                 /**
                                  * Generated
                                  */
                                  State getState() const ;
                                 
                                 /**
                                  * Generated
                                  */
                                  void setState(const State& state) ;
                                 
                                 /**
                                  * Generated
                                  */
                                  int getLevel() const ;
                                 
                                 /**
                                  * Generated
                                  */
                                  void setLevel(const int& level) ;
                                 
                                  std::bitset<DIMENSIONS> getEvenFlags() const ;
                                 
                                  void setEvenFlags(const std::bitset<DIMENSIONS>& evenFlags) ;
                                 
                                  tarch::la::Vector<DIMENSIONS_TIMES_TWO,short int> getAccessNumber() const ;
                                 
                                  void setAccessNumber(const tarch::la::Vector<DIMENSIONS_TIMES_TWO,short int>& accessNumber) ;
                                 
                                 /**
                                  * Generated
                                  */
                                  int getResponsibleRank() const ;
                                 
                                 /**
                                  * Generated
                                  */
                                  void setResponsibleRank(const int& responsibleRank) ;
                                 
                                 /**
                                  * Generated
                                  */
                                  double getNodeWorkload() const ;
                                 
                                 /**
                                  * Generated
                                  */
                                  void setNodeWorkload(const double& nodeWorkload) ;
                                 
                                 /**
                                  * Generated
                                  */
                                  double getLocalWorkload() const ;
                                 
                                 /**
                                  * Generated
                                  */
                                  void setLocalWorkload(const double& localWorkload) ;
                                 
                                 /**
                                  * Generated
                                  */
                                  double getTotalWorkload() const ;
                                 
                                 /**
                                  * Generated
                                  */
                                  void setTotalWorkload(const double& totalWorkload) ;
                                 
                                 /**
                                  * Generated
                                  */
                                  double getMaxWorkload() const ;
                                 
                                 /**
                                  * Generated
                                  */
                                  void setMaxWorkload(const double& maxWorkload) ;
                                 
                                 /**
                                  * Generated
                                  */
                                  double getMinWorkload() const ;
                                 
                                 /**
                                  * Generated
                                  */
                                  void setMinWorkload(const double& minWorkload) ;
                                 
                                 /**
                                  * Generated
                                  */
                                  bool getSubtreeHoldsWorker() const ;
                                 
                                 /**
                                  * Generated
                                  */
                                  void setSubtreeHoldsWorker(const bool& subtreeHoldsWorker) ;
                                 
                                 /**
                                  * Generated
                                  */
                                  bool getCellIsAForkCandidate() const ;
                                 
                                 /**
                                  * Generated
                                  */
                                  void setCellIsAForkCandidate(const bool& cellIsAForkCandidate) ;
                                 
                                 
                              };
                              
                           private: 
                              PersistentRecords _persistentRecords;
                              
                           public:
                              /**
                               * Generated
                               */
                              TestCellPacked();
                              
                              /**
                               * Generated
                               */
                              TestCellPacked(const PersistentRecords& persistentRecords);
                              
                              /**
                               * Generated
                               */
                              TestCellPacked(const bool& isInside, const State& state, const int& level, const std::bitset<DIMENSIONS>& evenFlags, const tarch::la::Vector<DIMENSIONS_TIMES_TWO,short int>& accessNumber, const int& responsibleRank, const double& nodeWorkload, const double& localWorkload, const double& totalWorkload, const double& maxWorkload, const double& minWorkload, const bool& subtreeHoldsWorker, const bool& cellIsAForkCandidate);
                              
                              /**
                               * Generated
                               */
                              virtual ~TestCellPacked();
                              
                              /**
                               * Generated
                               */
                               bool getIsInside() const ;
                              
                              /**
                               * Generated
                               */
                               void setIsInside(const bool& isInside) ;
                              
                              /**
                               * Generated
                               */
                               State getState() const ;
                              
                              /**
                               * Generated
                               */
                               void setState(const State& state) ;
                              
                              /**
                               * Generated
                               */
                               int getLevel() const ;
                              
                              /**
                               * Generated
                               */
                               void setLevel(const int& level) ;
                              
                               std::bitset<DIMENSIONS> getEvenFlags() const ;
                              
                               void setEvenFlags(const std::bitset<DIMENSIONS>& evenFlags) ;
                              
                               bool getEvenFlags(int elementIndex) const ;
                              
                               void setEvenFlags(int elementIndex, const bool& evenFlags) ;
                              
                               void flipEvenFlags(int elementIndex) ;
                              
                               tarch::la::Vector<DIMENSIONS_TIMES_TWO,short int> getAccessNumber() const ;
                              
                               void setAccessNumber(const tarch::la::Vector<DIMENSIONS_TIMES_TWO,short int>& accessNumber) ;
                              
                               short int getAccessNumber(int elementIndex) const ;
                              
                               void setAccessNumber(int elementIndex, const short int& accessNumber) ;
                              
                              /**
                               * Generated
                               */
                               int getResponsibleRank() const ;
                              
                              /**
                               * Generated
                               */
                               void setResponsibleRank(const int& responsibleRank) ;
                              
                              /**
                               * Generated
                               */
                               double getNodeWorkload() const ;
                              
                              /**
                               * Generated
                               */
                               void setNodeWorkload(const double& nodeWorkload) ;
                              
                              /**
                               * Generated
                               */
                               double getLocalWorkload() const ;
                              
                              /**
                               * Generated
                               */
                               void setLocalWorkload(const double& localWorkload) ;
                              
                              /**
                               * Generated
                               */
                               double getTotalWorkload() const ;
                              
                              /**
                               * Generated
                               */
                               void setTotalWorkload(const double& totalWorkload) ;
                              
                              /**
                               * Generated
                               */
                               double getMaxWorkload() const ;
                              
                              /**
                               * Generated
                               */
                               void setMaxWorkload(const double& maxWorkload) ;
                              
                              /**
                               * Generated
                               */
                               double getMinWorkload() const ;
                              
                              /**
                               * Generated
                               */
                               void setMinWorkload(const double& minWorkload) ;
                              
                              /**
                               * Generated
                               */
                               bool getSubtreeHoldsWorker() const ;
                              
                              /**
                               * Generated
                               */
                               void setSubtreeHoldsWorker(const bool& subtreeHoldsWorker) ;
                              
                              /**
                               * Generated
                               */
                               bool getCellIsAForkCandidate() const ;
                              
                              /**
                               * Generated
                               */
                               void setCellIsAForkCandidate(const bool& cellIsAForkCandidate) ;
                              
                              /**
                               * Generated
                               */
                              static std::string toString(const State& param);
                              
                              /**
                               * Generated
                               */
                              static std::string getStateMapping();
                              
                              /**
                               * Generated
                               */
                              std::string toString() const;
                              
                              /**
                               * Generated
                               */
                              void toString(std::ostream& out) const;
                              
                              
                              PersistentRecords getPersistentRecords() const;
                              /**
                               * Generated
                               */
                              TestCell convert() const;
                              
                              
                           #ifdef Parallel
                              protected:
                                 static tarch::logging::Log _log;
                                 
                                 int _senderDestinationRank;
                                 
                              public:
                                 
                                 /**
                                  * Global that represents the mpi datatype.
                                  * There are two variants: Datatype identifies only those attributes marked with
                                  * parallelise. FullDatatype instead identifies the whole record with all fields.
                                  */
                                 static MPI_Datatype Datatype;
                                 static MPI_Datatype FullDatatype;
                                 
                                 /**
                                  * Initializes the data type for the mpi operations. Has to be called
                                  * before the very first send or receive operation is called.
                                  */
                                 static void initDatatype();
                                 
                                 static void shutdownDatatype();
                                 
                                 /**
                                  * @param communicateSleep -1 Data exchange through blocking mpi
                                  * @param communicateSleep  0 Data exchange through non-blocking mpi, i.e. pending messages are received via polling until MPI_Test succeeds
                                  * @param communicateSleep >0 Same as 0 but in addition, each unsuccessful MPI_Test is follows by an usleep
                                  */
                                 void send(int destination, int tag, bool exchangeOnlyAttributesMarkedWithParallelise, int communicateSleep);
                                 
                                 void receive(int source, int tag, bool exchangeOnlyAttributesMarkedWithParallelise, int communicateSleep);
                                 
                                 static bool isMessageInQueue(int tag, bool exchangeOnlyAttributesMarkedWithParallelise);
                                 
                                 int getSenderRank() const;
                                 
                           #endif
                              
                           };
                           
                           
                        
                     #elif defined(Parallel) && !defined(Debug) && defined(SharedMemoryParallelisation)
                        /**
                         * @author This class is generated by DaStGen
                         * 		   DataStructureGenerator (DaStGen)
                         * 		   2007-2009 Wolfgang Eckhardt
                         * 		   2012      Tobias Weinzierl
                         *
                         * 		   build date: 09-02-2014 14:40
                         *
                         * @date   19/02/2016 12:36
                         */
                        class peano::grid::tests::records::TestCell { 
                           
                           public:
                              
                              typedef peano::grid::tests::records::TestCellPacked Packed;
                              
                              enum State {
                                 Leaf = 0, Refined = 1, Root = 2
                              };
                              
                              struct PersistentRecords {
                                 bool _isInside;
                                 State _state;
                                 std::bitset<DIMENSIONS> _evenFlags;
                                 tarch::la::Vector<DIMENSIONS_TIMES_TWO,short int> _accessNumber;
                                 int _responsibleRank;
                                 double _nodeWorkload;
                                 double _localWorkload;
                                 double _totalWorkload;
                                 double _maxWorkload;
                                 double _minWorkload;
                                 bool _subtreeHoldsWorker;
                                 bool _cellIsAForkCandidate;
                                 int _numberOfLoadsFromInputStream;
                                 int _numberOfStoresToOutputStream;
                                 /**
                                  * Generated
                                  */
                                 PersistentRecords();
                                 
                                 /**
                                  * Generated
                                  */
                                 PersistentRecords(const bool& isInside, const State& state, const std::bitset<DIMENSIONS>& evenFlags, const tarch::la::Vector<DIMENSIONS_TIMES_TWO,short int>& accessNumber, const int& responsibleRank, const double& nodeWorkload, const double& localWorkload, const double& totalWorkload, const double& maxWorkload, const double& minWorkload, const bool& subtreeHoldsWorker, const bool& cellIsAForkCandidate, const int& numberOfLoadsFromInputStream, const int& numberOfStoresToOutputStream);
                                 
                                 /**
                                  * Generated
                                  */
                                  bool getIsInside() const ;
                                 
                                 /**
                                  * Generated
                                  */
                                  void setIsInside(const bool& isInside) ;
                                 
                                 /**
                                  * Generated
                                  */
                                  State getState() const ;
                                 
                                 /**
                                  * Generated
                                  */
                                  void setState(const State& state) ;
                                 
                                  std::bitset<DIMENSIONS> getEvenFlags() const ;
                                 
                                  void setEvenFlags(const std::bitset<DIMENSIONS>& evenFlags) ;
                                 
                                  tarch::la::Vector<DIMENSIONS_TIMES_TWO,short int> getAccessNumber() const ;
                                 
                                  void setAccessNumber(const tarch::la::Vector<DIMENSIONS_TIMES_TWO,short int>& accessNumber) ;
                                 
                                 /**
                                  * Generated
                                  */
                                  int getResponsibleRank() const ;
                                 
                                 /**
                                  * Generated
                                  */
                                  void setResponsibleRank(const int& responsibleRank) ;
                                 
                                 /**
                                  * Generated
                                  */
                                  double getNodeWorkload() const ;
                                 
                                 /**
                                  * Generated
                                  */
                                  void setNodeWorkload(const double& nodeWorkload) ;
                                 
                                 /**
                                  * Generated
                                  */
                                  double getLocalWorkload() const ;
                                 
                                 /**
                                  * Generated
                                  */
                                  void setLocalWorkload(const double& localWorkload) ;
                                 
                                 /**
                                  * Generated
                                  */
                                  double getTotalWorkload() const ;
                                 
                                 /**
                                  * Generated
                                  */
                                  void setTotalWorkload(const double& totalWorkload) ;
                                 
                                 /**
                                  * Generated
                                  */
                                  double getMaxWorkload() const ;
                                 
                                 /**
                                  * Generated
                                  */
                                  void setMaxWorkload(const double& maxWorkload) ;
                                 
                                 /**
                                  * Generated
                                  */
                                  double getMinWorkload() const ;
                                 
                                 /**
                                  * Generated
                                  */
                                  void setMinWorkload(const double& minWorkload) ;
                                 
                                 /**
                                  * Generated
                                  */
                                  bool getSubtreeHoldsWorker() const ;
                                 
                                 /**
                                  * Generated
                                  */
                                  void setSubtreeHoldsWorker(const bool& subtreeHoldsWorker) ;
                                 
                                 /**
                                  * Generated
                                  */
                                  bool getCellIsAForkCandidate() const ;
                                 
                                 /**
                                  * Generated
                                  */
                                  void setCellIsAForkCandidate(const bool& cellIsAForkCandidate) ;
                                 
                                 /**
                                  * Generated
                                  */
                                  int getNumberOfLoadsFromInputStream() const ;
                                 
                                 /**
                                  * Generated
                                  */
                                  void setNumberOfLoadsFromInputStream(const int& numberOfLoadsFromInputStream) ;
                                 
                                 /**
                                  * Generated
                                  */
                                  int getNumberOfStoresToOutputStream() const ;
                                 
                                 /**
                                  * Generated
                                  */
                                  void setNumberOfStoresToOutputStream(const int& numberOfStoresToOutputStream) ;
                                 
                                 
                              };
                              
                           private: 
                              PersistentRecords _persistentRecords;
                              
                           public:
                              /**
                               * Generated
                               */
                              TestCell();
                              
                              /**
                               * Generated
                               */
                              TestCell(const PersistentRecords& persistentRecords);
                              
                              /**
                               * Generated
                               */
                              TestCell(const bool& isInside, const State& state, const std::bitset<DIMENSIONS>& evenFlags, const tarch::la::Vector<DIMENSIONS_TIMES_TWO,short int>& accessNumber, const int& responsibleRank, const double& nodeWorkload, const double& localWorkload, const double& totalWorkload, const double& maxWorkload, const double& minWorkload, const bool& subtreeHoldsWorker, const bool& cellIsAForkCandidate, const int& numberOfLoadsFromInputStream, const int& numberOfStoresToOutputStream);
                              
                              /**
                               * Generated
                               */
                              virtual ~TestCell();
                              
                              /**
                               * Generated
                               */
                               bool getIsInside() const ;
                              
                              /**
                               * Generated
                               */
                               void setIsInside(const bool& isInside) ;
                              
                              /**
                               * Generated
                               */
                               State getState() const ;
                              
                              /**
                               * Generated
                               */
                               void setState(const State& state) ;
                              
                               std::bitset<DIMENSIONS> getEvenFlags() const ;
                              
                               void setEvenFlags(const std::bitset<DIMENSIONS>& evenFlags) ;
                              
                               bool getEvenFlags(int elementIndex) const ;
                              
                               void setEvenFlags(int elementIndex, const bool& evenFlags) ;
                              
                               void flipEvenFlags(int elementIndex) ;
                              
                               tarch::la::Vector<DIMENSIONS_TIMES_TWO,short int> getAccessNumber() const ;
                              
                               void setAccessNumber(const tarch::la::Vector<DIMENSIONS_TIMES_TWO,short int>& accessNumber) ;
                              
                               short int getAccessNumber(int elementIndex) const ;
                              
                               void setAccessNumber(int elementIndex, const short int& accessNumber) ;
                              
                              /**
                               * Generated
                               */
                               int getResponsibleRank() const ;
                              
                              /**
                               * Generated
                               */
                               void setResponsibleRank(const int& responsibleRank) ;
                              
                              /**
                               * Generated
                               */
                               double getNodeWorkload() const ;
                              
                              /**
                               * Generated
                               */
                               void setNodeWorkload(const double& nodeWorkload) ;
                              
                              /**
                               * Generated
                               */
                               double getLocalWorkload() const ;
                              
                              /**
                               * Generated
                               */
                               void setLocalWorkload(const double& localWorkload) ;
                              
                              /**
                               * Generated
                               */
                               double getTotalWorkload() const ;
                              
                              /**
                               * Generated
                               */
                               void setTotalWorkload(const double& totalWorkload) ;
                              
                              /**
                               * Generated
                               */
                               double getMaxWorkload() const ;
                              
                              /**
                               * Generated
                               */
                               void setMaxWorkload(const double& maxWorkload) ;
                              
                              /**
                               * Generated
                               */
                               double getMinWorkload() const ;
                              
                              /**
                               * Generated
                               */
                               void setMinWorkload(const double& minWorkload) ;
                              
                              /**
                               * Generated
                               */
                               bool getSubtreeHoldsWorker() const ;
                              
                              /**
                               * Generated
                               */
                               void setSubtreeHoldsWorker(const bool& subtreeHoldsWorker) ;
                              
                              /**
                               * Generated
                               */
                               bool getCellIsAForkCandidate() const ;
                              
                              /**
                               * Generated
                               */
                               void setCellIsAForkCandidate(const bool& cellIsAForkCandidate) ;
                              
                              /**
                               * Generated
                               */
                               int getNumberOfLoadsFromInputStream() const ;
                              
                              /**
                               * Generated
                               */
                               void setNumberOfLoadsFromInputStream(const int& numberOfLoadsFromInputStream) ;
                              
                              /**
                               * Generated
                               */
                               int getNumberOfStoresToOutputStream() const ;
                              
                              /**
                               * Generated
                               */
                               void setNumberOfStoresToOutputStream(const int& numberOfStoresToOutputStream) ;
                              
                              /**
                               * Generated
                               */
                              static std::string toString(const State& param);
                              
                              /**
                               * Generated
                               */
                              static std::string getStateMapping();
                              
                              /**
                               * Generated
                               */
                              std::string toString() const;
                              
                              /**
                               * Generated
                               */
                              void toString(std::ostream& out) const;
                              
                              
                              PersistentRecords getPersistentRecords() const;
                              /**
                               * Generated
                               */
                              TestCellPacked convert() const;
                              
                              
                           #ifdef Parallel
                              protected:
                                 static tarch::logging::Log _log;
                                 
                                 int _senderDestinationRank;
                                 
                              public:
                                 
                                 /**
                                  * Global that represents the mpi datatype.
                                  * There are two variants: Datatype identifies only those attributes marked with
                                  * parallelise. FullDatatype instead identifies the whole record with all fields.
                                  */
                                 static MPI_Datatype Datatype;
                                 static MPI_Datatype FullDatatype;
                                 
                                 /**
                                  * Initializes the data type for the mpi operations. Has to be called
                                  * before the very first send or receive operation is called.
                                  */
                                 static void initDatatype();
                                 
                                 static void shutdownDatatype();
                                 
                                 /**
                                  * @param communicateSleep -1 Data exchange through blocking mpi
                                  * @param communicateSleep  0 Data exchange through non-blocking mpi, i.e. pending messages are received via polling until MPI_Test succeeds
                                  * @param communicateSleep >0 Same as 0 but in addition, each unsuccessful MPI_Test is follows by an usleep
                                  */
                                 void send(int destination, int tag, bool exchangeOnlyAttributesMarkedWithParallelise, int communicateSleep);
                                 
                                 void receive(int source, int tag, bool exchangeOnlyAttributesMarkedWithParallelise, int communicateSleep);
                                 
                                 static bool isMessageInQueue(int tag, bool exchangeOnlyAttributesMarkedWithParallelise);
                                 
                                 int getSenderRank() const;
                                 
                           #endif
                              
                           };
                           
                           /**
                            * @author This class is generated by DaStGen
                            * 		   DataStructureGenerator (DaStGen)
                            * 		   2007-2009 Wolfgang Eckhardt
                            * 		   2012      Tobias Weinzierl
                            *
                            * 		   build date: 09-02-2014 14:40
                            *
                            * @date   19/02/2016 12:36
                            */
                           class peano::grid::tests::records::TestCellPacked { 
                              
                              public:
                                 
                                 typedef peano::grid::tests::records::TestCell::State State;
                                 
                                 struct PersistentRecords {
                                    tarch::la::Vector<DIMENSIONS_TIMES_TWO,short int> _accessNumber;
                                    int _responsibleRank;
                                    double _nodeWorkload;
                                    double _localWorkload;
                                    double _totalWorkload;
                                    double _maxWorkload;
                                    double _minWorkload;
                                    bool _subtreeHoldsWorker;
                                    int _numberOfLoadsFromInputStream;
                                    int _numberOfStoresToOutputStream;
                                    
                                    /** mapping of records:
                                    || Member 	|| startbit 	|| length
                                     |  isInside	| startbit 0	| #bits 1
                                     |  state	| startbit 1	| #bits 2
                                     |  evenFlags	| startbit 3	| #bits DIMENSIONS
                                     |  cellIsAForkCandidate	| startbit DIMENSIONS + 3	| #bits 1
                                     */
                                    int _packedRecords0;
                                    
                                    /**
                                     * Generated
                                     */
                                    PersistentRecords();
                                    
                                    /**
                                     * Generated
                                     */
                                    PersistentRecords(const bool& isInside, const State& state, const std::bitset<DIMENSIONS>& evenFlags, const tarch::la::Vector<DIMENSIONS_TIMES_TWO,short int>& accessNumber, const int& responsibleRank, const double& nodeWorkload, const double& localWorkload, const double& totalWorkload, const double& maxWorkload, const double& minWorkload, const bool& subtreeHoldsWorker, const bool& cellIsAForkCandidate, const int& numberOfLoadsFromInputStream, const int& numberOfStoresToOutputStream);
                                    
                                    /**
                                     * Generated
                                     */
                                     bool getIsInside() const ;
                                    
                                    /**
                                     * Generated
                                     */
                                     void setIsInside(const bool& isInside) ;
                                    
                                    /**
                                     * Generated
                                     */
                                     State getState() const ;
                                    
                                    /**
                                     * Generated
                                     */
                                     void setState(const State& state) ;
                                    
                                     std::bitset<DIMENSIONS> getEvenFlags() const ;
                                    
                                     void setEvenFlags(const std::bitset<DIMENSIONS>& evenFlags) ;
                                    
                                     tarch::la::Vector<DIMENSIONS_TIMES_TWO,short int> getAccessNumber() const ;
                                    
                                     void setAccessNumber(const tarch::la::Vector<DIMENSIONS_TIMES_TWO,short int>& accessNumber) ;
                                    
                                    /**
                                     * Generated
                                     */
                                     int getResponsibleRank() const ;
                                    
                                    /**
                                     * Generated
                                     */
                                     void setResponsibleRank(const int& responsibleRank) ;
                                    
                                    /**
                                     * Generated
                                     */
                                     double getNodeWorkload() const ;
                                    
                                    /**
                                     * Generated
                                     */
                                     void setNodeWorkload(const double& nodeWorkload) ;
                                    
                                    /**
                                     * Generated
                                     */
                                     double getLocalWorkload() const ;
                                    
                                    /**
                                     * Generated
                                     */
                                     void setLocalWorkload(const double& localWorkload) ;
                                    
                                    /**
                                     * Generated
                                     */
                                     double getTotalWorkload() const ;
                                    
                                    /**
                                     * Generated
                                     */
                                     void setTotalWorkload(const double& totalWorkload) ;
                                    
                                    /**
                                     * Generated
                                     */
                                     double getMaxWorkload() const ;
                                    
                                    /**
                                     * Generated
                                     */
                                     void setMaxWorkload(const double& maxWorkload) ;
                                    
                                    /**
                                     * Generated
                                     */
                                     double getMinWorkload() const ;
                                    
                                    /**
                                     * Generated
                                     */
                                     void setMinWorkload(const double& minWorkload) ;
                                    
                                    /**
                                     * Generated
                                     */
                                     bool getSubtreeHoldsWorker() const ;
                                    
                                    /**
                                     * Generated
                                     */
                                     void setSubtreeHoldsWorker(const bool& subtreeHoldsWorker) ;
                                    
                                    /**
                                     * Generated
                                     */
                                     bool getCellIsAForkCandidate() const ;
                                    
                                    /**
                                     * Generated
                                     */
                                     void setCellIsAForkCandidate(const bool& cellIsAForkCandidate) ;
                                    
                                    /**
                                     * Generated
                                     */
                                     int getNumberOfLoadsFromInputStream() const ;
                                    
                                    /**
                                     * Generated
                                     */
                                     void setNumberOfLoadsFromInputStream(const int& numberOfLoadsFromInputStream) ;
                                    
                                    /**
                                     * Generated
                                     */
                                     int getNumberOfStoresToOutputStream() const ;
                                    
                                    /**
                                     * Generated
                                     */
                                     void setNumberOfStoresToOutputStream(const int& numberOfStoresToOutputStream) ;
                                    
                                    
                                 };
                                 
                              private: 
                                 PersistentRecords _persistentRecords;
                                 
                              public:
                                 /**
                                  * Generated
                                  */
                                 TestCellPacked();
                                 
                                 /**
                                  * Generated
                                  */
                                 TestCellPacked(const PersistentRecords& persistentRecords);
                                 
                                 /**
                                  * Generated
                                  */
                                 TestCellPacked(const bool& isInside, const State& state, const std::bitset<DIMENSIONS>& evenFlags, const tarch::la::Vector<DIMENSIONS_TIMES_TWO,short int>& accessNumber, const int& responsibleRank, const double& nodeWorkload, const double& localWorkload, const double& totalWorkload, const double& maxWorkload, const double& minWorkload, const bool& subtreeHoldsWorker, const bool& cellIsAForkCandidate, const int& numberOfLoadsFromInputStream, const int& numberOfStoresToOutputStream);
                                 
                                 /**
                                  * Generated
                                  */
                                 virtual ~TestCellPacked();
                                 
                                 /**
                                  * Generated
                                  */
                                  bool getIsInside() const ;
                                 
                                 /**
                                  * Generated
                                  */
                                  void setIsInside(const bool& isInside) ;
                                 
                                 /**
                                  * Generated
                                  */
                                  State getState() const ;
                                 
                                 /**
                                  * Generated
                                  */
                                  void setState(const State& state) ;
                                 
                                  std::bitset<DIMENSIONS> getEvenFlags() const ;
                                 
                                  void setEvenFlags(const std::bitset<DIMENSIONS>& evenFlags) ;
                                 
                                  bool getEvenFlags(int elementIndex) const ;
                                 
                                  void setEvenFlags(int elementIndex, const bool& evenFlags) ;
                                 
                                  void flipEvenFlags(int elementIndex) ;
                                 
                                  tarch::la::Vector<DIMENSIONS_TIMES_TWO,short int> getAccessNumber() const ;
                                 
                                  void setAccessNumber(const tarch::la::Vector<DIMENSIONS_TIMES_TWO,short int>& accessNumber) ;
                                 
                                  short int getAccessNumber(int elementIndex) const ;
                                 
                                  void setAccessNumber(int elementIndex, const short int& accessNumber) ;
                                 
                                 /**
                                  * Generated
                                  */
                                  int getResponsibleRank() const ;
                                 
                                 /**
                                  * Generated
                                  */
                                  void setResponsibleRank(const int& responsibleRank) ;
                                 
                                 /**
                                  * Generated
                                  */
                                  double getNodeWorkload() const ;
                                 
                                 /**
                                  * Generated
                                  */
                                  void setNodeWorkload(const double& nodeWorkload) ;
                                 
                                 /**
                                  * Generated
                                  */
                                  double getLocalWorkload() const ;
                                 
                                 /**
                                  * Generated
                                  */
                                  void setLocalWorkload(const double& localWorkload) ;
                                 
                                 /**
                                  * Generated
                                  */
                                  double getTotalWorkload() const ;
                                 
                                 /**
                                  * Generated
                                  */
                                  void setTotalWorkload(const double& totalWorkload) ;
                                 
                                 /**
                                  * Generated
                                  */
                                  double getMaxWorkload() const ;
                                 
                                 /**
                                  * Generated
                                  */
                                  void setMaxWorkload(const double& maxWorkload) ;
                                 
                                 /**
                                  * Generated
                                  */
                                  double getMinWorkload() const ;
                                 
                                 /**
                                  * Generated
                                  */
                                  void setMinWorkload(const double& minWorkload) ;
                                 
                                 /**
                                  * Generated
                                  */
                                  bool getSubtreeHoldsWorker() const ;
                                 
                                 /**
                                  * Generated
                                  */
                                  void setSubtreeHoldsWorker(const bool& subtreeHoldsWorker) ;
                                 
                                 /**
                                  * Generated
                                  */
                                  bool getCellIsAForkCandidate() const ;
                                 
                                 /**
                                  * Generated
                                  */
                                  void setCellIsAForkCandidate(const bool& cellIsAForkCandidate) ;
                                 
                                 /**
                                  * Generated
                                  */
                                  int getNumberOfLoadsFromInputStream() const ;
                                 
                                 /**
                                  * Generated
                                  */
                                  void setNumberOfLoadsFromInputStream(const int& numberOfLoadsFromInputStream) ;
                                 
                                 /**
                                  * Generated
                                  */
                                  int getNumberOfStoresToOutputStream() const ;
                                 
                                 /**
                                  * Generated
                                  */
                                  void setNumberOfStoresToOutputStream(const int& numberOfStoresToOutputStream) ;
                                 
                                 /**
                                  * Generated
                                  */
                                 static std::string toString(const State& param);
                                 
                                 /**
                                  * Generated
                                  */
                                 static std::string getStateMapping();
                                 
                                 /**
                                  * Generated
                                  */
                                 std::string toString() const;
                                 
                                 /**
                                  * Generated
                                  */
                                 void toString(std::ostream& out) const;
                                 
                                 
                                 PersistentRecords getPersistentRecords() const;
                                 /**
                                  * Generated
                                  */
                                 TestCell convert() const;
                                 
                                 
                              #ifdef Parallel
                                 protected:
                                    static tarch::logging::Log _log;
                                    
                                    int _senderDestinationRank;
                                    
                                 public:
                                    
                                    /**
                                     * Global that represents the mpi datatype.
                                     * There are two variants: Datatype identifies only those attributes marked with
                                     * parallelise. FullDatatype instead identifies the whole record with all fields.
                                     */
                                    static MPI_Datatype Datatype;
                                    static MPI_Datatype FullDatatype;
                                    
                                    /**
                                     * Initializes the data type for the mpi operations. Has to be called
                                     * before the very first send or receive operation is called.
                                     */
                                    static void initDatatype();
                                    
                                    static void shutdownDatatype();
                                    
                                    /**
                                     * @param communicateSleep -1 Data exchange through blocking mpi
                                     * @param communicateSleep  0 Data exchange through non-blocking mpi, i.e. pending messages are received via polling until MPI_Test succeeds
                                     * @param communicateSleep >0 Same as 0 but in addition, each unsuccessful MPI_Test is follows by an usleep
                                     */
                                    void send(int destination, int tag, bool exchangeOnlyAttributesMarkedWithParallelise, int communicateSleep);
                                    
                                    void receive(int source, int tag, bool exchangeOnlyAttributesMarkedWithParallelise, int communicateSleep);
                                    
                                    static bool isMessageInQueue(int tag, bool exchangeOnlyAttributesMarkedWithParallelise);
                                    
                                    int getSenderRank() const;
                                    
                              #endif
                                 
                              };
                              
                              
                           
                        #elif !defined(Parallel) && defined(SharedMemoryParallelisation) && defined(Debug)
                           /**
                            * @author This class is generated by DaStGen
                            * 		   DataStructureGenerator (DaStGen)
                            * 		   2007-2009 Wolfgang Eckhardt
                            * 		   2012      Tobias Weinzierl
                            *
                            * 		   build date: 09-02-2014 14:40
                            *
                            * @date   19/02/2016 12:36
                            */
                           class peano::grid::tests::records::TestCell { 
                              
                              public:
                                 
                                 typedef peano::grid::tests::records::TestCellPacked Packed;
                                 
                                 enum State {
                                    Leaf = 0, Refined = 1, Root = 2
                                 };
                                 
                                 struct PersistentRecords {
                                    bool _isInside;
                                    State _state;
                                    int _level;
                                    std::bitset<DIMENSIONS> _evenFlags;
                                    tarch::la::Vector<DIMENSIONS_TIMES_TWO,short int> _accessNumber;
                                    int _numberOfLoadsFromInputStream;
                                    int _numberOfStoresToOutputStream;
                                    /**
                                     * Generated
                                     */
                                    PersistentRecords();
                                    
                                    /**
                                     * Generated
                                     */
                                    PersistentRecords(const bool& isInside, const State& state, const int& level, const std::bitset<DIMENSIONS>& evenFlags, const tarch::la::Vector<DIMENSIONS_TIMES_TWO,short int>& accessNumber, const int& numberOfLoadsFromInputStream, const int& numberOfStoresToOutputStream);
                                    
                                    /**
                                     * Generated
                                     */
                                     bool getIsInside() const ;
                                    
                                    /**
                                     * Generated
                                     */
                                     void setIsInside(const bool& isInside) ;
                                    
                                    /**
                                     * Generated
                                     */
                                     State getState() const ;
                                    
                                    /**
                                     * Generated
                                     */
                                     void setState(const State& state) ;
                                    
                                    /**
                                     * Generated
                                     */
                                     int getLevel() const ;
                                    
                                    /**
                                     * Generated
                                     */
                                     void setLevel(const int& level) ;
                                    
                                     std::bitset<DIMENSIONS> getEvenFlags() const ;
                                    
                                     void setEvenFlags(const std::bitset<DIMENSIONS>& evenFlags) ;
                                    
                                     tarch::la::Vector<DIMENSIONS_TIMES_TWO,short int> getAccessNumber() const ;
                                    
                                     void setAccessNumber(const tarch::la::Vector<DIMENSIONS_TIMES_TWO,short int>& accessNumber) ;
                                    
                                    /**
                                     * Generated
                                     */
                                     int getNumberOfLoadsFromInputStream() const ;
                                    
                                    /**
                                     * Generated
                                     */
                                     void setNumberOfLoadsFromInputStream(const int& numberOfLoadsFromInputStream) ;
                                    
                                    /**
                                     * Generated
                                     */
                                     int getNumberOfStoresToOutputStream() const ;
                                    
                                    /**
                                     * Generated
                                     */
                                     void setNumberOfStoresToOutputStream(const int& numberOfStoresToOutputStream) ;
                                    
                                    
                                 };
                                 
                              private: 
                                 PersistentRecords _persistentRecords;
                                 
                              public:
                                 /**
                                  * Generated
                                  */
                                 TestCell();
                                 
                                 /**
                                  * Generated
                                  */
                                 TestCell(const PersistentRecords& persistentRecords);
                                 
                                 /**
                                  * Generated
                                  */
                                 TestCell(const bool& isInside, const State& state, const int& level, const std::bitset<DIMENSIONS>& evenFlags, const tarch::la::Vector<DIMENSIONS_TIMES_TWO,short int>& accessNumber, const int& numberOfLoadsFromInputStream, const int& numberOfStoresToOutputStream);
                                 
                                 /**
                                  * Generated
                                  */
                                 virtual ~TestCell();
                                 
                                 /**
                                  * Generated
                                  */
                                  bool getIsInside() const ;
                                 
                                 /**
                                  * Generated
                                  */
                                  void setIsInside(const bool& isInside) ;
                                 
                                 /**
                                  * Generated
                                  */
                                  State getState() const ;
                                 
                                 /**
                                  * Generated
                                  */
                                  void setState(const State& state) ;
                                 
                                 /**
                                  * Generated
                                  */
                                  int getLevel() const ;
                                 
                                 /**
                                  * Generated
                                  */
                                  void setLevel(const int& level) ;
                                 
                                  std::bitset<DIMENSIONS> getEvenFlags() const ;
                                 
                                  void setEvenFlags(const std::bitset<DIMENSIONS>& evenFlags) ;
                                 
                                  bool getEvenFlags(int elementIndex) const ;
                                 
                                  void setEvenFlags(int elementIndex, const bool& evenFlags) ;
                                 
                                  void flipEvenFlags(int elementIndex) ;
                                 
                                  tarch::la::Vector<DIMENSIONS_TIMES_TWO,short int> getAccessNumber() const ;
                                 
                                  void setAccessNumber(const tarch::la::Vector<DIMENSIONS_TIMES_TWO,short int>& accessNumber) ;
                                 
                                  short int getAccessNumber(int elementIndex) const ;
                                 
                                  void setAccessNumber(int elementIndex, const short int& accessNumber) ;
                                 
                                 /**
                                  * Generated
                                  */
                                  int getNumberOfLoadsFromInputStream() const ;
                                 
                                 /**
                                  * Generated
                                  */
                                  void setNumberOfLoadsFromInputStream(const int& numberOfLoadsFromInputStream) ;
                                 
                                 /**
                                  * Generated
                                  */
                                  int getNumberOfStoresToOutputStream() const ;
                                 
                                 /**
                                  * Generated
                                  */
                                  void setNumberOfStoresToOutputStream(const int& numberOfStoresToOutputStream) ;
                                 
                                 /**
                                  * Generated
                                  */
                                 static std::string toString(const State& param);
                                 
                                 /**
                                  * Generated
                                  */
                                 static std::string getStateMapping();
                                 
                                 /**
                                  * Generated
                                  */
                                 std::string toString() const;
                                 
                                 /**
                                  * Generated
                                  */
                                 void toString(std::ostream& out) const;
                                 
                                 
                                 PersistentRecords getPersistentRecords() const;
                                 /**
                                  * Generated
                                  */
                                 TestCellPacked convert() const;
                                 
                                 
                              #ifdef Parallel
                                 protected:
                                    static tarch::logging::Log _log;
                                    
                                    int _senderDestinationRank;
                                    
                                 public:
                                    
                                    /**
                                     * Global that represents the mpi datatype.
                                     * There are two variants: Datatype identifies only those attributes marked with
                                     * parallelise. FullDatatype instead identifies the whole record with all fields.
                                     */
                                    static MPI_Datatype Datatype;
                                    static MPI_Datatype FullDatatype;
                                    
                                    /**
                                     * Initializes the data type for the mpi operations. Has to be called
                                     * before the very first send or receive operation is called.
                                     */
                                    static void initDatatype();
                                    
                                    static void shutdownDatatype();
                                    
                                    /**
                                     * @param communicateSleep -1 Data exchange through blocking mpi
                                     * @param communicateSleep  0 Data exchange through non-blocking mpi, i.e. pending messages are received via polling until MPI_Test succeeds
                                     * @param communicateSleep >0 Same as 0 but in addition, each unsuccessful MPI_Test is follows by an usleep
                                     */
                                    void send(int destination, int tag, bool exchangeOnlyAttributesMarkedWithParallelise, int communicateSleep);
                                    
                                    void receive(int source, int tag, bool exchangeOnlyAttributesMarkedWithParallelise, int communicateSleep);
                                    
                                    static bool isMessageInQueue(int tag, bool exchangeOnlyAttributesMarkedWithParallelise);
                                    
                                    int getSenderRank() const;
                                    
                              #endif
                                 
                              };
                              
                              /**
                               * @author This class is generated by DaStGen
                               * 		   DataStructureGenerator (DaStGen)
                               * 		   2007-2009 Wolfgang Eckhardt
                               * 		   2012      Tobias Weinzierl
                               *
                               * 		   build date: 09-02-2014 14:40
                               *
                               * @date   19/02/2016 12:36
                               */
                              class peano::grid::tests::records::TestCellPacked { 
                                 
                                 public:
                                    
                                    typedef peano::grid::tests::records::TestCell::State State;
                                    
                                    struct PersistentRecords {
                                       int _level;
                                       tarch::la::Vector<DIMENSIONS_TIMES_TWO,short int> _accessNumber;
                                       int _numberOfLoadsFromInputStream;
                                       int _numberOfStoresToOutputStream;
                                       
                                       /** mapping of records:
                                       || Member 	|| startbit 	|| length
                                        |  isInside	| startbit 0	| #bits 1
                                        |  state	| startbit 1	| #bits 2
                                        |  evenFlags	| startbit 3	| #bits DIMENSIONS
                                        */
                                       int _packedRecords0;
                                       
                                       /**
                                        * Generated
                                        */
                                       PersistentRecords();
                                       
                                       /**
                                        * Generated
                                        */
                                       PersistentRecords(const bool& isInside, const State& state, const int& level, const std::bitset<DIMENSIONS>& evenFlags, const tarch::la::Vector<DIMENSIONS_TIMES_TWO,short int>& accessNumber, const int& numberOfLoadsFromInputStream, const int& numberOfStoresToOutputStream);
                                       
                                       /**
                                        * Generated
                                        */
                                        bool getIsInside() const ;
                                       
                                       /**
                                        * Generated
                                        */
                                        void setIsInside(const bool& isInside) ;
                                       
                                       /**
                                        * Generated
                                        */
                                        State getState() const ;
                                       
                                       /**
                                        * Generated
                                        */
                                        void setState(const State& state) ;
                                       
                                       /**
                                        * Generated
                                        */
                                        int getLevel() const ;
                                       
                                       /**
                                        * Generated
                                        */
                                        void setLevel(const int& level) ;
                                       
                                        std::bitset<DIMENSIONS> getEvenFlags() const ;
                                       
                                        void setEvenFlags(const std::bitset<DIMENSIONS>& evenFlags) ;
                                       
                                        tarch::la::Vector<DIMENSIONS_TIMES_TWO,short int> getAccessNumber() const ;
                                       
                                        void setAccessNumber(const tarch::la::Vector<DIMENSIONS_TIMES_TWO,short int>& accessNumber) ;
                                       
                                       /**
                                        * Generated
                                        */
                                        int getNumberOfLoadsFromInputStream() const ;
                                       
                                       /**
                                        * Generated
                                        */
                                        void setNumberOfLoadsFromInputStream(const int& numberOfLoadsFromInputStream) ;
                                       
                                       /**
                                        * Generated
                                        */
                                        int getNumberOfStoresToOutputStream() const ;
                                       
                                       /**
                                        * Generated
                                        */
                                        void setNumberOfStoresToOutputStream(const int& numberOfStoresToOutputStream) ;
                                       
                                       
                                    };
                                    
                                 private: 
                                    PersistentRecords _persistentRecords;
                                    
                                 public:
                                    /**
                                     * Generated
                                     */
                                    TestCellPacked();
                                    
                                    /**
                                     * Generated
                                     */
                                    TestCellPacked(const PersistentRecords& persistentRecords);
                                    
                                    /**
                                     * Generated
                                     */
                                    TestCellPacked(const bool& isInside, const State& state, const int& level, const std::bitset<DIMENSIONS>& evenFlags, const tarch::la::Vector<DIMENSIONS_TIMES_TWO,short int>& accessNumber, const int& numberOfLoadsFromInputStream, const int& numberOfStoresToOutputStream);
                                    
                                    /**
                                     * Generated
                                     */
                                    virtual ~TestCellPacked();
                                    
                                    /**
                                     * Generated
                                     */
                                     bool getIsInside() const ;
                                    
                                    /**
                                     * Generated
                                     */
                                     void setIsInside(const bool& isInside) ;
                                    
                                    /**
                                     * Generated
                                     */
                                     State getState() const ;
                                    
                                    /**
                                     * Generated
                                     */
                                     void setState(const State& state) ;
                                    
                                    /**
                                     * Generated
                                     */
                                     int getLevel() const ;
                                    
                                    /**
                                     * Generated
                                     */
                                     void setLevel(const int& level) ;
                                    
                                     std::bitset<DIMENSIONS> getEvenFlags() const ;
                                    
                                     void setEvenFlags(const std::bitset<DIMENSIONS>& evenFlags) ;
                                    
                                     bool getEvenFlags(int elementIndex) const ;
                                    
                                     void setEvenFlags(int elementIndex, const bool& evenFlags) ;
                                    
                                     void flipEvenFlags(int elementIndex) ;
                                    
                                     tarch::la::Vector<DIMENSIONS_TIMES_TWO,short int> getAccessNumber() const ;
                                    
                                     void setAccessNumber(const tarch::la::Vector<DIMENSIONS_TIMES_TWO,short int>& accessNumber) ;
                                    
                                     short int getAccessNumber(int elementIndex) const ;
                                    
                                     void setAccessNumber(int elementIndex, const short int& accessNumber) ;
                                    
                                    /**
                                     * Generated
                                     */
                                     int getNumberOfLoadsFromInputStream() const ;
                                    
                                    /**
                                     * Generated
                                     */
                                     void setNumberOfLoadsFromInputStream(const int& numberOfLoadsFromInputStream) ;
                                    
                                    /**
                                     * Generated
                                     */
                                     int getNumberOfStoresToOutputStream() const ;
                                    
                                    /**
                                     * Generated
                                     */
                                     void setNumberOfStoresToOutputStream(const int& numberOfStoresToOutputStream) ;
                                    
                                    /**
                                     * Generated
                                     */
                                    static std::string toString(const State& param);
                                    
                                    /**
                                     * Generated
                                     */
                                    static std::string getStateMapping();
                                    
                                    /**
                                     * Generated
                                     */
                                    std::string toString() const;
                                    
                                    /**
                                     * Generated
                                     */
                                    void toString(std::ostream& out) const;
                                    
                                    
                                    PersistentRecords getPersistentRecords() const;
                                    /**
                                     * Generated
                                     */
                                    TestCell convert() const;
                                    
                                    
                                 #ifdef Parallel
                                    protected:
                                       static tarch::logging::Log _log;
                                       
                                       int _senderDestinationRank;
                                       
                                    public:
                                       
                                       /**
                                        * Global that represents the mpi datatype.
                                        * There are two variants: Datatype identifies only those attributes marked with
                                        * parallelise. FullDatatype instead identifies the whole record with all fields.
                                        */
                                       static MPI_Datatype Datatype;
                                       static MPI_Datatype FullDatatype;
                                       
                                       /**
                                        * Initializes the data type for the mpi operations. Has to be called
                                        * before the very first send or receive operation is called.
                                        */
                                       static void initDatatype();
                                       
                                       static void shutdownDatatype();
                                       
                                       /**
                                        * @param communicateSleep -1 Data exchange through blocking mpi
                                        * @param communicateSleep  0 Data exchange through non-blocking mpi, i.e. pending messages are received via polling until MPI_Test succeeds
                                        * @param communicateSleep >0 Same as 0 but in addition, each unsuccessful MPI_Test is follows by an usleep
                                        */
                                       void send(int destination, int tag, bool exchangeOnlyAttributesMarkedWithParallelise, int communicateSleep);
                                       
                                       void receive(int source, int tag, bool exchangeOnlyAttributesMarkedWithParallelise, int communicateSleep);
                                       
                                       static bool isMessageInQueue(int tag, bool exchangeOnlyAttributesMarkedWithParallelise);
                                       
                                       int getSenderRank() const;
                                       
                                 #endif
                                    
                                 };
                                 
                                 
                              
                           #endif
                           
                           #endif
                           
