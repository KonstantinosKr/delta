/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.peano.pdt.node;

import java.util.*;
import org.peano.pdt.analysis.*;

@SuppressWarnings("nls")
public final class AAdapter extends PAdapter
{
    private TIdentifier _name_;
    private final LinkedList<PUseMapping> _useMapping_ = new LinkedList<PUseMapping>();

    public AAdapter()
    {
        // Constructor
    }

    public AAdapter(
        @SuppressWarnings("hiding") TIdentifier _name_,
        @SuppressWarnings("hiding") List<PUseMapping> _useMapping_)
    {
        // Constructor
        setName(_name_);

        setUseMapping(_useMapping_);

    }

    @Override
    public Object clone()
    {
        return new AAdapter(
            cloneNode(this._name_),
            cloneList(this._useMapping_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAAdapter(this);
    }

    public TIdentifier getName()
    {
        return this._name_;
    }

    public void setName(TIdentifier node)
    {
        if(this._name_ != null)
        {
            this._name_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._name_ = node;
    }

    public LinkedList<PUseMapping> getUseMapping()
    {
        return this._useMapping_;
    }

    public void setUseMapping(List<PUseMapping> list)
    {
        this._useMapping_.clear();
        this._useMapping_.addAll(list);
        for(PUseMapping e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._name_)
            + toString(this._useMapping_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._name_ == child)
        {
            this._name_ = null;
            return;
        }

        if(this._useMapping_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._name_ == oldChild)
        {
            setName((TIdentifier) newChild);
            return;
        }

        for(ListIterator<PUseMapping> i = this._useMapping_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PUseMapping) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
