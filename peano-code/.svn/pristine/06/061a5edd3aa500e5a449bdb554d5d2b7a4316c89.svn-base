// This file is part of the Peano project. For conditions of distribution and 
// use, please see the copyright notice at www.peano-framework.org
#ifndef ___INCLUDE_GUARD_PREFIX___REPOSITORIES_REPOSITORY_ARRAY_STD_H_ 
#define ___INCLUDE_GUARD_PREFIX___REPOSITORIES_REPOSITORY_ARRAY_STD_H_ 


#include "__PROJECT_PATH__/repositories/Repository.h"
#include "__PROJECT_PATH__/records/RepositoryState.h"

#include "__PROJECT_PATH__/State.h"
#include "__PROJECT_PATH__/Vertex.h"
#include "__PROJECT_PATH__/Cell.h"

#include "peano/grid/Grid.h"
#include "peano/stacks/CellSTDStack.h"
#include "peano/stacks/VertexSTDStack.h"


__x__NONQUALIFIED_ADAPTER_TYPE__ #include "__PROJECT_PATH__/adapters/__NONQUALIFIED_ADAPTER_TYPE__.h" 


__OPEN_NAMESPACE__
      namespace repositories {
        class RepositorySTDStack;  
      }
__CLOSE_NAMESPACE__


class __NAMESPACE__::repositories::RepositorySTDStack: public __NAMESPACE__::repositories::Repository {
  private:
    static tarch::logging::Log _log;
  
    peano::geometry::Geometry& _geometry;
    
    typedef peano::stacks::CellSTDStack<__NAMESPACE__::Cell>       CellStack;
    typedef peano::stacks::VertexSTDStack<__NAMESPACE__::Vertex>   VertexStack;

    CellStack    _cellStack;
    VertexStack  _vertexStack;
    __NAMESPACE__::State          _solverState;
    peano::grid::RegularGridContainer<__NAMESPACE__::Vertex,__NAMESPACE__::Cell>  _regularGridContainer;
    peano::grid::TraversalOrderOnTopLevel                                         _traversalOrderOnTopLevel;

   __x__NONQUALIFIED_ADAPTER_TYPE__ peano::grid::Grid<__NAMESPACE__::Vertex,__NAMESPACE__::Cell,__NAMESPACE__::State,VertexStack,CellStack,__NAMESPACE__::adapters::__NONQUALIFIED_ADAPTER_TYPE__> _gridWith__NONQUALIFIED_ADAPTER_TYPE__;
     
   __NAMESPACE__::records::RepositoryState               _repositoryState;
   
   __x__NONQUALIFIED_ADAPTER_TYPE__ tarch::timing::Measurement _measure__NONQUALIFIED_ADAPTER_TYPE__CPUTime;
   __x__NONQUALIFIED_ADAPTER_TYPE__ tarch::timing::Measurement _measure__NONQUALIFIED_ADAPTER_TYPE__CalendarTime;
   
  public:
    RepositorySTDStack(
      peano::geometry::Geometry&                   geometry,
      const tarch::la::Vector<DIMENSIONS,double>&  domainSize,
      const tarch::la::Vector<DIMENSIONS,double>&  computationalDomainOffset
    );
    
    /**
     * Parallel Constructor
     *
     * Used in parallel mode only where the size of the domain is not known 
     * when the type of repository is determined.  
     */
    RepositorySTDStack(
      peano::geometry::Geometry&                   geometry
    );
    
    virtual ~RepositorySTDStack();

    virtual void restart(
      const tarch::la::Vector<DIMENSIONS,double>&  domainSize,
      const tarch::la::Vector<DIMENSIONS,double>&  domainOffset,
      int                                          domainLevel,
      const tarch::la::Vector<DIMENSIONS,int>&     positionOfCentralElementWithRespectToCoarserRemoteLevel
    );
         
    virtual void terminate();
        
    virtual __NAMESPACE__::State& getState();
    virtual const __NAMESPACE__::State& getState() const;
	
    virtual void iterate(int numberOfIterations=1, bool exchangeBoundaryVertices=true);

    virtual void writeCheckpoint(peano::grid::Checkpoint<__NAMESPACE__::Vertex, __NAMESPACE__::Cell> * const checkpoint); 
    virtual void readCheckpoint( peano::grid::Checkpoint<__NAMESPACE__::Vertex, __NAMESPACE__::Cell> const * const checkpoint );
    virtual peano::grid::Checkpoint<__NAMESPACE__::Vertex, __NAMESPACE__::Cell>* createEmptyCheckpoint(); 

   __x__NONQUALIFIED_ADAPTER_TYPE__ virtual void switchTo__NONQUALIFIED_ADAPTER_TYPE__();    
   __x__NONQUALIFIED_ADAPTER_TYPE__ virtual bool isActiveAdapter__NONQUALIFIED_ADAPTER_TYPE__() const;
   
    #ifdef Parallel
    virtual ContinueCommand continueToIterate();
    virtual void runGlobalStep();
    #endif

    virtual void setMaximumMemoryFootprintForTemporaryRegularGrids(double value);
    virtual void logIterationStatistics() const;
    virtual void clearIterationStatistics();
};


#endif
