\section{Logging, statistics, assertions}
\label{section:logging}



\chapterDescription
  {
    There are no real examples coming along with this chapter, but you might
    want to use its topics for any project.
  }
  {
    Chapter \ref{chapter:quickstart}.
  }


%\subsection{The user interface}

%\subsection{Repository fields}

\subsection{Logging}

Peano relies on a plain interface to write out user information. 
All constituents of this interface are collected in the package
\texttt{tarch::logging}.
Documentation on this package can be found in the corresponding header files,
files ending with \texttt{.doxys}, or the Peano webpage (section on sources).
The usage paradigm is simple:

\begin{enumerate}
  \item Each class that wants to write logging information requires an instance
  of class \texttt{tarch::logging::Log}. As such an instance is required per
  class, it makes sense to make this field a static one.
  \begin{code}
  #include "tarch/logging/Log.h"
  ...
  class MyClass {
    private:
      static tarch::logging::Log  _log;
  };
  
  tarch::logging::Log  MyClass::_log( "MyClass" );
  \end{code}
  For most auto-generated classes, the PDT already creates the \texttt{\_log}
  instance. Please keep to the nomenclature of the class field to make all
  macros work. Please use as string argument in the constructor the fully
  qualified class name.
  \item Whenever you want to log, you should use Log's' operations to write the
  messages. Alternatively, you may want to use the log macros from
  \texttt{Log.h}. They work with stringstreams internally, i.e.~you may write
  things along the lines
  \begin{code}
logInfo( "runAsMaster(...)", "time step " << i << ": dt=" << dt );
  \end{code}
  where you concatenate the stream with data.
\end{enumerate}

Peano offers three levels of logging:
\begin{itemize}
  \item {\bf Info}. Should be used to inform your user about the application's
  state.
  \item {\bf Warning}. Should be used to inform your user about bothering
  behaviour.
  The MPI code uses it, e.g., if many messages arrive in a different order than
  expected. Messages written to the warning level are piped to
  \texttt{cerr}.
  \item {\bf Error}. Should be used for errors. Is piped to \texttt{cerr} as
  well.
  \item {\bf Debug}. Should be used to write debug data. It goes to
  \texttt{cout} and all debug data is removed if you do not translate with the compile flag
  \texttt{-DDebug}. Notably, use the \texttt{logDebug} macros when you write to
  the debug level, as all required log operations then are removed by the
  compiler once you create a release version of your code.
\end{itemize}



\subsubsection{Logging device: CommandLineLogger}

The \texttt{Log} instance forwards the information to a logger. By default, this
is the \\ \texttt{tarch::logging::CommandLineLogger} which writes information
in a table-like format. You may want to write your own alternative
implementation of the logger if you require formats such as XML.

Alternatively, you can configure the command line logger to plot only those
fields that are of relevance to you.
For this, the logger provides a particular setter.
Please consult the header or the webpage for details on the semantics of the
arguments:
\begin{code}
  tarch::logging::CommandLineLogger::getInstance().setLogFormat(
    " ", true, false, false, true, true, "helmholtz.log-file" );
\end{code} 

\noindent
This interface also allows you to pipe the output into a file rather than to the
terminal.
This is particular useful for MPI applications, as each rank is assigned a file
of its own and messages are not screwed up.

Typically, the logger is configured in the \texttt{main} of the application.

\subsubsection{Log filters}

The amount of log information often becomes hard to track; notably if you run in
debug mode.
Often, you are interested only in a subset of all log messages.
For this, Peano offers log filters which provide a blacklist and whitelist
mechanism to filter messages before they are written.
A log filter entry is created by 
\begin{code}
    tarch::logging::CommandLineLogger::getInstance().addFilterListEntry( 
      ::tarch::logging::CommandLineLogger::FilterListEntry( 
        "debug", -1, "myproject", false ) );
\end{code} 
\noindent
and again this is something that is typically done in the \texttt{main}.
See the \texttt{CommandLineLogger} header for details on the log filters.


Configuring log filters in your source code is a convenient option when you
start a new project.
On the long run, it is cumbersome if you have to recompile every time you want
different log information.
Therefore, the \texttt{CommandLineLogger} also offers a routine that allows you
to load log filter entries from a text file.
This facilitates work with log filters.


\subsubsection{Tracing}

Peano uses tracing command in several places. 
Consult the mapping classes generated by the PDT, e.g. 
Tracing commands are basically debug statements, and once you compile your code
without \texttt{-DDebug} or with log filters on the debug level, tracing
messages are removed from the output.
In Peano, trace messages are used to track when a method is entered and when the
code leaves a routine.
They can be found all over the code.
The additional benefit of the trace routines compared to pure debug statements
is that the tracings also apply a well-suited indentation, i.e.~when you enter a
routine, all messages afterwards are indented by two spaces (default; can be
reconfigured) afterwards until you leave this operation again.


\begin{remark}
If you want to get familiar with the program workflow, you might want to use a
debugger to step to your program.
This is time consuming.
Another option is to configure your log filters such that only the trace
messages (debug messages) from the mapping are printed to the terminal/a file.
You can then run through this output and see which operations from the mapping
are called at which time.
\end{remark}



% \subsection{Using logging and tracing}

% \subsection{Statistics}

% \subsection{Assertions}



% vertex enumerator