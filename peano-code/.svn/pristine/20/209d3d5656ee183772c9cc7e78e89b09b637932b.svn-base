/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.peano.pdt.lexer;

import java.io.*;
import org.peano.pdt.node.*;

@SuppressWarnings("nls")
public class Lexer
{
    protected Token token;
    protected State state = State.INITIAL;

    private PushbackReader in;
    private int line;
    private int pos;
    private boolean cr;
    private boolean eof;
    private final StringBuffer text = new StringBuffer();

    @SuppressWarnings("unused")
    protected void filter() throws LexerException, IOException
    {
        // Do nothing
    }

    public Lexer(@SuppressWarnings("hiding") PushbackReader in)
    {
        this.in = in;
    }
 
    public Token peek() throws LexerException, IOException
    {
        while(this.token == null)
        {
            this.token = getToken();
            filter();
        }

        return this.token;
    }

    public Token next() throws LexerException, IOException
    {
        while(this.token == null)
        {
            this.token = getToken();
            filter();
        }

        Token result = this.token;
        this.token = null;
        return result;
    }

    protected Token getToken() throws IOException, LexerException
    {
        int dfa_state = 0;

        int start_pos = this.pos;
        int start_line = this.line;

        int accept_state = -1;
        int accept_token = -1;
        int accept_length = -1;
        int accept_pos = -1;
        int accept_line = -1;

        @SuppressWarnings("hiding") int[][][] gotoTable = Lexer.gotoTable[this.state.id()];
        @SuppressWarnings("hiding") int[] accept = Lexer.accept[this.state.id()];
        this.text.setLength(0);

        while(true)
        {
            int c = getChar();

            if(c != -1)
            {
                switch(c)
                {
                case 10:
                    if(this.cr)
                    {
                        this.cr = false;
                    }
                    else
                    {
                        this.line++;
                        this.pos = 0;
                    }
                    break;
                case 13:
                    this.line++;
                    this.pos = 0;
                    this.cr = true;
                    break;
                default:
                    this.pos++;
                    this.cr = false;
                    break;
                }

                this.text.append((char) c);

                do
                {
                    int oldState = (dfa_state < -1) ? (-2 -dfa_state) : dfa_state;

                    dfa_state = -1;

                    int[][] tmp1 =  gotoTable[oldState];
                    int low = 0;
                    int high = tmp1.length - 1;

                    while(low <= high)
                    {
                        int middle = (low + high) / 2;
                        int[] tmp2 = tmp1[middle];

                        if(c < tmp2[0])
                        {
                            high = middle - 1;
                        }
                        else if(c > tmp2[1])
                        {
                            low = middle + 1;
                        }
                        else
                        {
                            dfa_state = tmp2[2];
                            break;
                        }
                    }
                }while(dfa_state < -1);
            }
            else
            {
                dfa_state = -1;
            }

            if(dfa_state >= 0)
            {
                if(accept[dfa_state] != -1)
                {
                    accept_state = dfa_state;
                    accept_token = accept[dfa_state];
                    accept_length = this.text.length();
                    accept_pos = this.pos;
                    accept_line = this.line;
                }
            }
            else
            {
                if(accept_state != -1)
                {
                    switch(accept_token)
                    {
                    case 0:
                        {
                            @SuppressWarnings("hiding") Token token = new0(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 1:
                        {
                            @SuppressWarnings("hiding") Token token = new1(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 2:
                        {
                            @SuppressWarnings("hiding") Token token = new2(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 3:
                        {
                            @SuppressWarnings("hiding") Token token = new3(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 4:
                        {
                            @SuppressWarnings("hiding") Token token = new4(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 5:
                        {
                            @SuppressWarnings("hiding") Token token = new5(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 6:
                        {
                            @SuppressWarnings("hiding") Token token = new6(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 7:
                        {
                            @SuppressWarnings("hiding") Token token = new7(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 8:
                        {
                            @SuppressWarnings("hiding") Token token = new8(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 9:
                        {
                            @SuppressWarnings("hiding") Token token = new9(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 10:
                        {
                            @SuppressWarnings("hiding") Token token = new10(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 11:
                        {
                            @SuppressWarnings("hiding") Token token = new11(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 12:
                        {
                            @SuppressWarnings("hiding") Token token = new12(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 13:
                        {
                            @SuppressWarnings("hiding") Token token = new13(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 14:
                        {
                            @SuppressWarnings("hiding") Token token = new14(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 15:
                        {
                            @SuppressWarnings("hiding") Token token = new15(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 16:
                        {
                            @SuppressWarnings("hiding") Token token = new16(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 17:
                        {
                            @SuppressWarnings("hiding") Token token = new17(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 18:
                        {
                            @SuppressWarnings("hiding") Token token = new18(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 19:
                        {
                            @SuppressWarnings("hiding") Token token = new19(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 20:
                        {
                            @SuppressWarnings("hiding") Token token = new20(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 21:
                        {
                            @SuppressWarnings("hiding") Token token = new21(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 22:
                        {
                            @SuppressWarnings("hiding") Token token = new22(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 23:
                        {
                            @SuppressWarnings("hiding") Token token = new23(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 24:
                        {
                            @SuppressWarnings("hiding") Token token = new24(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 25:
                        {
                            @SuppressWarnings("hiding") Token token = new25(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 26:
                        {
                            @SuppressWarnings("hiding") Token token = new26(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 27:
                        {
                            @SuppressWarnings("hiding") Token token = new27(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 28:
                        {
                            @SuppressWarnings("hiding") Token token = new28(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 29:
                        {
                            @SuppressWarnings("hiding") Token token = new29(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 30:
                        {
                            @SuppressWarnings("hiding") Token token = new30(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 31:
                        {
                            @SuppressWarnings("hiding") Token token = new31(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 32:
                        {
                            @SuppressWarnings("hiding") Token token = new32(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 33:
                        {
                            @SuppressWarnings("hiding") Token token = new33(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 34:
                        {
                            @SuppressWarnings("hiding") Token token = new34(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 35:
                        {
                            @SuppressWarnings("hiding") Token token = new35(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 36:
                        {
                            @SuppressWarnings("hiding") Token token = new36(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 37:
                        {
                            @SuppressWarnings("hiding") Token token = new37(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 38:
                        {
                            @SuppressWarnings("hiding") Token token = new38(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    }
                }
                else
                {
                    if(this.text.length() > 0)
                    {
                        throw new LexerException(
                            "[" + (start_line + 1) + "," + (start_pos + 1) + "]" +
                            " Unknown token: " + this.text);
                    }

                    @SuppressWarnings("hiding") EOF token = new EOF(
                        start_line + 1,
                        start_pos + 1);
                    return token;
                }
            }
        }
    }

    Token new0(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTokenVertex(line, pos); }
    Token new1(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTokenCell(line, pos); }
    Token new2(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTokenState(line, pos); }
    Token new3(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTokenComponent(line, pos); }
    Token new4(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTokenNamespace(line, pos); }
    Token new5(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTokenHeapDastgenFile(line, pos); }
    Token new6(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTokenRead(line, pos); }
    Token new7(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTokenWrite(line, pos); }
    Token new8(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTokenScalarDouble(line, pos); }
    Token new9(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTokenScalarInt(line, pos); }
    Token new10(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTokenScalarComplex(line, pos); }
    Token new11(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTokenVectorDDouble(line, pos); }
    Token new12(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTokenVectorDInt(line, pos); }
    Token new13(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTokenVectorDComplex(line, pos); }
    Token new14(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTokenVectorTwoPowDDouble(line, pos); }
    Token new15(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTokenVectorTwoPowDInt(line, pos); }
    Token new16(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTokenVectorTwoPowDComplex(line, pos); }
    Token new17(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTokenVectorFivePowDDouble(line, pos); }
    Token new18(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTokenVectorFivePowDInt(line, pos); }
    Token new19(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTokenVectorFivePowDComplex(line, pos); }
    Token new20(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTokenStencilDouble(line, pos); }
    Token new21(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTokenStencilInt(line, pos); }
    Token new22(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTokenStencilComplex(line, pos); }
    Token new23(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTokenName(line, pos); }
    Token new24(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTokenDastgenFile(line, pos); }
    Token new25(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTokenEventMapping(line, pos); }
    Token new26(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTokenOpenBracket(line, pos); }
    Token new27(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTokenCloseBracket(line, pos); }
    Token new28(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTokenComma(line, pos); }
    Token new29(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTokenAdapter(line, pos); }
    Token new30(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTokenMergeWithUserDefinedAdapter(line, pos); }
    Token new31(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTokenMergeWithPredefinedAdapter(line, pos); }
    Token new32(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TBlank(text, line, pos); }
    Token new33(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TIdentifier(text, line, pos); }
    Token new34(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TFilename(text, line, pos); }
    Token new35(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TNamespace(text, line, pos); }
    Token new36(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTraditionalComment(text, line, pos); }
    Token new37(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TDocumentationComment(text, line, pos); }
    Token new38(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TEndOfLineComment(text, line, pos); }

    private int getChar() throws IOException
    {
        if(this.eof)
        {
            return -1;
        }

        int result = this.in.read();

        if(result == -1)
        {
            this.eof = true;
        }

        return result;
    }

    private void pushBack(int acceptLength) throws IOException
    {
        int length = this.text.length();
        for(int i = length - 1; i >= acceptLength; i--)
        {
            this.eof = false;

            this.in.unread(this.text.charAt(i));
        }
    }

    protected void unread(@SuppressWarnings("hiding") Token token) throws IOException
    {
        @SuppressWarnings("hiding") String text = token.getText();
        int length = text.length();

        for(int i = length - 1; i >= 0; i--)
        {
            this.eof = false;

            this.in.unread(text.charAt(i));
        }

        this.pos = token.getPos() - 1;
        this.line = token.getLine() - 1;
    }

    private String getText(int acceptLength)
    {
        StringBuffer s = new StringBuffer(acceptLength);
        for(int i = 0; i < acceptLength; i++)
        {
            s.append(this.text.charAt(i));
        }

        return s.toString();
    }

    private static int[][][][] gotoTable;
/*  {
        { // INITIAL
            {{9, 9, 1}, {10, 10, 2}, {13, 13, 3}, {32, 32, 4}, {40, 40, 5}, {41, 41, 6}, {44, 44, 7}, {45, 45, 8}, {46, 46, 9}, {47, 47, 10}, {48, 57, 11}, {58, 58, 12}, {65, 90, 13}, {95, 95, 14}, {97, 97, 15}, {98, 98, 13}, {99, 99, 16}, {100, 100, 17}, {101, 101, 18}, {102, 103, 13}, {104, 104, 19}, {105, 105, 20}, {106, 108, 13}, {109, 109, 21}, {110, 110, 22}, {111, 113, 13}, {114, 114, 23}, {115, 115, 24}, {116, 117, 13}, {118, 118, 25}, {119, 119, 26}, {120, 122, 13}, },
            {{9, 32, -2}, },
            {{9, 32, -2}, },
            {{9, 32, -2}, },
            {{9, 32, -2}, },
            {},
            {},
            {},
            {{45, 45, 8}, {46, 46, 27}, {47, 47, 28}, {48, 57, 29}, {65, 90, 30}, {95, 95, 31}, {97, 122, 30}, },
            {{45, 46, -2}, {47, 47, 28}, {48, 57, 11}, {58, 58, 32}, {65, 90, 33}, {95, 95, 34}, {97, 122, 33}, },
            {{42, 42, 35}, {45, 46, -10}, {47, 47, 36}, {48, 122, -10}, },
            {{45, 122, -11}, },
            {{58, 58, 37}, },
            {{45, 47, -11}, {48, 57, 38}, {58, 58, 32}, {65, 90, 39}, {95, 95, 40}, {97, 122, 39}, },
            {{45, 122, -15}, },
            {{45, 95, -15}, {97, 99, 39}, {100, 100, 41}, {101, 122, 39}, },
            {{45, 95, -15}, {97, 100, 39}, {101, 101, 42}, {102, 110, 39}, {111, 111, 43}, {112, 122, 39}, },
            {{45, 95, -15}, {97, 97, 44}, {98, 122, 39}, },
            {{45, 95, -15}, {97, 117, 39}, {118, 118, 45}, {119, 122, 39}, },
            {{45, 100, -18}, {101, 101, 46}, {102, 122, 39}, },
            {{45, 95, -15}, {97, 109, 39}, {110, 110, 47}, {111, 122, 39}, },
            {{45, 100, -18}, {101, 101, 48}, {102, 122, 39}, },
            {{45, 95, -15}, {97, 97, 49}, {98, 122, 39}, },
            {{45, 100, -18}, {101, 101, 50}, {102, 122, 39}, },
            {{45, 95, -15}, {97, 98, 39}, {99, 99, 51}, {100, 115, 39}, {116, 116, 52}, {117, 122, 39}, },
            {{45, 100, -18}, {101, 101, 53}, {102, 122, 39}, },
            {{45, 95, -15}, {97, 113, 39}, {114, 114, 54}, {115, 122, 39}, },
            {{45, 122, -10}, },
            {{45, 46, -10}, {48, 122, -10}, },
            {{45, 122, -10}, },
            {{45, 122, -10}, },
            {{45, 122, -10}, },
            {{58, 58, 55}, },
            {{45, 122, -11}, },
            {{45, 122, -11}, },
            {{0, 41, 56}, {42, 42, 57}, {43, 127, 56}, },
            {{0, 9, 58}, {10, 10, 59}, {11, 12, 58}, {13, 13, 60}, {14, 127, 58}, },
            {{46, 46, 61}, {48, 57, 62}, {65, 90, 63}, {95, 95, 64}, {97, 122, 63}, },
            {{45, 122, -15}, },
            {{45, 122, -15}, },
            {{45, 122, -15}, },
            {{45, 95, -15}, {97, 97, 65}, {98, 122, 39}, },
            {{45, 95, -15}, {97, 107, 39}, {108, 108, 66}, {109, 122, 39}, },
            {{45, 95, -15}, {97, 108, 39}, {109, 109, 67}, {110, 122, 39}, },
            {{45, 95, -15}, {97, 114, 39}, {115, 115, 68}, {116, 122, 39}, },
            {{45, 100, -18}, {101, 101, 69}, {102, 122, 39}, },
            {{45, 95, -15}, {97, 97, 70}, {98, 122, 39}, },
            {{45, 95, -15}, {97, 115, 39}, {116, 116, 71}, {117, 122, 39}, },
            {{45, 113, -28}, {114, 114, 72}, {115, 122, 39}, },
            {{45, 108, -45}, {109, 109, 73}, {110, 122, 39}, },
            {{45, 95, -15}, {97, 97, 74}, {98, 122, 39}, },
            {{45, 95, -15}, {97, 97, 75}, {98, 122, 39}, },
            {{45, 95, -15}, {97, 97, 76}, {98, 100, 39}, {101, 101, 77}, {102, 122, 39}, },
            {{45, 98, -26}, {99, 99, 78}, {100, 113, 39}, {114, 114, 79}, {115, 122, 39}, },
            {{45, 95, -15}, {97, 104, 39}, {105, 105, 80}, {106, 122, 39}, },
            {{46, 122, -39}, },
            {{0, 41, 56}, {42, 42, 81}, {43, 127, 56}, },
            {{0, 41, 82}, {42, 42, 83}, {43, 46, 82}, {47, 47, 84}, {48, 127, 82}, },
            {{0, 127, -38}, },
            {},
            {{10, 10, 85}, },
            {{46, 57, -39}, {58, 58, 32}, {65, 122, -39}, },
            {{46, 122, -63}, },
            {{46, 122, -63}, },
            {{46, 122, -63}, },
            {{45, 95, -15}, {97, 111, 39}, {112, 112, 86}, {113, 122, 39}, },
            {{45, 107, -44}, {108, 108, 87}, {109, 122, 39}, },
            {{45, 111, -67}, {112, 112, 88}, {113, 122, 39}, },
            {{45, 115, -49}, {116, 116, 89}, {117, 122, 39}, },
            {{45, 109, -22}, {110, 110, 90}, {111, 122, 39}, },
            {{45, 111, -67}, {112, 112, 91}, {113, 122, 39}, },
            {{45, 100, -18}, {101, 101, 92}, {102, 122, 39}, },
            {{45, 95, -15}, {97, 102, 39}, {103, 103, 93}, {104, 122, 39}, },
            {{45, 100, -18}, {101, 101, 94}, {102, 122, 39}, },
            {{45, 99, -17}, {100, 100, 95}, {101, 122, 39}, },
            {{45, 107, -44}, {108, 108, 96}, {109, 122, 39}, },
            {{45, 115, -49}, {116, 116, 97}, {117, 122, 39}, },
            {{45, 109, -22}, {110, 110, 98}, {111, 122, 39}, },
            {{45, 115, -49}, {116, 116, 99}, {117, 122, 39}, },
            {{45, 115, -49}, {116, 116, 100}, {117, 122, 39}, },
            {{45, 115, -49}, {116, 116, 101}, {117, 122, 39}, },
            {{0, 41, 102}, {42, 42, 81}, {43, 46, 102}, {47, 47, 103}, {48, 127, 102}, },
            {{0, 41, 104}, {42, 42, 105}, {43, 127, 104}, },
            {{0, 127, -59}, },
            {},
            {},
            {{45, 115, -49}, {116, 116, 106}, {117, 122, 39}, },
            {{45, 57, -15}, {58, 58, 107}, {65, 122, -15}, },
            {{45, 95, -15}, {97, 110, 39}, {111, 111, 108}, {112, 122, 39}, },
            {{45, 102, -74}, {103, 103, 109}, {104, 122, 39}, },
            {{45, 115, -49}, {116, 116, 110}, {117, 122, 39}, },
            {{45, 45, 111}, {46, 122, -15}, },
            {{45, 113, -28}, {114, 114, 112}, {115, 122, 39}, },
            {{45, 100, -18}, {101, 101, 113}, {102, 122, 39}, },
            {{45, 57, -15}, {58, 58, 114}, {65, 114, -46}, {115, 115, 115}, {116, 122, 39}, },
            {{45, 122, -15}, },
            {{45, 95, -15}, {97, 97, 116}, {98, 122, 39}, },
            {{45, 100, -18}, {101, 101, 117}, {102, 122, 39}, },
            {{45, 98, -26}, {99, 99, 118}, {100, 122, 39}, },
            {{45, 110, -90}, {111, 111, 119}, {112, 122, 39}, },
            {{45, 100, -18}, {101, 101, 120}, {102, 122, 39}, },
            {{45, 100, -18}, {101, 101, 121}, {102, 122, 39}, },
            {{0, 41, 122}, {42, 42, 123}, {43, 127, 122}, },
            {},
            {{0, 127, -84}, },
            {{0, 41, 82}, {42, 42, 105}, {43, 127, -59}, },
            {{45, 100, -18}, {101, 101, 124}, {102, 122, 39}, },
            {{58, 58, 55}, },
            {{45, 109, -22}, {110, 110, 125}, {111, 122, 39}, },
            {{45, 100, -18}, {101, 101, 126}, {102, 122, 39}, },
            {{45, 45, 127}, {46, 122, -15}, },
            {{45, 95, -10}, {97, 99, 30}, {100, 100, 128}, {101, 122, 30}, },
            {{45, 102, -74}, {103, 103, 129}, {104, 122, 39}, },
            {{45, 45, 130}, {46, 122, -15}, },
            {{58, 58, 55}, },
            {{45, 111, -67}, {112, 112, 131}, {113, 122, 39}, },
            {{45, 113, -28}, {114, 114, 132}, {115, 122, 39}, },
            {{45, 57, -15}, {58, 58, 133}, {65, 122, -15}, },
            {{45, 104, -56}, {105, 105, 134}, {106, 122, 39}, },
            {{45, 113, -28}, {114, 114, 135}, {115, 122, 39}, },
            {{45, 95, -15}, {97, 119, 39}, {120, 120, 136}, {121, 122, 39}, },
            {{45, 122, -15}, },
            {{0, 127, -104}, },
            {{0, 41, 102}, {42, 42, 123}, {43, 127, -83}, },
            {{45, 113, -28}, {114, 114, 137}, {115, 122, 39}, },
            {{45, 100, -18}, {101, 101, 138}, {102, 122, 39}, },
            {{45, 109, -22}, {110, 110, 139}, {111, 122, 39}, },
            {{45, 95, -10}, {97, 108, 30}, {109, 109, 140}, {110, 122, 30}, },
            {{45, 95, -10}, {97, 97, 141}, {98, 122, 30}, },
            {{45, 113, -28}, {114, 114, 142}, {115, 122, 39}, },
            {{45, 95, -10}, {97, 118, 30}, {119, 119, 143}, {120, 122, 30}, },
            {{45, 95, -15}, {97, 97, 144}, {98, 122, 39}, },
            {{40, 40, 145}, {45, 122, -15}, },
            {{58, 58, 55}, },
            {{45, 107, -44}, {108, 108, 146}, {109, 122, 39}, },
            {{40, 40, 147}, {45, 47, -11}, {48, 49, 38}, {50, 50, 148}, {51, 57, 38}, {58, 122, -15}, },
            {{45, 57, -15}, {58, 58, 149}, {65, 122, -15}, },
            {{45, 57, -15}, {58, 58, 150}, {65, 122, -15}, },
            {{45, 109, -22}, {110, 110, 151}, {111, 122, 39}, },
            {{45, 45, 152}, {46, 122, -15}, },
            {{45, 95, -10}, {97, 97, 153}, {98, 122, 30}, },
            {{45, 95, -10}, {97, 114, 30}, {115, 115, 154}, {116, 122, 30}, },
            {{45, 104, -56}, {105, 105, 155}, {106, 122, 39}, },
            {{45, 95, -10}, {97, 104, 30}, {105, 105, 156}, {106, 122, 30}, },
            {{45, 98, -26}, {99, 99, 157}, {100, 122, 39}, },
            {{99, 99, 158}, {100, 100, 159}, {105, 105, 160}, },
            {{40, 40, 161}, {45, 122, -15}, },
            {{99, 99, 162}, {100, 100, 163}, {105, 105, 164}, },
            {{45, 58, -15}, {65, 79, 39}, {80, 80, 165}, {81, 90, 39}, {95, 122, -15}, },
            {{58, 58, 55}, },
            {{58, 58, 55}, },
            {{45, 115, -49}, {116, 116, 166}, {117, 122, 39}, },
            {{45, 95, -10}, {97, 101, 30}, {102, 102, 167}, {103, 122, 30}, },
            {{45, 95, -10}, {97, 111, 30}, {112, 112, 168}, {113, 122, 30}, },
            {{45, 95, -10}, {97, 115, 30}, {116, 116, 169}, {117, 122, 30}, },
            {{45, 99, -17}, {100, 100, 170}, {101, 122, 39}, },
            {{45, 115, -156}, {116, 116, 171}, {117, 122, 30}, },
            {{45, 100, -18}, {101, 101, 172}, {102, 122, 39}, },
            {{111, 111, 173}, },
            {{111, 111, 174}, },
            {{110, 110, 175}, },
            {{99, 99, 176}, {100, 100, 177}, {105, 105, 178}, },
            {{111, 111, 179}, },
            {{111, 111, 180}, },
            {{110, 110, 181}, },
            {{45, 110, -90}, {111, 111, 182}, {112, 122, 39}, },
            {{45, 57, -15}, {58, 58, 183}, {65, 122, -15}, },
            {{45, 104, -145}, {105, 105, 184}, {106, 122, 30}, },
            {{45, 111, -155}, {112, 112, 185}, {113, 122, 30}, },
            {{45, 95, -10}, {97, 102, 30}, {103, 103, 186}, {104, 122, 30}, },
            {{45, 45, 187}, {46, 122, -15}, },
            {{45, 95, -10}, {97, 103, 30}, {104, 104, 188}, {105, 122, 30}, },
            {{45, 57, -15}, {58, 58, 189}, {65, 122, -15}, },
            {{109, 109, 190}, },
            {{117, 117, 191}, },
            {{116, 116, 192}, },
            {{111, 111, 193}, },
            {{111, 111, 194}, },
            {{110, 110, 195}, },
            {{109, 109, 196}, },
            {{117, 117, 197}, },
            {{116, 116, 198}, },
            {{45, 95, -15}, {97, 118, 39}, {119, 119, 199}, {120, 122, 39}, },
            {{58, 58, 55}, },
            {{45, 95, -10}, {97, 107, 30}, {108, 108, 200}, {109, 122, 30}, },
            {{45, 104, -145}, {105, 105, 201}, {106, 122, 30}, },
            {{45, 95, -10}, {97, 100, 30}, {101, 101, 202}, {102, 122, 30}, },
            {{45, 95, -10}, {97, 110, 30}, {111, 111, 203}, {112, 122, 30}, },
            {{45, 45, 204}, {46, 122, -10}, },
            {{58, 58, 55}, },
            {{112, 112, 205}, },
            {{98, 98, 206}, },
            {{41, 41, 207}, },
            {{109, 109, 208}, },
            {{117, 117, 209}, },
            {{116, 116, 210}, },
            {{112, 112, 211}, },
            {{98, 98, 212}, },
            {{41, 41, 213}, },
            {{45, 58, -15}, {65, 67, 39}, {68, 68, 214}, {69, 90, 39}, {95, 122, -15}, },
            {{45, 100, -188}, {101, 101, 215}, {102, 122, 30}, },
            {{45, 95, -10}, {97, 109, 30}, {110, 110, 216}, {111, 122, 30}, },
            {{45, 109, -203}, {110, 110, 217}, {111, 122, 30}, },
            {{45, 111, -155}, {112, 112, 218}, {113, 122, 30}, },
            {{45, 111, -155}, {112, 112, 219}, {113, 116, 30}, {117, 117, 220}, {118, 122, 30}, },
            {{108, 108, 221}, },
            {{108, 108, 222}, },
            {{58, 58, 223}, },
            {{112, 112, 224}, },
            {{98, 98, 225}, },
            {{41, 41, 226}, },
            {{108, 108, 227}, },
            {{108, 108, 228}, },
            {{58, 58, 229}, },
            {{40, 40, 230}, {45, 122, -15}, },
            {{45, 57, -10}, {58, 58, 231}, {65, 122, -10}, },
            {{45, 102, -171}, {103, 103, 232}, {104, 122, 30}, },
            {{45, 45, 233}, {46, 122, -10}, },
            {{45, 100, -188}, {101, 101, 234}, {102, 122, 30}, },
            {{45, 95, -10}, {97, 113, 30}, {114, 114, 235}, {115, 122, 30}, },
            {{45, 114, -143}, {115, 115, 236}, {116, 122, 30}, },
            {{101, 101, 237}, },
            {{101, 101, 238}, },
            {},
            {{108, 108, 239}, },
            {{108, 108, 240}, },
            {{58, 58, 241}, },
            {{101, 101, 242}, },
            {{101, 101, 243}, },
            {},
            {{99, 99, 244}, {100, 100, 245}, {105, 105, 246}, },
            {},
            {{45, 57, -10}, {58, 58, 247}, {65, 122, -10}, },
            {{45, 101, -154}, {102, 102, 248}, {103, 122, 30}, },
            {{45, 113, -221}, {114, 114, 249}, {115, 122, 30}, },
            {{45, 100, -188}, {101, 101, 250}, {102, 122, 30}, },
            {{45, 100, -188}, {101, 101, 251}, {102, 122, 30}, },
            {{120, 120, 252}, },
            {{41, 41, 253}, },
            {{101, 101, 254}, },
            {{101, 101, 255}, },
            {},
            {{120, 120, 256}, },
            {{41, 41, 257}, },
            {{111, 111, 258}, },
            {{111, 111, 259}, },
            {{110, 110, 260}, },
            {},
            {{45, 104, -145}, {105, 105, 261}, {106, 122, 30}, },
            {{45, 95, -10}, {97, 97, 262}, {98, 122, 30}, },
            {{45, 99, -113}, {100, 100, 263}, {101, 122, 30}, },
            {{45, 113, -221}, {114, 114, 264}, {115, 122, 30}, },
            {{41, 41, 265}, },
            {{58, 58, 266}, },
            {{120, 120, 267}, },
            {{41, 41, 268}, },
            {{41, 41, 269}, },
            {{58, 58, 270}, },
            {{109, 109, 271}, },
            {{117, 117, 272}, },
            {{116, 116, 273}, },
            {{45, 107, -186}, {108, 108, 274}, {109, 122, 30}, },
            {{45, 115, -156}, {116, 116, 275}, {117, 122, 30}, },
            {{45, 100, -188}, {101, 101, 276}, {102, 122, 30}, },
            {{45, 45, 277}, {46, 122, -10}, },
            {{58, 58, 278}, },
            {},
            {{41, 41, 279}, },
            {{58, 58, 280}, },
            {{58, 58, 281}, },
            {},
            {{112, 112, 282}, },
            {{98, 98, 283}, },
            {{41, 41, 284}, },
            {{45, 100, -188}, {101, 101, 285}, {102, 122, 30}, },
            {{45, 110, -189}, {111, 111, 286}, {112, 122, 30}, },
            {{45, 101, -154}, {102, 102, 287}, {103, 122, 30}, },
            {{45, 99, -113}, {100, 100, 288}, {101, 122, 30}, },
            {},
            {{58, 58, 289}, },
            {},
            {},
            {{108, 108, 290}, },
            {{108, 108, 291}, },
            {{58, 58, 292}, },
            {{45, 57, -10}, {58, 58, 293}, {65, 122, -10}, },
            {{45, 113, -221}, {114, 114, 294}, {115, 122, 30}, },
            {{45, 104, -145}, {105, 105, 295}, {106, 122, 30}, },
            {{45, 100, -188}, {101, 101, 296}, {102, 122, 30}, },
            {},
            {{101, 101, 297}, },
            {{101, 101, 298}, },
            {},
            {},
            {{40, 40, 299}, {45, 122, -10}, },
            {{45, 109, -203}, {110, 110, 300}, {111, 122, 30}, },
            {{45, 101, -154}, {102, 102, 301}, {103, 122, 30}, },
            {{120, 120, 302}, },
            {{41, 41, 303}, },
            {{99, 99, 304}, {100, 100, 305}, {105, 105, 306}, },
            {{45, 100, -188}, {101, 101, 307}, {102, 122, 30}, },
            {{45, 104, -145}, {105, 105, 308}, {106, 122, 30}, },
            {{41, 41, 309}, },
            {{58, 58, 310}, },
            {{111, 111, 311}, },
            {{111, 111, 312}, },
            {{110, 110, 313}, },
            {{45, 99, -113}, {100, 100, 314}, {101, 122, 30}, },
            {{45, 109, -203}, {110, 110, 315}, {111, 122, 30}, },
            {{58, 58, 316}, },
            {},
            {{109, 109, 317}, },
            {{117, 117, 318}, },
            {{116, 116, 319}, },
            {{45, 45, 320}, {46, 122, -10}, },
            {{45, 100, -188}, {101, 101, 321}, {102, 122, 30}, },
            {},
            {{112, 112, 322}, },
            {{98, 98, 323}, },
            {{41, 41, 324}, },
            {{45, 108, -129}, {109, 109, 325}, {110, 122, 30}, },
            {{45, 99, -113}, {100, 100, 326}, {101, 122, 30}, },
            {{108, 108, 327}, },
            {{108, 108, 328}, },
            {{58, 58, 329}, },
            {{45, 95, -10}, {97, 97, 330}, {98, 122, 30}, },
            {{45, 45, 331}, {46, 122, -10}, },
            {{101, 101, 332}, },
            {{101, 101, 333}, },
            {},
            {{45, 111, -155}, {112, 112, 334}, {113, 122, 30}, },
            {{45, 108, -129}, {109, 109, 335}, {110, 122, 30}, },
            {{120, 120, 336}, },
            {{41, 41, 337}, },
            {{45, 111, -155}, {112, 112, 338}, {113, 122, 30}, },
            {{45, 95, -10}, {97, 97, 339}, {98, 122, 30}, },
            {{41, 41, 340}, },
            {{58, 58, 341}, },
            {{45, 104, -145}, {105, 105, 342}, {106, 122, 30}, },
            {{45, 111, -155}, {112, 112, 343}, {113, 122, 30}, },
            {{58, 58, 344}, },
            {},
            {{45, 109, -203}, {110, 110, 345}, {111, 122, 30}, },
            {{45, 111, -155}, {112, 112, 346}, {113, 122, 30}, },
            {},
            {{45, 102, -171}, {103, 103, 347}, {104, 122, 30}, },
            {{45, 104, -145}, {105, 105, 348}, {106, 122, 30}, },
            {{45, 57, -10}, {58, 58, 349}, {65, 122, -10}, },
            {{45, 109, -203}, {110, 110, 350}, {111, 122, 30}, },
            {},
            {{45, 102, -171}, {103, 103, 351}, {104, 122, 30}, },
            {{45, 57, -10}, {58, 58, 352}, {65, 122, -10}, },
            {},
        }
    };*/

    private static int[][] accept;
/*  {
        // INITIAL
        {-1, 32, 32, 32, 32, 26, 27, 28, 34, 34, -1, 34, -1, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 34, -1, 34, 34, 34, -1, 34, 34, -1, -1, -1, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, -1, -1, -1, -1, 38, 38, 35, 35, 35, 35, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, -1, -1, -1, 37, 38, 33, 33, 33, 33, 33, 33, 33, 33, 33, 6, 33, 33, 33, 33, 33, 33, -1, 36, -1, -1, 33, 1, 33, 33, 33, 34, 33, 33, 23, 33, 33, 33, 33, 33, 33, 7, -1, -1, 33, 33, 33, 34, 34, 33, 34, 33, 33, 2, 33, 33, 33, 33, 33, 33, 34, 34, 33, 34, 33, -1, 33, -1, 33, 0, 29, 33, 34, 34, 34, 33, 34, 33, -1, -1, -1, -1, -1, -1, -1, 33, 33, 34, 34, 34, 33, 34, 33, -1, -1, -1, -1, -1, -1, -1, -1, -1, 33, 3, 34, 34, 34, 34, 34, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, 33, 34, 34, 34, 34, 34, -1, -1, -1, -1, -1, -1, -1, -1, -1, 33, 34, 34, 34, 34, 34, 34, -1, -1, 9, -1, -1, -1, -1, -1, 12, -1, 24, 34, 34, 34, 34, 34, -1, -1, -1, -1, 21, -1, -1, -1, -1, -1, 25, 34, 34, 34, 34, -1, -1, -1, -1, -1, -1, -1, -1, -1, 34, 34, 34, 34, -1, 8, -1, -1, -1, 11, -1, -1, -1, 34, 34, 34, 34, 10, -1, 20, 13, -1, -1, -1, 34, 34, 34, 34, 22, -1, -1, 15, 5, 34, 34, 34, -1, -1, -1, 34, 34, -1, -1, -1, -1, -1, 34, 34, -1, 14, -1, -1, -1, 34, 34, 16, -1, -1, -1, 34, 34, -1, -1, -1, 34, 34, -1, -1, 18, 34, 34, -1, -1, 34, 34, -1, -1, 34, 34, -1, 17, 34, 34, 19, 34, 34, 34, 34, 31, 34, 34, 30, },

    };*/

    public static class State
    {
        public final static State INITIAL = new State(0);

        private int id;

        private State(@SuppressWarnings("hiding") int id)
        {
            this.id = id;
        }

        public int id()
        {
            return this.id;
        }
    }

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Lexer.class.getResourceAsStream("lexer.dat")));

            // read gotoTable
            int length = s.readInt();
            gotoTable = new int[length][][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][][];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                    length = s.readInt();
                    gotoTable[i][j] = new int[length][3];
                    for(int k = 0; k < gotoTable[i][j].length; k++)
                    {
                        for(int l = 0; l < 3; l++)
                        {
                            gotoTable[i][j][k][l] = s.readInt();
                        }
                    }
                }
            }

            // read accept
            length = s.readInt();
            accept = new int[length][];
            for(int i = 0; i < accept.length; i++)
            {
                length = s.readInt();
                accept[i] = new int[length];
                for(int j = 0; j < accept[i].length; j++)
                {
                    accept[i][j] = s.readInt();
                }
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"lexer.dat\" is either missing or corrupted.");
        }
    }
}
