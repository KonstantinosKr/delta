#include "__PROJECT_PATH__/adapters/__THIS_TYPENAME__.h"


peano::CommunicationSpecification   __THIS_QUALIFIED_TYPENAME__::communicationSpecification() {
  return peano::CommunicationSpecification::getMinimalSpecification()
  __x__FULL_QUALIFIED_MAPPINGS__ & __NAMESPACE__::__FULL_QUALIFIED_MAPPINGS__::communicationSpecification()
  ;
}


peano::MappingSpecification   __THIS_QUALIFIED_TYPENAME__::touchVertexLastTimeSpecification() {
  return peano::MappingSpecification::getMinimalSpecification()
  __x__FULL_QUALIFIED_MAPPINGS__ & __NAMESPACE__::__FULL_QUALIFIED_MAPPINGS__::touchVertexLastTimeSpecification()
  ;
}


peano::MappingSpecification   __THIS_QUALIFIED_TYPENAME__::touchVertexFirstTimeSpecification() { 
  return peano::MappingSpecification::getMinimalSpecification()
  __x__FULL_QUALIFIED_MAPPINGS__ & __NAMESPACE__::__FULL_QUALIFIED_MAPPINGS__::touchVertexFirstTimeSpecification()
  ;
}


peano::MappingSpecification   __THIS_QUALIFIED_TYPENAME__::enterCellSpecification() {
  return peano::MappingSpecification::getMinimalSpecification()
  __x__FULL_QUALIFIED_MAPPINGS__ & __NAMESPACE__::__FULL_QUALIFIED_MAPPINGS__::enterCellSpecification()
  ;
}


peano::MappingSpecification   __THIS_QUALIFIED_TYPENAME__::leaveCellSpecification() {
  return peano::MappingSpecification::getMinimalSpecification()
  __x__FULL_QUALIFIED_MAPPINGS__ & __NAMESPACE__::__FULL_QUALIFIED_MAPPINGS__::leaveCellSpecification()
  ;
}


peano::MappingSpecification   __THIS_QUALIFIED_TYPENAME__::ascendSpecification() {
  return peano::MappingSpecification::getMinimalSpecification()
  __x__FULL_QUALIFIED_MAPPINGS__ & __NAMESPACE__::__FULL_QUALIFIED_MAPPINGS__::ascendSpecification()
  ;
}


peano::MappingSpecification   __THIS_QUALIFIED_TYPENAME__::descendSpecification() {
  return peano::MappingSpecification::getMinimalSpecification()
  __x__FULL_QUALIFIED_MAPPINGS__ & __NAMESPACE__::__FULL_QUALIFIED_MAPPINGS__::descendSpecification()
  ;
}


__THIS_QUALIFIED_TYPENAME__::__THIS_TYPENAME__() {
}


__THIS_QUALIFIED_TYPENAME__::~__THIS_TYPENAME__() {
}


#if defined(SharedMemoryParallelisation)
__THIS_QUALIFIED_TYPENAME__::__THIS_TYPENAME__(const __THIS_TYPENAME__&  masterThread):
 __xc__MAPPINGS__ _map2__MAPPINGS__(masterThread._map2__MAPPINGS__) 
{
}


void __THIS_QUALIFIED_TYPENAME__::mergeWithWorkerThread(const __THIS_TYPENAME__& workerThread) {
 __x__MAPPINGS__ _map2__MAPPINGS__.mergeWithWorkerThread(workerThread._map2__MAPPINGS__);
}
#endif


void __THIS_QUALIFIED_TYPENAME__::createHangingVertex(
      __NAMESPACE__::Vertex&     fineGridVertex,
      const tarch::la::Vector<DIMENSIONS,double>&                fineGridX,
      const tarch::la::Vector<DIMENSIONS,double>&                fineGridH,
      __NAMESPACE__::Vertex * const   coarseGridVertices,
      const peano::grid::VertexEnumerator&      coarseGridVerticesEnumerator,
      __NAMESPACE__::Cell&       coarseGridCell,
      const tarch::la::Vector<DIMENSIONS,int>&                   fineGridPositionOfVertex
) {
 __x__MAPPINGS__ _map2__MAPPINGS__.createHangingVertex(fineGridVertex, fineGridX, fineGridH, coarseGridVertices, coarseGridVerticesEnumerator, coarseGridCell, fineGridPositionOfVertex );

}


void __THIS_QUALIFIED_TYPENAME__::destroyHangingVertex(
      const __NAMESPACE__::Vertex&   fineGridVertex,
      const tarch::la::Vector<DIMENSIONS,double>&                    fineGridX,
      const tarch::la::Vector<DIMENSIONS,double>&                    fineGridH,
      __NAMESPACE__::Vertex * const  coarseGridVertices,
      const peano::grid::VertexEnumerator&          coarseGridVerticesEnumerator,
      __NAMESPACE__::Cell&           coarseGridCell,
      const tarch::la::Vector<DIMENSIONS,int>&                       fineGridPositionOfVertex
) {
 __x__MAPPINGS__ _map2__MAPPINGS__.destroyHangingVertex(fineGridVertex, fineGridX, fineGridH, coarseGridVertices, coarseGridVerticesEnumerator, coarseGridCell, fineGridPositionOfVertex );
}


void __THIS_QUALIFIED_TYPENAME__::createInnerVertex(
      __NAMESPACE__::Vertex&               fineGridVertex,
      const tarch::la::Vector<DIMENSIONS,double>&                          fineGridX,
      const tarch::la::Vector<DIMENSIONS,double>&                          fineGridH,
      __NAMESPACE__::Vertex * const        coarseGridVertices,
      const peano::grid::VertexEnumerator&                coarseGridVerticesEnumerator,
      __NAMESPACE__::Cell&                 coarseGridCell,
      const tarch::la::Vector<DIMENSIONS,int>&                             fineGridPositionOfVertex
) {
 __x__MAPPINGS__ _map2__MAPPINGS__.createInnerVertex(fineGridVertex, fineGridX, fineGridH, coarseGridVertices, coarseGridVerticesEnumerator, coarseGridCell, fineGridPositionOfVertex );
}


void __THIS_QUALIFIED_TYPENAME__::createBoundaryVertex(
      __NAMESPACE__::Vertex&               fineGridVertex,
      const tarch::la::Vector<DIMENSIONS,double>&                          fineGridX,
      const tarch::la::Vector<DIMENSIONS,double>&                          fineGridH,
      __NAMESPACE__::Vertex * const        coarseGridVertices,
      const peano::grid::VertexEnumerator&                coarseGridVerticesEnumerator,
      __NAMESPACE__::Cell&                 coarseGridCell,
      const tarch::la::Vector<DIMENSIONS,int>&                             fineGridPositionOfVertex
) {
 __x__MAPPINGS__ _map2__MAPPINGS__.createBoundaryVertex( fineGridVertex, fineGridX, fineGridH, coarseGridVertices, coarseGridVerticesEnumerator, coarseGridCell, fineGridPositionOfVertex );
}


void __THIS_QUALIFIED_TYPENAME__::destroyVertex(
      const __NAMESPACE__::Vertex&   fineGridVertex,
      const tarch::la::Vector<DIMENSIONS,double>&                    fineGridX,
      const tarch::la::Vector<DIMENSIONS,double>&                    fineGridH,
      __NAMESPACE__::Vertex * const  coarseGridVertices,
      const peano::grid::VertexEnumerator&          coarseGridVerticesEnumerator,
      __NAMESPACE__::Cell&           coarseGridCell,
      const tarch::la::Vector<DIMENSIONS,int>&                       fineGridPositionOfVertex
) {
 __x__MAPPINGS__ _map2__MAPPINGS__.destroyVertex( fineGridVertex, fineGridX, fineGridH, coarseGridVertices, coarseGridVerticesEnumerator, coarseGridCell, fineGridPositionOfVertex );
}


void __THIS_QUALIFIED_TYPENAME__::createCell(
      __NAMESPACE__::Cell&                 fineGridCell,
      __NAMESPACE__::Vertex * const        fineGridVertices,
      const peano::grid::VertexEnumerator&                fineGridVerticesEnumerator,
      __NAMESPACE__::Vertex * const        coarseGridVertices,
      const peano::grid::VertexEnumerator&                coarseGridVerticesEnumerator,
      __NAMESPACE__::Cell&                 coarseGridCell,
      const tarch::la::Vector<DIMENSIONS,int>&                             fineGridPositionOfCell
) {
 __x__MAPPINGS__ _map2__MAPPINGS__.createCell( fineGridCell, fineGridVertices, fineGridVerticesEnumerator, coarseGridVertices, coarseGridVerticesEnumerator, coarseGridCell, fineGridPositionOfCell );
}


void __THIS_QUALIFIED_TYPENAME__::destroyCell(
      const __NAMESPACE__::Cell&           fineGridCell,
      __NAMESPACE__::Vertex * const        fineGridVertices,
      const peano::grid::VertexEnumerator&                fineGridVerticesEnumerator,
      __NAMESPACE__::Vertex * const        coarseGridVertices,
      const peano::grid::VertexEnumerator&                coarseGridVerticesEnumerator,
      __NAMESPACE__::Cell&                 coarseGridCell,
      const tarch::la::Vector<DIMENSIONS,int>&                             fineGridPositionOfCell
) {
 __x__MAPPINGS__ _map2__MAPPINGS__.destroyCell( fineGridCell, fineGridVertices, fineGridVerticesEnumerator, coarseGridVertices, coarseGridVerticesEnumerator, coarseGridCell, fineGridPositionOfCell );
}


#ifdef Parallel
void __THIS_QUALIFIED_TYPENAME__::mergeWithNeighbour(
  __NAMESPACE__::Vertex&  vertex,
  const __NAMESPACE__::Vertex&  neighbour,
  int                                           fromRank,
  const tarch::la::Vector<DIMENSIONS,double>&   fineGridX,
  const tarch::la::Vector<DIMENSIONS,double>&   fineGridH,
  int                                           level
) {
  __x__MAPPINGS__ _map2__MAPPINGS__.mergeWithNeighbour( vertex, neighbour, fromRank, fineGridX, fineGridH, level );
}


void __THIS_QUALIFIED_TYPENAME__::prepareSendToNeighbour(
  __NAMESPACE__::Vertex&  vertex,
  int                                           toRank,
  const tarch::la::Vector<DIMENSIONS,double>&   x,
  const tarch::la::Vector<DIMENSIONS,double>&   h,
  int                                           level
) {
  __x__MAPPINGS__ _map2__MAPPINGS__.prepareSendToNeighbour( vertex, toRank, x, h, level );
}


void __THIS_QUALIFIED_TYPENAME__::prepareCopyToRemoteNode(
  __NAMESPACE__::Vertex&  localVertex,
  int                                           toRank,
  const tarch::la::Vector<DIMENSIONS,double>&   x,
  const tarch::la::Vector<DIMENSIONS,double>&   h,
  int                                           level
) {
  __x__MAPPINGS__ _map2__MAPPINGS__.prepareCopyToRemoteNode( localVertex, toRank, x, h, level );
}


void __THIS_QUALIFIED_TYPENAME__::prepareCopyToRemoteNode(
  __NAMESPACE__::Cell&  localCell,
      int                                           toRank,
      const tarch::la::Vector<DIMENSIONS,double>&   x,
      const tarch::la::Vector<DIMENSIONS,double>&   h,
      int                                           level
) {
  __x__MAPPINGS__ _map2__MAPPINGS__.prepareCopyToRemoteNode( localCell, toRank, x, h, level );
}


void __THIS_QUALIFIED_TYPENAME__::mergeWithRemoteDataDueToForkOrJoin(
  __NAMESPACE__::Vertex&  localVertex,
  const __NAMESPACE__::Vertex&  masterOrWorkerVertex,
  int                                       fromRank,
  const tarch::la::Vector<DIMENSIONS,double>&  x,
  const tarch::la::Vector<DIMENSIONS,double>&  h,
  int                                       level
) {
  __x__MAPPINGS__ _map2__MAPPINGS__.mergeWithRemoteDataDueToForkOrJoin( localVertex, masterOrWorkerVertex, fromRank, x, h, level );
}


void __THIS_QUALIFIED_TYPENAME__::mergeWithRemoteDataDueToForkOrJoin(
  __NAMESPACE__::Cell&  localCell,
  const __NAMESPACE__::Cell&  masterOrWorkerCell,
  int                                       fromRank,
  const tarch::la::Vector<DIMENSIONS,double>&  x,
  const tarch::la::Vector<DIMENSIONS,double>&  h,
  int                                       level
) {
  __x__MAPPINGS__ _map2__MAPPINGS__.mergeWithRemoteDataDueToForkOrJoin( localCell, masterOrWorkerCell, fromRank, x, h, level );
}


bool __THIS_QUALIFIED_TYPENAME__::prepareSendToWorker(
  __NAMESPACE__::Cell&                 fineGridCell,
  __NAMESPACE__::Vertex * const        fineGridVertices,
  const peano::grid::VertexEnumerator&                fineGridVerticesEnumerator,
  __NAMESPACE__::Vertex * const        coarseGridVertices,
  const peano::grid::VertexEnumerator&                coarseGridVerticesEnumerator,
  __NAMESPACE__::Cell&                 coarseGridCell,
  const tarch::la::Vector<DIMENSIONS,int>&                             fineGridPositionOfCell,
  int                                                                  worker
) {
  bool result = false;
  __x__MAPPINGS__ result |= _map2__MAPPINGS__.prepareSendToWorker( fineGridCell, fineGridVertices, fineGridVerticesEnumerator, coarseGridVertices, coarseGridVerticesEnumerator, coarseGridCell, fineGridPositionOfCell, worker );
  return result;
}


void __THIS_QUALIFIED_TYPENAME__::prepareSendToMaster(
  __NAMESPACE__::Cell&                       localCell,
  __NAMESPACE__::Vertex *                    vertices,
  const peano::grid::VertexEnumerator&       verticesEnumerator, 
  const __NAMESPACE__::Vertex * const        coarseGridVertices,
  const peano::grid::VertexEnumerator&       coarseGridVerticesEnumerator,
  const __NAMESPACE__::Cell&                 coarseGridCell,
  const tarch::la::Vector<DIMENSIONS,int>&   fineGridPositionOfCell
) {
  __x__MAPPINGS__ _map2__MAPPINGS__.prepareSendToMaster( localCell, vertices, verticesEnumerator, coarseGridVertices, coarseGridVerticesEnumerator, coarseGridCell, fineGridPositionOfCell );
}


void __THIS_QUALIFIED_TYPENAME__::mergeWithMaster(
  const __NAMESPACE__::Cell&           workerGridCell,
  __NAMESPACE__::Vertex * const        workerGridVertices,
  const peano::grid::VertexEnumerator& workerEnumerator,
  __NAMESPACE__::Cell&                 fineGridCell,
  __NAMESPACE__::Vertex * const        fineGridVertices,
  const peano::grid::VertexEnumerator&                fineGridVerticesEnumerator,
  __NAMESPACE__::Vertex * const        coarseGridVertices,
  const peano::grid::VertexEnumerator&                coarseGridVerticesEnumerator,
  __NAMESPACE__::Cell&                 coarseGridCell,
  const tarch::la::Vector<DIMENSIONS,int>&                             fineGridPositionOfCell,
  int                                                                  worker,
    const __NAMESPACE__::State&          workerState,
  __NAMESPACE__::State&                masterState
) {
  __x__MAPPINGS__ _map2__MAPPINGS__.mergeWithMaster( workerGridCell, workerGridVertices, workerEnumerator, fineGridCell, fineGridVertices, fineGridVerticesEnumerator, coarseGridVertices, coarseGridVerticesEnumerator, coarseGridCell, fineGridPositionOfCell, worker, workerState, masterState );
}


void __THIS_QUALIFIED_TYPENAME__::receiveDataFromMaster(
      __NAMESPACE__::Cell&                        receivedCell, 
      __NAMESPACE__::Vertex *                     receivedVertices,
      const peano::grid::VertexEnumerator&        receivedVerticesEnumerator,
      __NAMESPACE__::Vertex * const               receivedCoarseGridVertices,
      const peano::grid::VertexEnumerator&        receivedCoarseGridVerticesEnumerator,
      __NAMESPACE__::Cell&                        receivedCoarseGridCell,
      __NAMESPACE__::Vertex * const               workersCoarseGridVertices,
      const peano::grid::VertexEnumerator&        workersCoarseGridVerticesEnumerator,
      __NAMESPACE__::Cell&                        workersCoarseGridCell,
      const tarch::la::Vector<DIMENSIONS,int>&    fineGridPositionOfCell
) {
  __x__MAPPINGS__ _map2__MAPPINGS__.receiveDataFromMaster( receivedCell, receivedVertices, receivedVerticesEnumerator, receivedCoarseGridVertices, receivedCoarseGridVerticesEnumerator, receivedCoarseGridCell, workersCoarseGridVertices, workersCoarseGridVerticesEnumerator, workersCoarseGridCell, fineGridPositionOfCell );
}


void __THIS_QUALIFIED_TYPENAME__::mergeWithWorker(
  __NAMESPACE__::Cell&           localCell, 
  const __NAMESPACE__::Cell&     receivedMasterCell,
  const tarch::la::Vector<DIMENSIONS,double>&  cellCentre,
  const tarch::la::Vector<DIMENSIONS,double>&  cellSize,
  int                                          level
) {
  __x__MAPPINGS__ _map2__MAPPINGS__.mergeWithWorker( localCell, receivedMasterCell, cellCentre, cellSize, level );
}


void __THIS_QUALIFIED_TYPENAME__::mergeWithWorker(
  __NAMESPACE__::Vertex&        localVertex,
  const __NAMESPACE__::Vertex&  receivedMasterVertex,
  const tarch::la::Vector<DIMENSIONS,double>&   x,
  const tarch::la::Vector<DIMENSIONS,double>&   h,
  int                                           level
) {
  __x__MAPPINGS__ _map2__MAPPINGS__.mergeWithWorker( localVertex, receivedMasterVertex, x, h, level );
}
#endif


void __THIS_QUALIFIED_TYPENAME__::touchVertexFirstTime(
      __NAMESPACE__::Vertex&               fineGridVertex,
      const tarch::la::Vector<DIMENSIONS,double>&                          fineGridX,
      const tarch::la::Vector<DIMENSIONS,double>&                          fineGridH,
      __NAMESPACE__::Vertex * const        coarseGridVertices,
      const peano::grid::VertexEnumerator&                coarseGridVerticesEnumerator,
      __NAMESPACE__::Cell&                 coarseGridCell,
      const tarch::la::Vector<DIMENSIONS,int>&                             fineGridPositionOfVertex
) {
 __x__MAPPINGS__ _map2__MAPPINGS__.touchVertexFirstTime( fineGridVertex, fineGridX, fineGridH, coarseGridVertices, coarseGridVerticesEnumerator, coarseGridCell, fineGridPositionOfVertex );
}


void __THIS_QUALIFIED_TYPENAME__::touchVertexLastTime(
      __NAMESPACE__::Vertex&         fineGridVertex,
      const tarch::la::Vector<DIMENSIONS,double>&                    fineGridX,
      const tarch::la::Vector<DIMENSIONS,double>&                    fineGridH,
      __NAMESPACE__::Vertex * const  coarseGridVertices,
      const peano::grid::VertexEnumerator&          coarseGridVerticesEnumerator,
      __NAMESPACE__::Cell&           coarseGridCell,
      const tarch::la::Vector<DIMENSIONS,int>&                       fineGridPositionOfVertex
) {
 __x__MAPPINGS__ _map2__MAPPINGS__.touchVertexLastTime( fineGridVertex, fineGridX, fineGridH, coarseGridVertices, coarseGridVerticesEnumerator, coarseGridCell, fineGridPositionOfVertex );
}


void __THIS_QUALIFIED_TYPENAME__::enterCell(
      __NAMESPACE__::Cell&                 fineGridCell,
      __NAMESPACE__::Vertex * const        fineGridVertices,
      const peano::grid::VertexEnumerator&                fineGridVerticesEnumerator,
      __NAMESPACE__::Vertex * const        coarseGridVertices,
      const peano::grid::VertexEnumerator&                coarseGridVerticesEnumerator,
      __NAMESPACE__::Cell&                 coarseGridCell,
      const tarch::la::Vector<DIMENSIONS,int>&                             fineGridPositionOfCell
) {
 __x__MAPPINGS__ _map2__MAPPINGS__.enterCell( fineGridCell, fineGridVertices, fineGridVerticesEnumerator, coarseGridVertices, coarseGridVerticesEnumerator, coarseGridCell, fineGridPositionOfCell );
}


void __THIS_QUALIFIED_TYPENAME__::leaveCell(
      __NAMESPACE__::Cell&           fineGridCell,
      __NAMESPACE__::Vertex * const  fineGridVertices,
      const peano::grid::VertexEnumerator&          fineGridVerticesEnumerator,
      __NAMESPACE__::Vertex * const  coarseGridVertices,
      const peano::grid::VertexEnumerator&          coarseGridVerticesEnumerator,
      __NAMESPACE__::Cell&           coarseGridCell,
      const tarch::la::Vector<DIMENSIONS,int>&                       fineGridPositionOfCell
) {
 __x__MAPPINGS__ _map2__MAPPINGS__.leaveCell( fineGridCell, fineGridVertices, fineGridVerticesEnumerator, coarseGridVertices, coarseGridVerticesEnumerator, coarseGridCell, fineGridPositionOfCell );
}


void __THIS_QUALIFIED_TYPENAME__::beginIteration(
  __NAMESPACE__::State&  solverState
) {
 __x__MAPPINGS__ _map2__MAPPINGS__.beginIteration( solverState );
}


void __THIS_QUALIFIED_TYPENAME__::endIteration(
  __NAMESPACE__::State&  solverState
) {
 __x__MAPPINGS__ _map2__MAPPINGS__.endIteration( solverState );
}




void __THIS_QUALIFIED_TYPENAME__::descend(
  __NAMESPACE__::Cell * const          fineGridCells,
  __NAMESPACE__::Vertex * const        fineGridVertices,
  const peano::grid::VertexEnumerator&                fineGridVerticesEnumerator,
  __NAMESPACE__::Vertex * const        coarseGridVertices,
  const peano::grid::VertexEnumerator&                coarseGridVerticesEnumerator,
  __NAMESPACE__::Cell&                 coarseGridCell
) {
 __x__MAPPINGS__ _map2__MAPPINGS__.descend( fineGridCells, fineGridVertices, fineGridVerticesEnumerator, coarseGridVertices, coarseGridVerticesEnumerator, coarseGridCell );
}


void __THIS_QUALIFIED_TYPENAME__::ascend(
  __NAMESPACE__::Cell * const    fineGridCells,
  __NAMESPACE__::Vertex * const  fineGridVertices,
  const peano::grid::VertexEnumerator&          fineGridVerticesEnumerator,
  __NAMESPACE__::Vertex * const  coarseGridVertices,
  const peano::grid::VertexEnumerator&          coarseGridVerticesEnumerator,
  __NAMESPACE__::Cell&           coarseGridCell
) {
 __x__MAPPINGS__ _map2__MAPPINGS__.ascend( fineGridCells, fineGridVertices, fineGridVerticesEnumerator, coarseGridVertices, coarseGridVerticesEnumerator, coarseGridCell );
}
