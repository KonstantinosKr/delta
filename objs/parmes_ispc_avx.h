//
// objs/parmes_ispc_avx.h
// (Header automatically generated by the ispc compiler.)
// DO NOT EDIT THIS FILE.
//

#ifndef ISPC_OBJS_PARMES_ISPC_AVX_H
#define ISPC_OBJS_PARMES_ISPC_AVX_H

#include <stdint.h>



#ifdef __cplusplus
namespace ispc { /* namespace */
#endif // __cplusplus

#ifndef __ISPC_ALIGN__
#if defined(__clang__) || !defined(_MSC_VER)
// Clang, GCC, ICC
#define __ISPC_ALIGN__(s) __attribute__((aligned(s)))
#define __ISPC_ALIGNED_STRUCT__(s) struct __ISPC_ALIGN__(s)
#else
// Visual Studio
#define __ISPC_ALIGN__(s) __declspec(align(s))
#define __ISPC_ALIGNED_STRUCT__(s) __ISPC_ALIGN__(s) struct
#endif
#endif


///////////////////////////////////////////////////////////////////////////
// Functions exported from ispc code
///////////////////////////////////////////////////////////////////////////
#if defined(__cplusplus) && (! defined(__ISPC_NO_EXTERN_C) || !__ISPC_NO_EXTERN_C )
extern "C" {
#endif // __cplusplus
    extern double *  aligned_iREAL_alloc(int32_t n);
    extern void aligned_iREAL_free(double * ptr);
    extern int32_t *  aligned_int_alloc(int32_t n);
    extern void aligned_int_free(int32_t * ptr);
    extern double critical(int32_t parnum, double * mass, int32_t pairnum, double *  * iparam);
    extern void euler(int32_t threads, int32_t parnum, double *  * angular, double *  * linear, double *  * rotation, double *  * position, double step);
    extern void invert_inertia(int32_t threads, int32_t size, double *  * inertia, double *  * inverse, double * mass, double * invm);
    extern int32_t ispc_num_cores();
#if defined(__cplusplus) && (! defined(__ISPC_NO_EXTERN_C) || !__ISPC_NO_EXTERN_C )
} /* end extern C */
#endif // __cplusplus


#ifdef __cplusplus
} /* namespace */
#endif // __cplusplus

#endif // ISPC_OBJS_PARMES_ISPC_AVX_H
